<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS</title>
    <url>/2022/04/15/CSS/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200507153758833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Bhbl9oMTk5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h1 id="1-CSS"><a href="#1-CSS" class="headerlink" title="1 CSS"></a>1 CSS</h1><p>如何学习</p>
<ol>
<li>CSS是什么</li>
<li>CSS怎么用（快速入门）</li>
<li><strong>CSS选择器（重点+难点）</strong></li>
<li>美化网页（文字，阴影，超链接，列表，渐变…）</li>
<li>盒子模型</li>
<li>浮动</li>
<li>定位</li>
<li>网页动画（特效效果）</li>
</ol>
<span id="more"></span>
<h2 id="1-1-什么是CSS"><a href="#1-1-什么是CSS" class="headerlink" title="1.1 什么是CSS"></a>1.1 什么是CSS</h2><p>Cascading Style Sheet层叠样式表</p>
<p>CSS：表现（美化网页）</p>
<p>字体，颜色，边距，高度，宽度，背景图片，网页定位，网页浮动</p>
<h2 id="1-2-发展史"><a href="#1-2-发展史" class="headerlink" title="1.2 发展史"></a>1.2 发展史</h2><p>CSS1.0</p>
<p>CSS2.0：DIV（块）+CSS，HTML与CSS结构分离的思想，网页变得简单，SEO</p>
<p>CSS2.1：浮动，定位</p>
<p>CSS3.0：圆角、阴影、动画…浏览器兼容性~</p>
<h2 id="1-3-快速入门"><a href="#1-3-快速入门" class="headerlink" title="1.3 快速入门"></a>1.3 快速入门</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    规范，&lt;style&gt; 可以编写css代码</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">        选择器&#123;</span></span><br><span class="line"><span class="comment">            声明1；</span></span><br><span class="line"><span class="comment">            声明2；</span></span><br><span class="line"><span class="comment">            ...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>html与css分离</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    规范，&lt;style&gt; 可以编写css代码</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">        选择器&#123;</span></span><br><span class="line"><span class="comment">            声明1；</span></span><br><span class="line"><span class="comment">            声明2；</span></span><br><span class="line"><span class="comment">            ...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>css的优势：</p>
<ol>
<li>内容与表现分离</li>
<li>网页结构表现统一，可以实现复用</li>
<li>样式丰富</li>
<li>建议使用独立于html的css</li>
<li>利于SEO，容易被搜索引擎收录</li>
</ol>
<h2 id="1-4-CSS的三种导入方式"><a href="#1-4-CSS的三种导入方式" class="headerlink" title="1.4 CSS的三种导入方式"></a>1.4 CSS的三种导入方式</h2><p>行内样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--行内样式 在标签元素中，编写一个style属性，编写样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>内部样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    内部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>外部样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*外部样式*/</span></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>优先级 就近原则</p>
<p>外部样式两种写法</p>
<ul>
<li><p>链接式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>导入式 CSS2.1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@import</span> url(<span class="string">&quot;css/style.css&quot;</span>);</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2 选择器"></a>2 选择器</h1><blockquote>
<p>作用：选择页面上的某一个或某一类元素</p>
</blockquote>
<h2 id="2-1基本选择器"><a href="#2-1基本选择器" class="headerlink" title="2.1基本选择器"></a>2.1基本选择器</h2><ol>
<li><p>标签选择器 选择一类标签  标签{}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>12312sa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>类 选择器class 选中所有class属性一致的标签,跨标签,  .class{}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/*类选择器的格式  .class的名称&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">好处：可以多个标签归类，是同一个class*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.zz</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.zzz</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.zzzz</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;zz&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;zzz&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;zzzz&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;zz&quot;</span>&gt;</span>sadasd<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>id选择器 全局唯一 #id{}</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*id 选择器格式:id必须保证全局唯一</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        #id名称&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        不遵循就近原则 id&gt;class&gt;标签选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#zz</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.zz</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;zz&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;zz&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>优先级: 不遵循就近原则 id&gt;class&gt;标签选择器</p>
<h2 id="2-2层次选择器"><a href="#2-2层次选择器" class="headerlink" title="2.2层次选择器"></a>2.2层次选择器</h2><ol>
<li><p>后代选择器在某个元素的后面 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>子选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>相邻兄弟选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*相邻兄弟，只有一个（向下）*/</span></span><br><span class="line"><span class="selector-class">.p1</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: chocolate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>通用选择器</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*通用兄弟选择器 （向下）*/</span></span><br><span class="line"><span class="selector-class">.p1</span>~<span class="selector-tag">p</span>&#123;<span class="attribute">background</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3结构伪类选择器"><a href="#2-3结构伪类选择器" class="headerlink" title="2.3结构伪类选择器"></a>2.3结构伪类选择器</h2><p>伪类：伪类对元素进行分类是基于特征(characteristics)而不是它们的名字、属性或者内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ul的第一个子元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ul的最后一个子元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选中p1  定位到父元素，选择当前的第一个元素</span></span><br><span class="line"><span class="comment">选中当前元素的父元素，选择父元素的第n个,并且只有是当前元素才生效*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">background</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选中父元素下的第n个p元素*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-属性选择器"><a href="#2-4-属性选择器" class="headerlink" title="2.4 属性选择器"></a>2.4 属性选择器</h2><p>id+class结合</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">50px</span> Arial;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        存在id属性的元素 a[]&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        属性名   属性名=属性值（正则）</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-attr">[id=first]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*class中又links的元素  =绝对等于  *=包含 ^=开头  $=结尾*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">&quot;links&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*选中href中以http开头的元素*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-attr">[href^=http]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item first&quot;</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item active&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;test&quot;</span> &gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link item&quot;</span> &gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;last&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-美化网页元素"><a href="#3-美化网页元素" class="headerlink" title="3 美化网页元素"></a>3 美化网页元素</h1><h2 id="3-1-为什么要美化页面"><a href="#3-1-为什么要美化页面" class="headerlink" title="3.1 为什么要美化页面"></a>3.1 为什么要美化页面</h2><ol>
<li>有效传递页面信息</li>
<li>美化网页，页面漂亮才能吸引用户</li>
<li>凸显页面主题</li>
<li>提高用户体验</li>
</ol>
<p>span标签：重点要突出的字，使用span标签套起来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#title1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎学习   <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;title1&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-字体样式"><a href="#3-2-字体样式" class="headerlink" title="3.2 字体样式"></a>3.2 字体样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"><span class="attribute">font-family</span> 字体</span><br><span class="line"><span class="attribute">font-size</span> 字体大小</span><br><span class="line"><span class="attribute">font-weight</span> 粗细</span><br><span class="line"><span class="attribute">color</span> 颜色</span><br><span class="line">--&gt;</span><br><span class="line">        <span class="selector-tag">body</span>&#123;</span><br><span class="line">            <span class="attribute">font-family</span>: 楷体;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">h1</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.p1</span>&#123;</span><br><span class="line">            <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.p2</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-文本样式"><a href="#3-3-文本样式" class="headerlink" title="3.3 文本样式"></a>3.3 文本样式</h2><ol>
<li>颜色–&gt;color</li>
<li>文本对齐方式–&gt;text-align：center</li>
<li>首行缩进–&gt;text-indent：2em</li>
<li>行高–&gt;line-height：300px；行高跟块高一致就可以上下居中</li>
<li>下划线–&gt;text-decoration</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">text-decoration</span>:underline<span class="comment">/*下划线*/</span></span><br><span class="line">text-decoration:line-through<span class="comment">/*中划线*/</span></span><br><span class="line">text-decoration:overline<span class="comment">/*上划线*/</span></span><br><span class="line">text-decoration:none<span class="comment">/*超链接去下划线*/</span></span><br><span class="line">text-decoration-color: red;<span class="comment">/*线的颜色*/</span></span><br></pre></td></tr></table></figure>
<h2 id="3-4-阴影"><a href="#3-4-阴影" class="headerlink" title="3.4 阴影"></a>3.4 阴影</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* text-shadow: 阴影颜色，水平偏移，垂直偏移，阴影半径*/</span></span><br><span class="line">        <span class="selector-id">#author</span>&#123;</span><br><span class="line">            <span class="attribute">text-shadow</span>: aqua <span class="number">10px</span> <span class="number">10px</span> <span class="number">2px</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*	第一个参数：表示水平偏移</span></span><br><span class="line"><span class="comment">	第二个参数：表示垂直偏移</span></span><br><span class="line"><span class="comment">	第三个参数：表示模糊半径</span></span><br><span class="line"><span class="comment">	第四个参数：表示颜色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">text-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> 颜色</span><br></pre></td></tr></table></figure>
<p>3.5 超链接伪类</p>
<p>常用：a， a:hover</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*默认的颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标悬停的颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span>：hover&#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标按住未释放的状态*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-列表"><a href="#3-6-列表" class="headerlink" title="3.6 列表"></a>3.6 列表</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>音响<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>数字商品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>厨具<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>服饰鞋帽<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>个护化妆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>礼品箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>中标<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>珠宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>食品饮料<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>保健食品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>彩票<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>旅行<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>充值<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>票务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ul li</span></span><br><span class="line"><span class="comment">list-style:</span></span><br><span class="line"><span class="comment">    none：去掉圆点</span></span><br><span class="line"><span class="comment">    circle：空心圆</span></span><br><span class="line"><span class="comment">    decimal：数字</span></span><br><span class="line"><span class="comment">    spuare：正方形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span></span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: darkorange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-7-背景"><a href="#3-7-背景" class="headerlink" title="3.7 背景"></a>3.7 背景</h2><p>背景图片</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="comment">/*默认的平铺的*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;image/a.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">/*水平和竖直平铺 不平铺*/</span></span><br><span class="line">    <span class="comment">/*background-repeat: repeat-x;*/</span></span><br><span class="line">    <span class="comment">/*background-repeat: repeat-y;*/</span></span><br><span class="line">    <span class="comment">/*background-repeat: no-repeat;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="comment">/*颜色 图片 位置 平铺方式*/</span></span><br><span class="line">    <span class="attribute">background</span>: red <span class="built_in">url</span>(<span class="string">&quot;../images/d.jpg&quot;</span>) <span class="number">250px</span> no-repeat ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ul li</span></span><br><span class="line"><span class="comment">list-style:</span></span><br><span class="line"><span class="comment">    none：去掉圆点</span></span><br><span class="line"><span class="comment">    circle：空心圆</span></span><br><span class="line"><span class="comment">    decimal：数字</span></span><br><span class="line"><span class="comment">    spuare：正方形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../images/l.jpg&quot;</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">212px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: darkorange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/04/15/CSS/image-20200812131854014.png" alt="image-20200812131854014"></p>
<p>3.8 渐变</p>
<p><a href="https://www.grabient.com/">https://www.grabient.com/</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">66deg</span>, <span class="number">#FFFFFF</span> <span class="number">0%</span>, <span class="number">#6284FF</span> <span class="number">50%</span>, <span class="number">#FF0000</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-盒子模型"><a href="#4-盒子模型" class="headerlink" title="4 盒子模型"></a>4 盒子模型</h2><h2 id="4-1-什么是盒子模型"><a href="#4-1-什么是盒子模型" class="headerlink" title="4.1 什么是盒子模型"></a>4.1 什么是盒子模型</h2><p><img src="/2022/04/15/CSS/image-20200812132601828.png" alt="image-20200812132601828"></p>
<p>margin：外边距</p>
<p>padding：内边距</p>
<p>border：边框</p>
<h2 id="4-2-边框"><a href="#4-2-边框" class="headerlink" title="4.2.边框"></a>4.2.边框</h2><p>1、边框的粗细</p>
<p>2、边框的样式</p>
<p>3、边框的颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*默认的边距 设为0*/</span></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">a</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">form</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) <span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="comment">/*border: 粗细 样式 颜色*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: burlywood;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-3-内外边距"><a href="#4-3-内外边距" class="headerlink" title="4.3 内外边距"></a>4.3 内外边距</h2><p>margin: 0 auto; 居中元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        #box&#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            /*border: 粗细 样式 颜色*/</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            /*margin: 0 auto; 居中元素*/</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line">        /*</span><br><span class="line">顺时针选中</span><br><span class="line">margin: 0px; 上下左右全0</span><br><span class="line">margin: 0px 1px; 上下0 左右1</span><br><span class="line">margin: 1px 2px 3px 4px; 上右下左 顺时针</span><br><span class="line">*/</span><br><span class="line">        h2&#123;</span><br><span class="line">            background-color: burlywood;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            margin: 0 1px 2px 3px;</span><br><span class="line">        &#125;</span><br><span class="line">        div:nth-of-type(1) input&#123;</span><br><span class="line">            border: 3px solid black;</span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>盒子计算方式：元素的大小</p>
<p><img src="/2022/04/15/CSS/image-20200812135533326.png" alt="image-20200812135533326"></p>
<p>margin + border + padding + 内容宽度</p>
<h2 id="4-4-圆角边框"><a href="#4-4-圆角边框" class="headerlink" title="4.4 圆角边框"></a>4.4 圆角边框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">左上 右上 右下 左下，顺时针方向</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        圆圈： 圆角 = 半径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-5-盒子阴影"><a href="#4-5-盒子阴影" class="headerlink" title="4.5 盒子阴影"></a>4.5 盒子阴影</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">100px</span> yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span>  &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">100px</span> yellow;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/a.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="5-浮动"><a href="#5-浮动" class="headerlink" title="5 浮动"></a>5 浮动</h1><h2 id="5-1-标准文档流"><a href="#5-1-标准文档流" class="headerlink" title="5.1 标准文档流"></a>5.1 标准文档流</h2><p><img src="/2022/04/15/CSS/image-20200812143009450.png" alt="image-20200812143009450"></p>
<p>块级元素：独占一行    h1-h6 p div 列表…</p>
<p>行内元素：不独占一行    span a img strong</p>
<blockquote>
<p>注：行内元素可以被包含在 块级元素中，反之，则不可以</p>
</blockquote>
<h2 id="5-2-display"><a href="#5-2-display" class="headerlink" title="5.2 display"></a>5.2 display</h2><p>一种实现行内元素排列的方式,但很多时候都是使用float</p>
<p>block 块元素</p>
<p>inline 行内元素</p>
<p>inline-block 是块元素，但是可以内联，在一行</p>
<p>none 消失</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">block 块元素</span></span><br><span class="line"><span class="comment">inline 行内元素</span></span><br><span class="line"><span class="comment">inline-block 是块元素，但是可以内联，在一行</span></span><br><span class="line"><span class="comment">none 消失</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span 行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-3-float"><a href="#5-3-float" class="headerlink" title="5.3 float"></a>5.3 float</h2><p>1 左右浮动</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer01&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer02&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer03&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/3.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer04&quot;</span>&gt;</span></span><br><span class="line">        浮动的盒子可以向左浮动，也可以向右浮动，知道它的外边缘碰到包含或另一个浮动盒子为止</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer01</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#F00</span> dashed;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">float</span>: left;<span class="comment">/*向左浮动*/</span></span><br><span class="line">    <span class="attribute">clear</span>: both;<span class="comment">/*清楚浮动*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer02</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#00F</span> dashed;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer03</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#060</span> dashed;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer04</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#666</span> dashed;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-4-父级边框塌陷问题"><a href="#5-4-父级边框塌陷问题" class="headerlink" title="5.4.父级边框塌陷问题"></a>5.4.父级边框塌陷问题</h2><p>clear</p>
<p>clear：right；右侧不允许有浮动元素 </p>
<p>clear：left； 左侧不允许有浮动元素 </p>
<p>clear：both； 两侧不允许有浮动元素 </p>
<p>clear：none；</p>
<p>解决方案:</p>
<ol>
<li>增加父级元素高度</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>增加一个空的div(class=”clear”)标签</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>overflow</li>
</ol>
<p>在父级元素增加一个overflow:hidden</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在父类元素后添加伪类after</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小结:</p>
<ul>
<li>浮动元素后面增加空div<ul>
<li>简单,但代码应中尽量避免空div</li>
</ul>
</li>
<li>设置父元素高度<ul>
<li>简单,元素假设有了固定的高度,就会被限制</li>
</ul>
</li>
<li>overflow<ul>
<li>简单,下拉的场面避免使用</li>
</ul>
</li>
<li>添加伪类after(推荐)<ul>
<li>没有副作用</li>
</ul>
</li>
</ul>
<h2 id="5-5-对比"><a href="#5-5-对比" class="headerlink" title="5.5 对比"></a>5.5 对比</h2><ul>
<li>display<ul>
<li>方向不可控</li>
</ul>
</li>
<li>float <ul>
<li>浮动起来的话会脱离标准文档流,要解决父级边框塌陷的问题</li>
</ul>
</li>
</ul>
<h1 id="6-定位"><a href="#6-定位" class="headerlink" title="6 定位"></a>6 定位</h1><p>默认情况</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-1-相对定位"><a href="#6-1-相对定位" class="headerlink" title="6.1 相对定位"></a>6.1 相对定位</h2><p>相对定位:position:relative;</p>
<p>相对于原来的位置进行指定的偏移,仍在标准文档流中,原来的位置会被保留</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    相对定位</span></span><br><span class="line"><span class="comment">        相对于自己原来的位置进行偏移</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:-<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>:-<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>练习</p>
<p><img src="/2022/04/15/CSS/image-20200812154111869.png" alt="image-20200812154111869"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#FF0000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#a2</span>,<span class="selector-id">#a4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#a5</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#0000FF</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a3&quot;</span>&gt;</span>链接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a4&quot;</span>&gt;</span>链接4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a5&quot;</span>&gt;</span>链接5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-2-绝对定位"><a href="#6-2-绝对定位" class="headerlink" title="6.2 绝对定位"></a>6.2 绝对定位</h2><p>定位:基于xxx定位</p>
<ul>
<li>没有父级元素定位的前提下,相对于浏览器定位</li>
<li>假设父级元素存在定位,通常会相对于父级元素进行偏移</li>
<li>在父级元素范围内移动</li>
</ul>
<p>相对于父级或浏览器的位置进行指定的偏移,绝对定位后,仍在标准文档流中,原来的位置不会被保留</p>
<h2 id="6-3-固定定位"><a href="#6-3-固定定位" class="headerlink" title="6.3 固定定位"></a>6.3 固定定位</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">/*固定定位*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#0000FF</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-4-z-index"><a href="#6-4-z-index" class="headerlink" title="6.4 z-index"></a>6.4 z-index</h2><p><img src="/2022/04/15/CSS/image-20200812163646930.png" alt="image-20200812163646930"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/a.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;700px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tipText&quot;</span>&gt;</span>sadasdasdasdasdadasasdas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tipBg&quot;</span>&gt;</span>asdasd<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2131244<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipText</span>,<span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipText</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="comment">/*透明度*/</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="7-动画"><a href="#7-动画" class="headerlink" title="7 动画"></a>7 动画</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码: <a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2022/04/15/HTML/</url>
    <content><![CDATA[<h1 id="1-初识HTML"><a href="#1-初识HTML" class="headerlink" title="1 初识HTML"></a>1 初识HTML</h1><p>什么是HTML</p>
<p>HTML：Hper Text Markup Langueage（超文本标记语言）</p>
<p>超文本：包括文字、图片、音频、视频、动画等</p>
<span id="more"></span>
<p>优势：</p>
<ul>
<li>浏览器厂商支持<ul>
<li>微软</li>
<li>Google</li>
<li>苹果</li>
<li>Opera</li>
<li>Mozilla</li>
</ul>
</li>
<li>市场需求</li>
<li>跨平台</li>
</ul>
<p>W3C标准</p>
<ul>
<li>World Wide Web Consortium（万维网联盟）</li>
<li>成立于1994年，Web技术领域最权威和最具影响力的国际中立性技术标准机构</li>
<li><a href="http://www.w3.org/">http://www.w3.org/</a></li>
</ul>
<p>W3C的标准</p>
<ul>
<li>结构化标准语言HTML XML</li>
<li>表现标准语言 CSS</li>
<li>行为标准 DOM ECMAScript</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DOCTYPE 告诉浏览器用什么规范--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--head标签 代表网页头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    meta描述性标签，用来描述网站的信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    一般用来做SEO--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;学Java&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;可以学习java&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网页主题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="2-网页基本标签"><a href="#2-网页基本标签" class="headerlink" title="2 网页基本标签"></a>2 网页基本标签</h1><ul>
<li>标题标签                </li>
<li>段落标签               </li>
<li>换行标签          </li>
<li>水平线标签 </li>
<li>注释和特殊符号</li>
</ul>
<h1 id="3-图像，超链接，网页布局"><a href="#3-图像，超链接，网页布局" class="headerlink" title="3 图像，超链接，网页布局"></a>3 图像，超链接，网页布局</h1><h2 id="常见的图像格式"><a href="#常见的图像格式" class="headerlink" title="常见的图像格式"></a>常见的图像格式</h2><ul>
<li>JPG</li>
<li>GIF</li>
<li>PNG</li>
<li>BMP</li>
<li>…</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--img学习</span></span><br><span class="line"><span class="comment">src:图片地址</span></span><br><span class="line"><span class="comment">    相对地址（推荐使用），绝对地址</span></span><br><span class="line"><span class="comment">    ../返回上一级目录  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resouces/image/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h2><ul>
<li>文本超链接</li>
<li>图像超链接</li>
</ul>
<p>锚链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1.需要一个锚标记</span></span><br><span class="line"><span class="comment">2.跳转到标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>功能性链接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--功能性连接</span><br><span class="line">邮件连接：mailto</span><br><span class="line">QQ链接--&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;mailto:123456789@qq.com&quot;</span>&gt;点击联系我&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p>块元素：无论内容有多少，元素自己独占一行 </p>
<ul>
<li>p h1-h</li>
</ul>
<p>行内元素：内容撑开宽度，左右都是行内元素的可以排在一行</p>
<ul>
<li>a strong em</li>
</ul>
<h1 id="4-列表，表格，媒体元素"><a href="#4-列表，表格，媒体元素" class="headerlink" title="4 列表，表格，媒体元素"></a>4 列表，表格，媒体元素</h1><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><p>什么是列表</p>
<p>​        列表就是信息资源的一种展示形式。它可以使信息结构化和条理化，并以列表的样式显示出来，以便浏览者能更快捷地获得相应的信息。</p>
<p>列表的分类：</p>
<ul>
<li>无序列表</li>
<li>有序列表</li>
<li>定义列表</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tittle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义列表</span></span><br><span class="line"><span class="comment">dl 标签</span></span><br><span class="line"><span class="comment">dt 标题</span></span><br><span class="line"><span class="comment">dd列表内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p>为什么使用表格</p>
<ul>
<li>简单通用</li>
<li>结构稳定</li>
</ul>
<p>基本结构</p>
<ul>
<li>单元格</li>
<li>行</li>
<li>列</li>
<li>跨行</li>
<li>跨列</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格table</span></span><br><span class="line"><span class="comment">行 tr rows</span></span><br><span class="line"><span class="comment">列 td--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--border表格的边框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--colspan 跨列        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rowspan跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h2><ul>
<li>视频<ul>
<li>video</li>
</ul>
</li>
<li>音频<ul>
<li>audio</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--音频和视频</span></span><br><span class="line"><span class="comment">src：资源路径</span></span><br><span class="line"><span class="comment">controls：控制调</span></span><br><span class="line"><span class="comment">autoplay：自动播放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../resources/video/2.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;../resources/audio/3.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="5-表单及表单应用"><a href="#5-表单及表单应用" class="headerlink" title="5 表单及表单应用"></a>5 表单及表单应用</h1><p>页面结构分析</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>元素名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>header</td>
<td>标题头部区域的内容（用于页面或页面中的一部分）</td>
</tr>
<tr>
<td>footer</td>
<td>标记脚部区域的内容（用于页面或页面中的一部分）</td>
</tr>
<tr>
<td>section</td>
<td>Web页面中的一块独立区域</td>
</tr>
<tr>
<td>article</td>
<td>独立的文章内容</td>
</tr>
<tr>
<td>aside</td>
<td>相关内容或应用</td>
</tr>
<tr>
<td>nav</td>
<td>导航类辅助内容</td>
</tr>
</tbody>
</table>
</div>
<p>页面结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导航 nav--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>内联框架</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--iframe内联框架</span></span><br><span class="line"><span class="comment">src：地址</span></span><br><span class="line"><span class="comment">w-h：宽，高--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;change&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span>点击跳转学习java<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;change&quot;</span> &gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="6-表单初级验证"><a href="#6-表单初级验证" class="headerlink" title="6 表单初级验证"></a>6 表单初级验证</h1><p>表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action:表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method:post，get 提交方式</span></span><br><span class="line"><span class="comment">    get方式提交：我们可以在url中看到我们提交的信息，不安全，但高效</span></span><br><span class="line"><span class="comment">    post：比较安全，传输大文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;基本标签.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本输入框 Input type=&quot;text&quot;  submit提交按钮 reset重置按钮  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>表单元素格式</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>指定元素类型，text password checkbox radio submit reset file hidden image button 默认为text</td>
</tr>
<tr>
<td>name</td>
<td>指定表单元素的名称</td>
</tr>
<tr>
<td>value</td>
<td>元素的初始值，type为radio时必须指定一个值</td>
</tr>
<tr>
<td>size</td>
<td>指定表单元素的初始宽度，当type类型为text或password时，表单元素的大小以字符为单位，其他类型以像素为单位</td>
</tr>
<tr>
<td>maxlength</td>
<td>type为text或者password时输入的最大字符数</td>
</tr>
<tr>
<td>checked</td>
<td>type为radio或checkbox时，指定按钮是否被选中</td>
</tr>
</tbody>
</table>
</div>
<p>单选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单选框按钮</span></span><br><span class="line"><span class="comment">  name表示组</span></span><br><span class="line"><span class="comment">  name必须为一致，才能表示为同一组，才能只选择一个</span></span><br><span class="line"><span class="comment">  input标签 类型是radio时，必须有value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>复选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbis&quot;</span>&gt;</span>抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbis&quot;</span>&gt;</span>喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbis&quot;</span>&gt;</span>烫头</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;button&quot; 普通按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;image&quot;  图片按钮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮名字&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下拉框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下拉框 列表框</span></span><br><span class="line"><span class="comment">    &lt;select&gt;</span></span><br><span class="line"><span class="comment">    name是下拉框的名字</span></span><br><span class="line"><span class="comment">    option value 是下拉框可以选择的值</span></span><br><span class="line"><span class="comment">    selected是默认为那个列</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>国家</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名称&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span> <span class="attr">selected</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;us&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;agt&quot;</span>&gt;</span>阿根廷<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;md&quot;</span>&gt;</span>缅甸<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文本域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    文本域</span></span><br><span class="line"><span class="comment">cols=&quot;30&quot; rows=&quot;10&quot; 行，，，列</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span>  <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    文件域</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>功能验证</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  邮箱验证  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    URL验证--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>url</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    数字验证</span></span><br><span class="line"><span class="comment">max最大数量</span></span><br><span class="line"><span class="comment">min 最小数量</span></span><br><span class="line"><span class="comment">step 每次点击增加或减少的数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数字</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--滑块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>音量</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    搜索框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="表单的应用"><a href="#表单的应用" class="headerlink" title="表单的应用"></a>表单的应用</h3><ul>
<li>隐藏域</li>
<li>只读</li>
<li>禁用</li>
</ul>
<p>只读：value=“admin”（先给一个默认值） readonly</p>
<p>禁用：disabled</p>
<p>隐藏：hidden</p>
<p>单词：description 描述      content内容</p>
<p>为什么要进行表单验证？</p>
<p>常用方式：</p>
<ul>
<li>placeholder 提示（请输入用户名）</li>
<li>required 设置非空</li>
<li>pattern 正则表达式</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码: <a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Swing AWT</title>
    <url>/2022/04/15/GUI/</url>
    <content><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>GUI核心技术：Swing AWT</p>
<p>不流行原因：</p>
<ol>
<li>界面不美观</li>
<li>需要jre环境</li>
</ol>
<h1 id="2-AWT"><a href="#2-AWT" class="headerlink" title="2.AWT"></a>2.AWT</h1><h2 id="2-1-AWT介绍"><a href="#2-1-AWT介绍" class="headerlink" title="2.1 AWT介绍"></a>2.1 AWT介绍</h2><ol>
<li>包含很多类和接口</li>
<li>元素：窗口，按钮，文本框</li>
<li>java.awt</li>
</ol>
<h2 id="2-2组件和容器"><a href="#2-2组件和容器" class="headerlink" title="2.2组件和容器"></a>2.2组件和容器</h2><h3 id="1-Frame"><a href="#1-Frame" class="headerlink" title="1 Frame"></a>1 Frame</h3><h3 id="2-面板Panel"><a href="#2-面板Panel" class="headerlink" title="2 面板Panel"></a>2 面板Panel</h3><p>Panel可以看成是一个空间，但是不能单独存在</p>
<h3 id="3-布局管理器"><a href="#3-布局管理器" class="headerlink" title="3 布局管理器"></a>3 布局管理器</h3><ul>
<li>流式布局</li>
<li>东西南北中</li>
<li>表格</li>
</ul>
<p>总结：</p>
<ol>
<li>Frame是一个顶级窗口</li>
<li>Panel无法单独显示，必须添加到某个容器中</li>
<li>布局管理器</li>
<li>大小，背景颜色，定位，可见性，监听</li>
</ol>
<h3 id="4-事件监听"><a href="#4-事件监听" class="headerlink" title="4 事件监听"></a>4 事件监听</h3><p>当某个事件发生时，需要做什么</p>
<h3 id="5-TextField"><a href="#5-TextField" class="headerlink" title="5 TextField"></a>5 TextField</h3><h3 id="6-组合内部类，计算器"><a href="#6-组合内部类，计算器" class="headerlink" title="6 组合内部类，计算器"></a>6 组合内部类，计算器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui1;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    TextField num1,num2,num3;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        num1 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        num2 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        num3 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">CalculatorListener</span>());</span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(button);</span><br><span class="line">        add(num3);</span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">CalculatorListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(num1.getText());</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(num2.getText());</span><br><span class="line">            num3.setText(<span class="string">&quot;&quot;</span> + (n1 + n2));</span><br><span class="line">            num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-画笔"><a href="#7-画笔" class="headerlink" title="7 画笔"></a>7 画笔</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPaint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyPaint</span>().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPaint</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">600</span>,<span class="number">800</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">paint</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        <span class="comment">//g.drawOval(100,100,100,100);</span></span><br><span class="line">        g.fillOval(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//画笔用完还原原色</span></span><br><span class="line">        g.setColor(Color.black);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="8-鼠标监听"><a href="#8-鼠标监听" class="headerlink" title="8 鼠标监听"></a>8 鼠标监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseListener;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMouseListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MouseFrame</span>(<span class="string">&quot;画图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouseFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    ArrayList points;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MouseFrame</span><span class="params">(String title)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(title);</span><br><span class="line">        setBounds(<span class="number">400</span>,<span class="number">400</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="comment">//存鼠标的点</span></span><br><span class="line">        points = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//鼠标监听器</span></span><br><span class="line">        <span class="built_in">this</span>.addMouseListener(<span class="keyword">new</span> <span class="title class_">MyMouseListner</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> points.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> (Point) iterator.next();</span><br><span class="line">            g.setColor(Color.red);</span><br><span class="line">            g.fillOval(point.x,point.y,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPaint</span><span class="params">(Point point)</span>&#123;</span><br><span class="line">        points.add(point);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyMouseListner</span> <span class="keyword">extends</span> <span class="title class_">MouseAdapter</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">            <span class="type">MouseFrame</span> <span class="variable">myframe</span> <span class="operator">=</span> (MouseFrame)e.getSource();</span><br><span class="line">            myframe.addPaint(<span class="keyword">new</span> <span class="title class_">Point</span>(e.getX(),e.getY()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//每次点击都重画一次</span></span><br><span class="line">            myframe.repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-窗口监听"><a href="#9-窗口监听" class="headerlink" title="9 窗口监听"></a>9 窗口监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestWindow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WindowFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="comment">//匿名内部类</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">WindowFrame</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="10-键盘监听"><a href="#10-键盘监听" class="headerlink" title="10 键盘监听"></a>10 键盘监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.input.KeyCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestKeyListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">KeyFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">KeyFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        setBounds(<span class="number">1</span>,<span class="number">2</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        addKeyListener(<span class="keyword">new</span> <span class="title class_">KeyAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">//键盘按下</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">                <span class="keyword">if</span> (keyCode == KeyEvent.VK_UP)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;up&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-Swing"><a href="#3-Swing" class="headerlink" title="3 Swing"></a>3 Swing</h1><h2 id="3-1-窗口、面板"><a href="#3-1-窗口、面板" class="headerlink" title="3.1 窗口、面板"></a>3.1 窗口、面板</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JFrameDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//init()；初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">jFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">        jFrame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        jFrame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;Welcome&quot;</span>);</span><br><span class="line">        jLabel.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//容器实例化</span></span><br><span class="line">        <span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> jFrame.getContentPane();</span><br><span class="line">        contentPane.setBackground(Color.red);</span><br><span class="line">        contentPane.add(jLabel);</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JFrameDemo</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-2-弹窗"><a href="#3-2-弹窗" class="headerlink" title="3.2 弹窗"></a>3.2 弹窗</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DialogDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">700</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        contentPane.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">jButton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">        jButton.setBounds(<span class="number">30</span>,<span class="number">30</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br><span class="line">        jButton.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MydDialogDemo</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        contentPane.add(jButton);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DialogDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MydDialogDemo</span> <span class="keyword">extends</span> <span class="title class_">JDialog</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MydDialogDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span></span><br><span class="line">        <span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//contentPane.setLayout(null);</span></span><br><span class="line">        contentPane.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;Welcome&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-标签"><a href="#3-3-标签" class="headerlink" title="3.3 标签"></a>3.3 标签</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>图片标签</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageIconDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImageIconDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;Icon&quot;</span>);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> ImageIconDemo.class.getResource(<span class="string">&quot;Icon.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ImageIcon</span> <span class="variable">imageIcon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(url);</span><br><span class="line">        label.setIcon(imageIcon);</span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        container.add(label);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ImageIconDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-面板"><a href="#3-4-面板" class="headerlink" title="3.4 面板"></a>3.4 面板</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPanelDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JPanelDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        container.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel2.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        panel2.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        container.add(panel1);</span><br><span class="line">        container.add(panel2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JPanelDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>JScrollPanel</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JScrollDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JScrollDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="type">JTextArea</span> <span class="variable">jTextArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">20</span>, <span class="number">50</span>);</span><br><span class="line">        jTextArea.setText(<span class="string">&quot;welcome&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">jScrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(jTextArea);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        container.add(jScrollPane);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JScrollDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-按钮"><a href="#3-5-按钮" class="headerlink" title="3.5 按钮"></a>3.5 按钮</h2><p>图片按钮</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> JButtonDemo.class.getResource(<span class="string">&quot;Icon.png&quot;</span>);</span><br><span class="line">        <span class="type">Icon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(resource);</span><br><span class="line"></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        button.setIcon(icon);</span><br><span class="line">        button.setToolTipText(<span class="string">&quot;图片按钮&quot;</span>);</span><br><span class="line">        container.add(button);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单选框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonDemo2</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonDemo2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> JButtonDemo.class.getResource(<span class="string">&quot;Icon.png&quot;</span>);</span><br><span class="line">        <span class="type">Icon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(resource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单选框</span></span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">jrb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">jrb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">jrb3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="type">ButtonGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line">        group.add(jrb1);</span><br><span class="line">        group.add(jrb2);</span><br><span class="line">        group.add(jrb3);</span><br><span class="line"></span><br><span class="line">        container.add(jrb1,BorderLayout.CENTER);</span><br><span class="line">        container.add(jrb2,BorderLayout.NORTH);</span><br><span class="line">        container.add(jrb3,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonDemo2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复选框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonDemo3</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonDemo3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> JButtonDemo.class.getResource(<span class="string">&quot;Icon.png&quot;</span>);</span><br><span class="line">        <span class="type">Icon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(resource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多选框</span></span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">jCheckBox1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">jCheckBox2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">jCheckBox3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        container.add(jCheckBox1,BorderLayout.SOUTH);</span><br><span class="line">        container.add(jCheckBox2,BorderLayout.NORTH);</span><br><span class="line">        container.add(jCheckBox3,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonDemo3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-列表"><a href="#3-6-列表" class="headerlink" title="3.6 列表"></a>3.6 列表</h2><p>列表框：展示信息，动态扩容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JListDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JListDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        String[] contents = &#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        <span class="type">JList</span> <span class="variable">jList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(contents);</span><br><span class="line">        container.add(jList);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JListDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下拉框：选择（地区），或单个选项</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.gui.awt.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComboBoxDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestComboBoxDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="type">JComboBox</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">        status.addItem(<span class="literal">null</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        container.add(status);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestComboBoxDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-7-文本框"><a href="#3-7-文本框" class="headerlink" title="3.7 文本框"></a>3.7 文本框</h2><p>文本框、密码框、文本域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.gui.swing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.PasswordField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//文本框</span></span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">jTextField1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">jTextField2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;hello&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        container.add(jTextField1,BorderLayout.NORTH);</span><br><span class="line">        container.add(jTextField2,BorderLayout.SOUTH);</span><br><span class="line">        <span class="comment">//密码框</span></span><br><span class="line">        <span class="type">JPasswordField</span> <span class="variable">jPasswordField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPasswordField</span>();</span><br><span class="line">        jPasswordField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        container.add(jPasswordField,BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">//文本域  配合面板使用</span></span><br><span class="line">        <span class="type">JTextArea</span> <span class="variable">jTextArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>();</span><br><span class="line">        jTextArea.setText(<span class="string">&quot;21314&quot;</span>);</span><br><span class="line">        container.add(jTextArea,BorderLayout.EAST);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TextDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码：<a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Swing AWT</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法以及代码实现</title>
    <url>/2022/05/15/KMP%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="KMP算法以及代码实现"><a href="#KMP算法以及代码实现" class="headerlink" title="KMP算法以及代码实现"></a>KMP算法以及代码实现</h1><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>leetcode: <a href="https://leetcode-cn.com/problems/implement-strstr/">28.实现strStr()</a></p>
<p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input：haysteack=“aabaabaaf” needle= “aabaaf”</span><br><span class="line">output: 3</span><br></pre></td></tr></table></figure>
<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>暴力求解两个for循环，复杂度O(m*n)。KMP算法利用前缀表，获取已经匹配的文本内容，避免从头匹配。前缀表记录最长相等前后缀，用于模式串与主串不匹配时，回退到对应位置。</p>
<h2 id="求取前缀表"><a href="#求取前缀表" class="headerlink" title="求取前缀表"></a>求取前缀表</h2><h3 id="前缀表说明"><a href="#前缀表说明" class="headerlink" title="前缀表说明"></a>前缀表说明</h3><p>前（后）缀定义：不包含最后（第一）一个字母，且以首（尾）字母开头（结尾）的子串，<code>aabaaf</code>为例：</p>
<p>前缀：<code>a</code> <code>aa</code> <code>aab</code> <code>aaba</code> <code>aabaa</code></p>
<p>后缀： <code>f</code> <code>af</code> <code>aaf</code> <code>baaf</code> <code>abaaf</code> </p>
<p>前缀表记录了所有子串最长相等前后缀长度，<code>aabaaf</code>为例：</p>
<p>字串包括：<code>a</code> <code>aa</code> <code>aab</code> <code>aaba</code> <code>aabaa</code> <code>aabaaf</code></p>
<ul>
<li>a： 无先后缀，0</li>
<li>aa： 前缀<code>a</code>（第一个<code>a</code>）和后缀<code>a</code>（第二个<code>a</code>） 相等， 1</li>
<li>aab： 无相等前后缀， 0</li>
<li>aaba：前缀<code>a</code>(第一个<code>a</code>)后缀<code>a</code>（最后一个<code>a</code>）相等，1</li>
<li>aabaa：前后缀<code>aa</code>， 2</li>
<li>aabaaf： 0</li>
</ul>
<p>生成前缀表，记为next数组：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>f</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<h3 id="前缀表计算"><a href="#前缀表计算" class="headerlink" title="前缀表计算"></a>前缀表计算</h3><p>初始化前缀表，并定义遍历下标<code>i</code>,<code>j</code>,其中<code>i</code>表示模式串中当前计算的位置，j表示与之匹配的前缀末尾：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">f</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">i</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">j</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>状态1：若<code>needle[i] != needle[j]</code>则 j回退， <code>j = next[j-1]</code>。若仍不相等，则继续回退。若相等或j = 0，则进入状态2。</p>
<p>例如，对于：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">f</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">i</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">j</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>此实，i = 5，j = 2 ，<code>needle[5] != needle[2]</code>， j = next[1 - 1] = 1</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">f</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">i</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">j</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>仍不相等，继续回退 j = next[1-1] = 0，则进入状态2</p>
<p>状态2：若<code>needle[i] == needle[j]</code>则 <code>next[i++] = ++j</code> </p>
<p>例如对于初始状态：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">f</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">i</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">j</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>i = 1， j = 0, needle[1] == needle[0]，则j = 0 + 1,need[1] = 1, i = 1 + 1</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">a</th>
<th style="text-align:center">f</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">next[1] = 1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">i  = 1 + 1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">j = 0 + 1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h2 id="匹配过程"><a href="#匹配过程" class="headerlink" title="匹配过程"></a>匹配过程</h2><h3 id="模拟匹配"><a href="#模拟匹配" class="headerlink" title="模拟匹配"></a>模拟匹配</h3><p>状态1：初始状态：i,  j = 0, 0</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主串</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>f</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>i</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>模式串</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>f</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>j</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>状态2：当主串与模式串匹配时（<code>haysteack[i]==needle[j]</code>），i++,j++</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主串</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>f</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>i</td>
<td>→</td>
<td>→</td>
<td>→</td>
<td>i</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>模式串</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>a</td>
<td>f</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>j</td>
<td>→</td>
<td>→</td>
<td>→</td>
<td>j</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>状态3：当主串与模式串不匹配时（<code>haysteack[i]!=needle[j]</code>）。 j取前缀表前一位的值（<code>j = next[j-1]</code>）。若仍不相等且j&gt;0，则继续回退。若不相等且j = 0，则i++。</p>
<p>例如：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主串</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>f</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>i</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>模式串</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>a</td>
<td>f</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>j</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>此时i = 5, j = 5, haysteack[5]!=needle[5]，j取前缀表前一位的值j=next[5-1] = 2</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主串</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>f</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>i</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>模式串</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>a</td>
<td>f</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>j</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>变为状态2，继续匹配，直至匹配完成</p>
<p>若直至 j = 0 仍不相等，则i++。例如：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主串</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>d</th>
<th>a</th>
<th>a</th>
<th>f</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>i</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>模式串</td>
<td>a</td>
<td>a</td>
<td>f</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>j=0</td>
<td>←</td>
<td>j</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>则i++，继续匹配</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主串</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>d</th>
<th>a</th>
<th>a</th>
<th>f</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>i</td>
<td></td>
<td></td>
</tr>
<tr>
<td>模式串</td>
<td>a</td>
<td>a</td>
<td>f</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>j</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, haystack: <span class="built_in">str</span>, needle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">getNext</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">            <span class="comment"># 求取next数组</span></span><br><span class="line">            <span class="built_in">next</span> = [<span class="number">0</span>] * <span class="built_in">len</span>(s)</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">                <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> s[i] != s[j]:</span><br><span class="line">                    j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="built_in">next</span>[i] = j</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 模式串为0时，返回0，满足indexOf()函数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(needle) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="built_in">next</span> = getNext(needle)</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="comment"># 开始匹配</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(haystack) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(needle):</span><br><span class="line">            <span class="keyword">if</span> haystack[i] == needle[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> j:</span><br><span class="line">                j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="built_in">len</span>(needle):</span><br><span class="line">            <span class="keyword">return</span> i - j</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC MySQL笔记</title>
    <url>/2022/04/15/MySQL/</url>
    <content><![CDATA[<h1 id="1-初识MySQL"><a href="#1-初识MySQL" class="headerlink" title="1.初识MySQL"></a>1.初识MySQL</h1><p>JavaEE:企业级Java开发 web</p>
<p>前端（页面：展示数据）</p>
<p>后台（连接点：连接数据库JDBC，链接前端（控制，控制试图跳转，给前端传递数据））</p>
<p>数据库（存数据，Txt，Excel，word）</p>
<span id="more"></span>
<h2 id="1-1为什么学习数据库"><a href="#1-1为什么学习数据库" class="headerlink" title="1.1为什么学习数据库"></a>1.1为什么学习数据库</h2><ol>
<li>岗位需求</li>
<li>大数据时代，得数据者的天下</li>
<li>被迫需求：存数据</li>
<li>==<strong>数据库是所有软件体系中最核心的存在</strong>==</li>
</ol>
<h2 id="1-2什么是数据库"><a href="#1-2什么是数据库" class="headerlink" title="1.2什么是数据库"></a>1.2什么是数据库</h2><p>数据库（DB,DataBase）</p>
<p>概念：数据仓库，软件，安装在操作系统上，SQL,可存储大量的数据。500万！</p>
<p>作用：存储数据，管理数据</p>
<h2 id="1-3-数据库分类"><a href="#1-3-数据库分类" class="headerlink" title="1.3 数据库分类"></a>1.3 数据库分类</h2><p>关系型数据库：</p>
<ul>
<li>MySQL，Oracle，Sql Server，DB2，SQLlite</li>
<li>通过表和表之间，行和列之间的关系进行数据的存储</li>
</ul>
<p>非关系型数据库：（NoQL） Not Only</p>
<ul>
<li>Redis，MongDB</li>
<li>非关系型数据库，对象存储，通过对象的自身属性来决定</li>
</ul>
<p>==DBMS（数据库管理系统）==</p>
<ul>
<li>数据库的管理软件，科学有效的管理数据，维护和获取数据</li>
<li>MySQL，数据库管理系统</li>
</ul>
<h2 id="1-4-MySQL简介"><a href="#1-4-MySQL简介" class="headerlink" title="1.4 MySQL简介"></a>1.4 MySQL简介</h2><p>MySQL是一个==关系型数据库管理系统==</p>
<p>前世：瑞典MySQL AB公司 今生：属于Oracle</p>
<p>MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a> (Relational Database Management System</p>
<p>体积小、速度快、总体拥有成本低 开源</p>
<p>一般中小型网站 集群</p>
<h2 id="1-5安装MySQL"><a href="#1-5安装MySQL" class="headerlink" title="1.5安装MySQL"></a>1.5安装MySQL</h2><ol>
<li><p>解压</p>
</li>
<li><p>配置环境变量</p>
</li>
<li><p>新建ini文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">basedir</span>=D:\mysql\</span><br><span class="line"><span class="attr">datadir</span>=D:\mysql\data\</span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动管理员模式的CMD,并将路径切换到bin目录，输入mysqld -install</p>
</li>
<li><p>再输入  mysqld —initialize-insecure —user=mysql 初始化数据文件</p>
</li>
<li><p>输入net start mysql启动数据库</p>
</li>
<li><p>mysql -u root -p</p>
</li>
<li><p>进入界面后更改root密码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string=<span class="title function_ invoke__">password</span>(<span class="string">&#x27;123456&#x27;</span>) where user=<span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host = <span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 my.ini文件删除最后一句skip-grant-tables</p>
</li>
<li><p>重启mysql即可正常使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net <span class="keyword">start</span> mysql</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="1-6-安装SQLyog"><a href="#1-6-安装SQLyog" class="headerlink" title="1.6 安装SQLyog"></a>1.6 安装SQLyog</h2><h2 id="1-7-连接数据库"><a href="#1-7-连接数据库" class="headerlink" title="1.7 连接数据库"></a>1.7 连接数据库</h2><p>命令行连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="comment">--连接服务器</span></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">--修改密码</span></span><br><span class="line">flush privileges； <span class="comment">--刷新权限</span></span><br><span class="line"><span class="keyword">show</span> databases; <span class="comment">--查询所有数据库</span></span><br><span class="line">use school; <span class="comment">--切换数据库</span></span><br><span class="line"><span class="keyword">show</span> tables； <span class="comment">--查看表</span></span><br><span class="line"><span class="keyword">describe</span> student; <span class="comment">--显示数据库中所有的结构</span></span><br><span class="line">creat databases zz;<span class="comment">--创建数据库</span></span><br><span class="line">exit； <span class="comment">--退出连接</span></span><br></pre></td></tr></table></figure>
<p>数据库xx语言：</p>
<ul>
<li>DDL 定义</li>
<li>DML 操作</li>
<li>DQL 查询</li>
<li>DCL 控制</li>
</ul>
<h1 id="2操作数据库"><a href="#2操作数据库" class="headerlink" title="2操作数据库"></a>2操作数据库</h1><p>操作数据库&gt;操作数据库中的表&gt;操作数据库中表的数据</p>
<p>==MySQL中的关键字不区分大小写==</p>
<h2 id="2-1-操作数据库"><a href="#2-1-操作数据库" class="headerlink" title="2.1 操作数据库"></a>2.1 操作数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> abc; <span class="comment">--创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> abc;<span class="comment">--删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--tab键的上面，如果表名或者字段名是特殊字符，需要带``</span></span><br><span class="line">USE `school`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">--查看数据库</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-数据库的列类型"><a href="#2-2-数据库的列类型" class="headerlink" title="2.2 数据库的列类型"></a>2.2 数据库的列类型</h2><ul>
<li><p>数值</p>
<ul>
<li>tinyint 十分小的数据 1字节</li>
<li>smallint 较小的数据 2字节</li>
<li>mediumint 中等大小 3字节</li>
<li><strong>int 标准整数 4字节</strong></li>
<li>bigint 较大的数据 8字节</li>
<li>float 浮点数 4字节</li>
<li>double 浮点数 8字节（精度问题）</li>
<li>decimal 字符串形式的浮点数  金融计算使用decimal</li>
</ul>
</li>
<li><p>字符串</p>
<ul>
<li>char 字符串 固定大小 0-255</li>
<li><strong>varchar 可变长度字符串 0-65535</strong></li>
<li>tingtext 微型文本 2^8-1</li>
<li><strong>text 文本串 2^16-1 保存文本</strong></li>
</ul>
</li>
<li><p>日期</p>
<ul>
<li>date yyyy-mm-dd 日期格式</li>
<li>time HH:mm:ss 时间格式</li>
<li><strong>datetime yyyy-mm-dd HH:mm:ss最常用的时间格式</strong></li>
<li><strong>timestamp 时间戳</strong></li>
<li>year 年份</li>
</ul>
</li>
<li><p>null</p>
<ul>
<li>没有值，未知</li>
<li>==不要使用NULL进行运算==</li>
</ul>
</li>
</ul>
<h2 id="2-3-数据库的字段属性"><a href="#2-3-数据库的字段属性" class="headerlink" title="2.3 数据库的字段属性"></a>2.3 数据库的字段属性</h2><p>Unsigned:</p>
<ul>
<li>无符号整数</li>
<li>声明了该列不能为负数</li>
</ul>
<p>zerofill</p>
<ul>
<li>0填充</li>
<li>不足的位数，用0填充 int（3） 5-&gt;005</li>
</ul>
<p>自增</p>
<ul>
<li>通常理解为自增，自动在上一条记录的基础上+1</li>
<li>通常用来设计唯一的主键 index，必须是整数</li>
<li>可以自定义设计主键的起始值和步长</li>
</ul>
<p>非空 Null not null</p>
<ul>
<li>假设设置为not null,如果不给他赋值，就会报错</li>
<li>Null，如果不填写值，默认是null</li>
</ul>
<p>默认</p>
<ul>
<li>设置默认值</li>
<li>sex，默认为男，如果不指定，都为男</li>
</ul>
<h2 id="2-4-创建数据库表"><a href="#2-4-创建数据库表" class="headerlink" title="2.4 创建数据库表"></a>2.4 创建数据库表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`( </span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT<span class="string">&#x27;学号&#x27;</span>, </span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span><span class="string">&#x27;匿名&#x27;</span> COMMENT<span class="string">&#x27;姓名&#x27;</span>, </span><br><span class="line">    `password` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT<span class="string">&#x27;密码&#x27;</span>, </span><br><span class="line">    `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span><span class="string">&#x27;女&#x27;</span> COMMENT<span class="string">&#x27;性别&#x27;</span>, </span><br><span class="line">    `birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>, </span><br><span class="line">    `address` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;住址&#x27;</span>, </span><br><span class="line">    `email`<span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;邮箱&#x27;</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) </span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8; </span><br></pre></td></tr></table></figure>
<p>格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名`(</span><br><span class="line">	`字段名` 列类型[属性][索引][注释],</span><br><span class="line">    ……</span><br><span class="line">	`字段名` 列类型[属性][索引][注释]</span><br><span class="line">)[表类型][字符集设置][注释]</span><br></pre></td></tr></table></figure>
<p>常用命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student</span><br><span class="line"><span class="keyword">DESC</span> student</span><br></pre></td></tr></table></figure>
<h2 id="2-5-数据表的类型"><a href="#2-5-数据表的类型" class="headerlink" title="2.5 数据表的类型"></a>2.5 数据表的类型</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--数据库引擎</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">INNODB 默认使用</span></span><br><span class="line"><span class="comment">MYISAM 早些年使用</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody>
<tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间大小</td>
<td>较小</td>
<td>较大，约为2倍</td>
</tr>
</tbody>
</table>
</div>
<p>常规使用操作：</p>
<ul>
<li>MYISAM 节约空间，速度较快</li>
<li>INNODB 安全性高，事务的处理，多表多用户操作</li>
</ul>
<p>在物理空间的位置</p>
<p>所有的数据库文件都存在data目录下</p>
<p>本质还是文件的存储</p>
<p>MySQL引擎在物理文件上的区别</p>
<ul>
<li>INNODB在数据库中只有一个*.frm文件，以及上级目录下的.ibdata1文件</li>
<li>MYISAM对应的文件<ul>
<li>*.frm 表结构的定义文件</li>
<li>*.MYD 数据文件（data）</li>
<li>*.MYI 索引文件（index）</li>
</ul>
</li>
</ul>
<p>设置数据库字符集编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<p>默认编码Latin1不支持中文</p>
<h2 id="2-6-修改删除表"><a href="#2-6-修改删除表" class="headerlink" title="2.6 修改删除表"></a>2.6 修改删除表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名 ALTER TABLE 旧表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher RENAME <span class="keyword">AS</span> teacher1</span><br><span class="line"><span class="comment">-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">11</span>)</span><br><span class="line"><span class="comment">-- 修改表的字段（重命名，修改约束）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 CHANGE age age1 <span class="type">INT</span>(<span class="number">1</span>) <span class="comment">-- 重命名</span></span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">DROP</span> age1</span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> teacher1</span><br></pre></td></tr></table></figure>
<p>==所有的创建和删除尽量加上判断==</p>
<h1 id="3-MySQL数据管理"><a href="#3-MySQL数据管理" class="headerlink" title="3 MySQL数据管理"></a>3 MySQL数据管理</h1><h2 id="3-1外键"><a href="#3-1外键" class="headerlink" title="3.1外键"></a>3.1外键</h2><p>方法一：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `gradeid` <span class="type">INT</span>(<span class="number">10</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;住址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `FK_gradeid`(`gradeid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `gradeid` <span class="type">INT</span>(<span class="number">10</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;住址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8<span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 ADD CONSTRAINT 约束名 FORGEIGN KEY(作为外键的列) REFERENCES 表名(列名)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`);</span><br></pre></td></tr></table></figure>
<p>删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）</p>
<p>以上操作都是物理外键，数据库级别的外键，不建议使用（避免数据库过多造成困扰）</p>
<p>==最佳实践==</p>
<ul>
<li>数据库就是单纯的表，只用来存数据</li>
<li>用程序是实现外键</li>
</ul>
<h2 id="3-2-DML语言"><a href="#3-2-DML语言" class="headerlink" title="3.2 DML语言"></a>3.2 DML语言</h2><p>数据库的意义：数据存储，数据管理</p>
<ul>
<li>insert</li>
<li>update</li>
<li>delete</li>
</ul>
<h2 id="3-3-添加"><a href="#3-3-添加" class="headerlink" title="3.3 添加"></a>3.3 添加</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语句(添加)</span></span><br><span class="line"><span class="comment">-- insert into 表名([字段1][字段2][字段3])value(&#x27;值1&#x27;),(&#x27;值2&#x27;),(&#x27;值3&#x27;),……</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`gradename`) <span class="keyword">VALUE</span>(<span class="string">&#x27;大四&#x27;</span>)</span><br><span class="line"><span class="comment">-- 由于主键自增，可以省略，如果不写字段，会一一匹配</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>`grade`(`gradename`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大一&#x27;</span>),(<span class="string">&#x27;大二&#x27;</span>),(<span class="string">&#x27;大三&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>字段之间用英文逗号分开</li>
<li>字段是可以省略的，但必须一一对应，不能少</li>
<li>可以同时插入多条数据VALUES后面的值需要使用逗号隔开</li>
</ol>
<h2 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET colunm_name = value where [条件]</span></span><br><span class="line"><span class="comment">-- 修改姓名</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zz&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 不指定条件会改动所有表</span></span><br><span class="line"><span class="keyword">UPDATE</span>  `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zz&#x27;</span></span><br><span class="line"><span class="comment">--修改多个属性</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zz&#x27;</span>,`email`<span class="operator">=</span><span class="string">&#x27;123@qq.com&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>条件： where 子句 运算符 id 等于 大于 再某个区间内修改</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
<td>5=6</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&gt;  !=</td>
<td>不等于</td>
<td>5&lt;&gt;6</td>
<td>true</td>
</tr>
<tr>
<td>&gt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;=</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&gt;=</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BETWEEN…AND..</td>
<td>再某个范围内</td>
<td>闭合区间</td>
<td></td>
</tr>
<tr>
<td>AND</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>OR</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多个条件定位数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zz&#x27;</span>,`email`<span class="operator">=</span><span class="string">&#x27;123@qq.com&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> `sex` <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>colnum_是数据库的列，尽量带上``</li>
<li>条件如果没有指定，则会修改所有的列</li>
<li>value是一个具体的值，也可以是一个变量（一般为时间）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zz&#x27;</span>,`email`<span class="operator">=</span><span class="string">&#x27;123@qq.com&#x27;</span> `birthday` <span class="operator">=</span> <span class="built_in">CURRENT_TIME</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> `sex` <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5 删除"></a>3.5 删除</h2><p>delete 命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="comment">-- DELETE FROM 表名 [条件]</span></span><br><span class="line"><span class="comment">-- 删除全部</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>TRUNCATE</p>
<p>作用：完全清空一个数据库表，结构和索引约束不会变</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> `student`</span><br></pre></td></tr></table></figure>
<p>区别：</p>
<ul>
<li>相同点：都能删除数据，不会删除表结构</li>
<li>不同： <ul>
<li>TRUNCATE 会重新设置自增列，计数器会归零</li>
<li>TRUNCATE 不会影响事务</li>
</ul>
</li>
</ul>
<p>DELETE删除，重启数据库</p>
<ul>
<li>INNODB 自增列会从1开始（存在内存当中，断电即失）</li>
<li>MYISAM 继续从上一个子增量开始（存在文件中，不会丢失）</li>
</ul>
<h1 id="4-DQL数据查询"><a href="#4-DQL数据查询" class="headerlink" title="4 DQL数据查询"></a>4 DQL数据查询</h1><h2 id="4-1-DQL"><a href="#4-1-DQL" class="headerlink" title="4.1 DQL"></a>4.1 DQL</h2><p>data query language:数据查询语言</p>
<ul>
<li><p>所有的查询操作都用它 Select</p>
</li>
<li><p>简单的查询，复杂的查询都能做</p>
</li>
<li><p>==数据库中最核心最重要的语句==</p>
</li>
<li><p>使用频率最高的语句</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> <span class="operator">|</span> DISTINCTROW ]</span><br><span class="line">    &#123;<span class="operator">*</span><span class="operator">|</span>table.<span class="operator">*</span><span class="operator">|</span>[table.filed1[<span class="keyword">as</span> alias1][,table.filed2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line">    <span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">    [<span class="keyword">left</span><span class="operator">|</span><span class="keyword">right</span><span class="operator">|</span><span class="keyword">inner</span> <span class="keyword">join</span> table_name2]</span><br><span class="line">    [<span class="keyword">WHERE</span> where_definition]</span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name <span class="operator">|</span> expr <span class="operator">|</span> position&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">    [<span class="keyword">HAVING</span> where_definition]</span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name <span class="operator">|</span> expr <span class="operator">|</span> position&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>] , ...]</span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,] row_count <span class="operator">|</span> row_count <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h2 id="4-2-指定查询字段"><a href="#4-2-指定查询字段" class="headerlink" title="4.2 指定查询字段"></a>4.2 指定查询字段</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法： SELECT 字段··· FROM 表</span></span><br><span class="line"><span class="comment">-- 查询全部的学生 SELECT 字段 FROM 表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span>`studentno`,`studentname`<span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 别名 给结果起个名字 AS 可以给字段起别名，也可以给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span>`studentno`<span class="keyword">AS</span> 学号,`studentname`<span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="comment">-- 函数 Concat(a,b)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>,studentName) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有些时候列名字不是那么的见名知意，需要起别名 AS</p>
<p>去重distinct：去除SELECT查询出来的结果中重复的数据，只显示一条</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询有哪些人参加了考试，成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="comment">-- 查询有那些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno` <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="comment">-- 发现重复数据，去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `studentno` <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数据库的列（表达式）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION() <span class="comment">-- 函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span><span class="number">-1</span>	<span class="comment">-- 表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment <span class="comment">-- 变量</span></span><br><span class="line"><span class="comment">-- 成绩+1</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentresult`<span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> 提分 <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br></pre></td></tr></table></figure>
<p>数据库中的表达式：文本值，列，Null，函数，计算表达式，系统变量</p>
<h2 id="4-3-where条件子句"><a href="#4-3-where条件子句" class="headerlink" title="4.3 where条件子句"></a>4.3 where条件子句</h2><p>作用：检索数据中符合条件的值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>and &amp;&amp;</td>
<td>a and b a&amp;&amp;b</td>
<td>与</td>
</tr>
<tr>
<td>or \</td>
<td>\</td>
<td></td>
<td>a or b a\</td>
<td>\</td>
<td>b</td>
<td>或</td>
</tr>
<tr>
<td>not ！</td>
<td>not a   !a</td>
<td>非</td>
</tr>
</tbody>
</table>
</div>
<p>==尽量使用字母==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="comment">-- 查询成绩在95-100之间</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> `studentresult`<span class="operator">&gt;=</span><span class="number">95</span> <span class="keyword">AND</span> `studentresult`<span class="operator">&lt;=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询 （区间）</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> `studentresult` <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"><span class="comment">-- != not</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> `studentresult` <span class="operator">!=</span> <span class="number">85</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> `studentresult` <span class="operator">=</span> <span class="number">85</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>模糊查询： 比较运算符</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>IF NULL</td>
<td>a is null</td>
<td></td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a is not null</td>
<td></td>
</tr>
<tr>
<td>BETWEEN···AND</td>
<td>a between b and c</td>
<td></td>
</tr>
<tr>
<td><strong>LIKE</strong></td>
<td>a like b</td>
<td></td>
</tr>
<tr>
<td><strong>IN</strong></td>
<td>a in (a1,a2,a3)</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- =============like====================</span></span><br><span class="line"><span class="comment">-- 查询名字姓张的同学</span></span><br><span class="line"><span class="comment">-- like 结合 %(代表0到任意个字符) -(代表一个同学)</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span>`student`</span><br><span class="line"><span class="keyword">WHERE</span> `studentname` <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span></span><br><span class="line"><span class="comment">-- 查询名字姓张的同学，名字后面只有一个字</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span>`student`</span><br><span class="line"><span class="keyword">WHERE</span> `studentname` <span class="keyword">LIKE</span> <span class="string">&#x27;张_&#x27;</span></span><br><span class="line"><span class="comment">-- 查询名字中带伟</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span>`student`</span><br><span class="line"><span class="keyword">WHERE</span> `studentname` <span class="keyword">LIKE</span> <span class="string">&#x27;%伟%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ==========in(具体的一个或多个值)===============</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span>`student`</span><br><span class="line"><span class="keyword">WHERE</span> `studentno` <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ==========null not null==========</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span>`student`</span><br><span class="line"><span class="keyword">WHERE</span> `address` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<h2 id="4-4-连表查询"><a href="#4-4-连表查询" class="headerlink" title="4.4 连表查询"></a>4.4 连表查询</h2><blockquote>
<p>join差异</p>
</blockquote>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1596798579093&amp;di=d1e251caba1a9ebba97ab987e8fffa8c&amp;imgtype=0&amp;src=http%3A%2F%2Fe.hiphotos.baidu.com%2Fbaike%2Fpic%2Fitem%2F7e3e6709c93d70cf77d6f685f2dcd100baa12b0d.jpg" alt="点击查看源网页"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ===============联表查询======================</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.分析需求，分析查询字段来自哪些表</span></span><br><span class="line"><span class="comment">2.确定使用哪种连接查询 7种</span></span><br><span class="line"><span class="comment">确定交叉点：两个表中那个数据是相同的</span></span><br><span class="line"><span class="comment">判断的条件：学生表的 studentno = 成绩表的studentno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- Inner Join</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`studentno`,`studentname`,`subjectno`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Right Join</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`studentno`,`studentname`,`subjectno`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Left Join</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`studentno`,`studentname`,`subjectno`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Inner join</td>
<td>如果表中至少有一个匹配，就返回行</td>
</tr>
<tr>
<td>left join</td>
<td>会从左边的表返回所有的值，即使右表没有匹配</td>
</tr>
<tr>
<td>right join</td>
<td>会从右表返回所有的值，即使左表没有匹配</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询参加了考试的同学的信息，学号，学生姓名，科目名，分数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.分析需求，分析查询字段来自哪些表 student result subject</span></span><br><span class="line"><span class="comment">2.确定使用哪种连接查询 7种</span></span><br><span class="line"><span class="comment">确定交叉点：两个表中那个数据是相同的</span></span><br><span class="line"><span class="comment">判断的条件：学生表的 studentno = 成绩表的studentno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`studentno`,`studentname`,`studentresult`,`subjectname`</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">ON</span> r.`studentno`<span class="operator">=</span>s.`studentno`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno`<span class="operator">=</span> sub.`subjectno`</span><br><span class="line"><span class="comment">-- 要查哪些数据 select</span></span><br><span class="line"><span class="comment">-- 从哪几个表查  from 表 xxjoin 连接的表 on 交叉条件</span></span><br><span class="line"><span class="comment">-- 假设存在多张表查询，慢慢来，先查两张再增加</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>自连接</p>
</blockquote>
<p>自己的表和自己的表连接，核心：一张表拆为两张一样的表</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>categoryid</th>
<th>categoryname</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>新技术</td>
</tr>
<tr>
<td>3</td>
<td>软件开发</td>
</tr>
<tr>
<td>5</td>
<td>美术技术</td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>pid</th>
<th>categoryid</th>
<th>categoryname</th>
</tr>
</thead>
<tbody>
<tr>
<td>3</td>
<td>4</td>
<td>数据库</td>
</tr>
<tr>
<td>2</td>
<td>8</td>
<td>办公信息</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>web开发</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
<td>美术设计</td>
</tr>
</tbody>
</table>
</div>
<p>操作：查询父类对应的子类关系</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
</tr>
</thead>
<tbody>
<tr>
<td>信息技术</td>
<td>办公信息</td>
</tr>
<tr>
<td>软件开发</td>
<td>数据库</td>
</tr>
<tr>
<td>软件开发</td>
<td>web开发</td>
</tr>
<tr>
<td>美术技术</td>
<td>美术设计</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryname` <span class="keyword">AS</span> <span class="string">&#x27;父&#x27;</span>,b.`categoryname` <span class="keyword">AS</span> <span class="string">&#x27;子&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span>`category` a ,`category` b</span><br><span class="line"><span class="keyword">WHERE</span> a.`categoryid` <span class="operator">=</span> b.`pid`</span><br></pre></td></tr></table></figure>
<p>练习</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询学号，姓名，年纪</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname`,`gradename`</span><br><span class="line"><span class="keyword">FROM</span> `student` s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `grade` g</span><br><span class="line"><span class="keyword">ON</span> s.`gradeid` <span class="operator">=</span> g.`gradeid`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询科目所属的年级 科目名称 年纪名称</span></span><br><span class="line"><span class="keyword">SELECT</span> `subjectname`,`gradename`</span><br><span class="line"><span class="keyword">FROM</span> `subject` sub</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `grade` g</span><br><span class="line"><span class="keyword">ON</span> sub.`gradeid`<span class="operator">=</span>g.`gradeid`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加了高等数学-1 考试的同学的信息，学号，学生姓名，科目名，分数</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`studentno`,`studentname`,`subjectname`,`studentresult` </span><br><span class="line"><span class="keyword">FROM</span> `student` s </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` r </span><br><span class="line"><span class="keyword">ON</span> s.`studentno`<span class="operator">=</span>r.`studentno` </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub </span><br><span class="line"><span class="keyword">ON</span> r.`subjectno`<span class="operator">=</span>sub.`subjectno` </span><br><span class="line"><span class="keyword">WHERE</span> `subjectname`<span class="operator">=</span><span class="string">&#x27;高等数学-1&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-5-分页和排序"><a href="#4-5-分页和排序" class="headerlink" title="4.5 分页和排序"></a>4.5 分页和排序</h2><blockquote>
<p>排序 ASC DESC</p>
</blockquote>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">-- 排序 升序 asc 降序 desc</span></span><br><span class="line"> <span class="comment">-- 根据结果成绩降序排序</span></span><br><span class="line"> <span class="keyword">SELECT</span> s.`studentno`,`studentname`,`subjectname`,`studentresult` </span><br><span class="line"> <span class="keyword">FROM</span> `student` s </span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` r </span><br><span class="line"> <span class="keyword">ON</span> s.`studentno`<span class="operator">=</span>r.`studentno` </span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub </span><br><span class="line"> <span class="keyword">ON</span> r.`subjectno`<span class="operator">=</span>sub.`subjectno` </span><br><span class="line"> <span class="keyword">WHERE</span> `subjectname`<span class="operator">=</span><span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> `studentresult` <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>分页</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分页 每页只显示5条数据</span></span><br><span class="line"><span class="comment">-- 语法：limit 起始值,每页大小</span></span><br><span class="line"><span class="comment">-- 网页应用 当前，总的页数，当前大小</span></span><br><span class="line"><span class="comment">-- 第一页 limit 0,5</span></span><br><span class="line"><span class="comment">-- 第二页 limit 5,5</span></span><br><span class="line"><span class="comment">-- 第三页 limit 10,5</span></span><br><span class="line"><span class="comment">-- 第N页 limit （n-1）*pagesize,pagesize</span></span><br><span class="line"><span class="comment">-- 总页数 = 数据总数/数据大小</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`studentno`,`studentname`,`subjectname`,`studentresult` </span><br><span class="line"><span class="keyword">FROM</span> `student` s </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` r </span><br><span class="line"><span class="keyword">ON</span> s.`studentno`<span class="operator">=</span>r.`studentno` </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub </span><br><span class="line"><span class="keyword">ON</span> r.`subjectno`<span class="operator">=</span>sub.`subjectno` </span><br><span class="line"><span class="keyword">WHERE</span> `subjectname`<span class="operator">=</span><span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `studentresult` <span class="keyword">ASC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">5</span> <span class="comment">-- 起始值，页面大小</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 思考</span></span><br><span class="line"><span class="comment">-- 查询JAVA第一学年，课程成绩排名前十，分数大学80的学生信息</span></span><br><span class="line"><span class="comment">-- （学号，姓名，课程名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`studentno`,`studentname`,`subjectname`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> `student` s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno`<span class="operator">=</span>r.`studentno`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> sub.`subjectno`<span class="operator">=</span>r.`subjectno`</span><br><span class="line"><span class="keyword">WHERE</span> `subjectname`<span class="operator">=</span><span class="string">&#x27;JAVA第一学年&#x27;</span> <span class="keyword">AND</span> `studentresult`<span class="operator">&gt;=</span><span class="number">80</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `studentresult` <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h2 id="4-6-子查询"><a href="#4-6-子查询" class="headerlink" title="4.6 子查询"></a>4.6 子查询</h2><p>where（值是计算出来的）</p>
<p>本质：在where语句中嵌套一个子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询数据库结构-1 所有的考试结果 学号 编号 成绩 降序</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`subjectname`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno`<span class="operator">=</span>sub.`subjectno`</span><br><span class="line"><span class="keyword">WHERE</span> `subjectname` <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `studentresult` <span class="keyword">DESC</span></span><br><span class="line"><span class="comment">-- 使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`subjectno`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` </span><br><span class="line"><span class="keyword">WHERE</span> `studentno`<span class="keyword">IN</span>(<span class="keyword">SELECT</span> `subjectno`</span><br><span class="line"><span class="keyword">FROM</span> `subject`</span><br><span class="line"><span class="keyword">WHERE</span> `subjectname` <span class="operator">=</span><span class="string">&#x27;数据库结构-1&#x27;</span>)</span><br><span class="line"><span class="comment">-- 查询数据库结构-1 学生 学号 </span></span><br><span class="line"><span class="keyword">SELECT</span> `subjectno`</span><br><span class="line"><span class="keyword">FROM</span> `subject`</span><br><span class="line"><span class="keyword">WHERE</span> `subjectname` <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分数不小于80分学生的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.`studentno`,`studentname`</span><br><span class="line"><span class="keyword">FROM</span> `student` s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno`<span class="operator">=</span>r.`studentno`</span><br><span class="line"><span class="keyword">WHERE</span> `studentresult` <span class="operator">&gt;=</span> <span class="number">80</span></span><br><span class="line"><span class="comment">-- 在这个基础上增加一个，高等数学-2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.`studentno`,`studentname`</span><br><span class="line"><span class="keyword">FROM</span> `student` s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno`<span class="operator">=</span>r.`studentno`</span><br><span class="line"><span class="keyword">WHERE</span> `studentresult` <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">AND</span> `subjectno` <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `subjectno` <span class="keyword">FROM</span> `subject` </span><br><span class="line"><span class="keyword">WHERE</span> `subjectname` <span class="operator">=</span> <span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询课程为高等数学-2 分数不小于80的同学的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`studentno`,`studentname`</span><br><span class="line"><span class="keyword">FROM</span> `student` s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno`<span class="operator">=</span>r.`studentno`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno`<span class="operator">=</span>sub.`subjectno`</span><br><span class="line"><span class="keyword">WHERE</span>`subjectname`<span class="operator">=</span> <span class="string">&#x27;高等数学-2&#x27;</span> <span class="keyword">AND</span> `studentresult` <span class="operator">&gt;=</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<h2 id="4-7-分组和过滤"><a href="#4-7-分组和过滤" class="headerlink" title="4.7 分组和过滤"></a>4.7 分组和过滤</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分</span></span><br><span class="line"><span class="comment">-- 根据不同课程分组</span></span><br><span class="line"><span class="keyword">SELECT</span> `subjectname`,<span class="built_in">AVG</span>(`studentresult`),<span class="built_in">MAX</span>(`studentresult`),<span class="built_in">MIN</span>(`studentresult`)</span><br><span class="line"><span class="keyword">FROM</span>`<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno`<span class="operator">=</span>sub.`subjectno`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.`subjectno`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(`studentreslt`)<span class="operator">&gt;</span><span class="number">80</span></span><br></pre></td></tr></table></figure>
<h1 id="5-MySQL函数"><a href="#5-MySQL函数" class="headerlink" title="5 MySQL函数"></a>5 MySQL函数</h1><h1 id="5-1-常用函数"><a href="#5-1-常用函数" class="headerlink" title="5.1 常用函数"></a>5.1 常用函数</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数学运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>) <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>) <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>) <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND() <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN()  <span class="comment">-- 返回参数的符号 -1 0 1</span></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;asdasdasd&#x27;</span>) <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="comment">-- 连接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;helloworld&#x27;</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="string">&#x27;213&#x27;</span>) <span class="comment">-- 插入，替换</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;sSADsf&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;ASDsadasdasd&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;e&#x27;</span>) <span class="comment">-- 返回第一次出现字串的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;ll&#x27;</span>,<span class="string">&#x27;mm&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>,<span class="number">4</span>) <span class="comment">-- 返回指定的子字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">-- 反转字符串</span></span><br><span class="line"><span class="comment">-- 时间和日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>()</span><br><span class="line"><span class="keyword">SELECT</span> NOW()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>() </span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> VERSION()</span><br></pre></td></tr></table></figure>
<h2 id="5-2-聚合函数"><a href="#5-2-聚合函数" class="headerlink" title="5.2 聚合函数"></a>5.2 聚合函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>COUNT()</td>
<td></td>
</tr>
<tr>
<td>SUM()</td>
<td></td>
</tr>
<tr>
<td>AVG()</td>
<td></td>
</tr>
<tr>
<td>MAX()</td>
<td></td>
</tr>
<tr>
<td>MIN()</td>
<td></td>
</tr>
<tr>
<td>…</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`studentname`) <span class="keyword">FROM</span> `student`<span class="comment">-- COUNT(指定列) 会忽略null值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `student` <span class="comment">-- 不会忽略null 本质 计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> `student` <span class="comment">-- 不会忽略null本质 计算行数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`studentresult`) <span class="keyword">AS</span> 总和 <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`studentresult`) <span class="keyword">AS</span> 平均 <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`studentresult`) <span class="keyword">AS</span> 最高 <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(`studentresult`) <span class="keyword">AS</span> 最低 <span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br></pre></td></tr></table></figure>
<h2 id="5-3-数据库级别的MD5加密"><a href="#5-3-数据库级别的MD5加密" class="headerlink" title="5.3 数据库级别的MD5加密"></a>5.3 数据库级别的MD5加密</h2><p>什么是MD5？</p>
<p>主要增强算法的复杂度和不可逆性</p>
<p>MD5不可逆</p>
<p>MD5的破解网站的原理，背后有一个字典，MD5加密后的值，加密前的值</p>
<h1 id="6-事务"><a href="#6-事务" class="headerlink" title="6 事务"></a>6 事务</h1><p>6.1 什么是事务</p>
<p>==要么都成功，要么都失败==</p>
<hr>
<p>1 SQL执行，A给B转账200   A:1000   (200)-&gt;   B：200</p>
<p>2 SQL执行，B收到A的钱  A:800  B:400</p>
<hr>
<p>将一组SQL放在一个批次中去执行</p>
<blockquote>
<p>事务原则：ACID  原子性，一致性，隔离性，持久性</p>
</blockquote>
<p><a href="https://blog.csdn.net/dengjili/article/details/82468576">https://blog.csdn.net/dengjili/article/details/82468576</a></p>
<p><strong>原子性（Atomicity）</strong></p>
<p>要么都成功，要么都失败</p>
<p><strong>一致性（Consistency）</strong></p>
<p>事务前后数据的完整性必须保持一致</p>
<p><strong>隔离性（Isolation）</strong></p>
<p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p>
<p><strong>持久性（Durability）</strong></p>
<p>事务一旦提交就不可逆转</p>
<blockquote>
<p> 隔离导致的问题：</p>
</blockquote>
<h3 id="脏读："><a href="#脏读：" class="headerlink" title="脏读："></a>脏读：</h3><p>指一个事务读取了另外一个事务未提交的数据。</p>
<h3 id="不可重复读："><a href="#不可重复读：" class="headerlink" title="不可重复读："></a>不可重复读：</h3><p>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</p>
<h3 id="虚读-幻读"><a href="#虚读-幻读" class="headerlink" title="虚读(幻读)"></a>虚读(幻读)</h3><p>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。<br> （一般是行影响，多了一行）</p>
<blockquote>
<p>执行事务</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql是默认开启事务自动提交的</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span><span class="comment">/*关闭*/</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span><span class="comment">/*开启*/</span></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span><span class="comment">/*关闭自动提交*/</span></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION <span class="comment">-- 标记一个事物的开始，从这个之后的sql都在一个事务内</span></span><br><span class="line"><span class="comment">-- 提交 持久化（成功）</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="comment">-- 回滚 回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span><span class="comment">/*开启*/</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名  <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>模拟场景：转账</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE shop <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci</span><br><span class="line">USE shop</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account`( </span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, </span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`money` <span class="type">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) </span><br><span class="line">)ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8; </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT(`name`,`money`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">2000.00</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">10000</span>)</span><br><span class="line"><span class="comment">-- 模拟转账事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION <span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">UPDATE</span> `account` <span class="keyword">SET</span> `money`<span class="operator">=</span> `money`<span class="number">-500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span><span class="string">&#x27;a&#x27;</span> <span class="comment">-- a-500</span></span><br><span class="line"><span class="keyword">UPDATE</span> `account` <span class="keyword">SET</span> `money`<span class="operator">=</span> `money`<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span><span class="string">&#x27;b&#x27;</span> <span class="comment">-- b+500</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- 恢复默认值</span></span><br></pre></td></tr></table></figure>
<h1 id="7-索引"><a href="#7-索引" class="headerlink" title="7 索引"></a>7 索引</h1><blockquote>
<p>索引（Index）是<strong>帮助MySQL高效获取数据的数据结构</strong>。提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
</blockquote>
<h2 id="7-1-索引的分类"><a href="#7-1-索引的分类" class="headerlink" title="7.1 索引的分类"></a>7.1 索引的分类</h2><blockquote>
<p>在一个表中,主键索引只能有一个,唯一索引可以有多个</p>
</blockquote>
<ul>
<li>主键索引(PRIMARY KEY)<ul>
<li>唯一标识,主键不可重复,而且只有一个列作为主键</li>
</ul>
</li>
<li>唯一索引(UNIQUE KEY)<ul>
<li>不允许具有索引值相同的行</li>
</ul>
</li>
<li>常规索引(KEY/INDEX)<ul>
<li>默认的,可以用index key关键字设置</li>
</ul>
</li>
<li>全文索引(FULLTEXT)<ul>
<li>在特定的数据库引擎下才有</li>
<li>快速定位数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1.在创建表的时候给字段添加索引</span></span><br><span class="line"><span class="comment">-- 2.创建完毕后，增加索引</span></span><br><span class="line"><span class="comment">-- 显示所有的索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 增加一个全文索引（索引名）列名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> FULLTEXT INDEX `studentname` (`studentname`)</span><br><span class="line"><span class="comment">-- explain 分析sql执行的情况</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="comment">-- 非全文索引</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span> (studentname) AGAINST(<span class="string">&#x27;刘&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>7.2 测试索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `app_user` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`gender` TINYINT(<span class="number">4</span>) UNSIGNED <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`age` TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`update_time` <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入100万数据.</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="comment">-- 写函数之前必须要写，标志</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data ()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i<span class="operator">&lt;</span>num DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `app_user`(`name`,`email`,`phone`,`gender`)<span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户&#x27;</span>,i),<span class="string">&#x27;19224305@qq.com&#x27;</span>,<span class="string">&#x27;123456789&#x27;</span>,<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>));</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> mock_data() <span class="comment">-- 执行此函数 生成一百万条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `app_user` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>  <span class="comment">-- 1 sec</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `app_user` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span></span><br><span class="line"><span class="comment">-- id_表名_字段名</span></span><br><span class="line"><span class="comment">-- create index 索引名 on 表（字段）</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_app_user_name <span class="keyword">ON</span> `app_user`(`name`)</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `app_user` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>  <span class="comment">-- 0.001sec</span></span><br></pre></td></tr></table></figure>
<p>索引在数据量小的时候用处不大,但是在数据量大的时候区别十分明显</p>
<h2 id="7-3-索引原则"><a href="#7-3-索引原则" class="headerlink" title="7.3 索引原则"></a>7.3 索引原则</h2><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加在常用来查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash 类型的索引</p>
<p>Btree: INNODB的默认的索引数据类型</p>
<blockquote>
<p> MySQL索引背后的数据结构及算法原理</p>
</blockquote>
<p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
<h1 id="8-权限管理和备份"><a href="#8-权限管理和备份" class="headerlink" title="8.权限管理和备份"></a>8.权限管理和备份</h1><h2 id="8-1-用户管理"><a href="#8-1-用户管理" class="headerlink" title="8.1 用户管理"></a>8.1 用户管理</h2><p><img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808150152040.png" alt="image-20200808150152040"></p>
<blockquote>
<p>SQL命令操作</p>
</blockquote>
<p>用户表:mysql.user</p>
<p>本质:对这张表进行增删改查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户 CREATE USER 用户名 IDENTIFIED BY 密码</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> zz IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="comment">-- 修改密码（当前用户）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment">-- 修改指定用户的密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> zz <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment">-- 重命名</span></span><br><span class="line">RENAME <span class="keyword">USER</span> zz <span class="keyword">TO</span> zzz</span><br><span class="line"><span class="comment">-- 用户授权</span></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES除了给别人授权，其他权限都有</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> zzz</span><br><span class="line"><span class="comment">-- 查看授权</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> zzz</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> root<span class="variable">@localhost</span></span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">ON</span> zzz</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> zzz</span><br></pre></td></tr></table></figure>
<h2 id="8-2-MySQL备份"><a href="#8-2-MySQL备份" class="headerlink" title="8.2 MySQL备份"></a>8.2 MySQL备份</h2><p>为什么要备份:</p>
<ul>
<li>保证重要的数据不丢失</li>
<li>数据转移</li>
</ul>
<p>MySQL数据库备份的方式</p>
<ul>
<li><p>拷贝物理文件</p>
</li>
<li><p>在Sqlyog这种可视化工具中导出</p>
<ul>
<li>在想要导出数据库或表右键导出<img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808151419380.png" alt="image-20200808151419380"></li>
</ul>
</li>
<li><p>使用命令行到处mysqldump命令行导出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysqldump -h 主机 -u用户名 -p密码 数据库 表1 表2 表3... &gt;物理磁盘位置/文件名</span></span><br><span class="line">C:\User\Administrator&gt;mysqldump -hlocalhost -uroot -p123456 school student &gt;D:/a.sql</span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u用户名 -p密码 数据库  &gt;物理磁盘位置/文件名</span></span><br><span class="line">C:\User\Administrator&gt;mysqldump -hlocalhost -uroot -p123456 school &gt;D:/a.sql</span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="comment"># 登录的情况下,切换到指定的数据库</span></span><br><span class="line"><span class="built_in">source</span> d:/a.sql</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="9-规范数据库设计"><a href="#9-规范数据库设计" class="headerlink" title="9 规范数据库设计"></a>9 规范数据库设计</h1><h2 id="9-1-为什么需要设计"><a href="#9-1-为什么需要设计" class="headerlink" title="9.1 为什么需要设计"></a>9.1 为什么需要设计</h2><p>糟糕的数据库设计:</p>
<ul>
<li>数据冗余,浪费空间</li>
<li>数据库插入和删除都会麻烦,异常[屏蔽使用物理外键]</li>
<li>性能差</li>
</ul>
<p>良好的数据库设计:</p>
<ul>
<li>节省内存空间</li>
<li>保证数据库完整性</li>
<li>方便开发系统</li>
</ul>
<p>软件开发中,关于数据库的设计</p>
<ul>
<li>分析需求:分析业务和需要处理的数据库的需求</li>
<li>概要设计:设计关系图E-R图</li>
</ul>
<p>设计数据库的步骤:(个人博客)</p>
<ul>
<li>收集信息,分析需求<ul>
<li>用户表(用户登录注销,用户的个人信息,写博客,创建分类)</li>
<li>分类表(文章分类,谁创建的)</li>
<li>文章表(文章的信息)</li>
<li>评论表</li>
<li>友链表</li>
<li>自定义表(系统信息)</li>
</ul>
</li>
<li>标识实体类(把需求落实到字段)</li>
<li>标识实体之间的关系<ul>
<li>写博客user-&gt;blog</li>
<li>创建分类user-&gt;category</li>
<li>关注user-&gt;user</li>
<li>友链</li>
<li>评论 user-user-blog</li>
</ul>
</li>
</ul>
<h2 id="9-2-三大范式"><a href="#9-2-三大范式" class="headerlink" title="9.2 三大范式"></a>9.2 三大范式</h2><p>为什么需要数据规范化</p>
<ul>
<li>信息重复</li>
<li>更新异常</li>
<li>插入异常<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li>删除异常<ul>
<li>丢失有效的信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>三大范式</p>
</blockquote>
<p><strong>第一范式（1NF）：</strong></p>
<p><strong>原子性</strong></p>
<p>要求数据库表的每一列都是不可分割的原子数据项。</p>
<p><img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808160708396.png" alt="image-20200808160708396"></p>
<p><strong>第二范式（2NF）：</strong></p>
<p><strong>前提:满足第一范式</strong></p>
<p><strong>每张表只描述一件事</strong></p>
<p>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</p>
<p><img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808160652218.png" alt="image-20200808160652218"></p>
<p><strong>第三范式（3NF）：</strong></p>
<p><strong>前提:满足第二范式</strong></p>
<p><strong>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</strong><img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808160637956.png" alt="image-20200808160637956"></p>
<p><strong>规范数据库的设计</strong></p>
<p>规范性和性能的问题</p>
<p>关联查询的表不得超过三张表</p>
<ul>
<li>考虑到商业化的需求和目标(成本,用户体验),数据库的性能更加重要</li>
<li>在规范性能问题的时候适当考虑规范性</li>
<li>故意在某些表添加冗余字段,从多表查询变为单表查询</li>
<li>故意增加一些计算列,从大数据量降低为小数据量的查询</li>
</ul>
<h1 id="10-JDBC"><a href="#10-JDBC" class="headerlink" title="10 JDBC"></a>10 JDBC</h1><h2 id="10-1-数据库驱动"><a href="#10-1-数据库驱动" class="headerlink" title="10.1 数据库驱动"></a>10.1 数据库驱动</h2><p>驱动:声卡,显卡,数据库</p>
<p><img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808161246632.png" alt="image-20200808161246632"></p>
<p>程序会通过数据库驱动与数据库打交道</p>
<h2 id="10-2-JDBC"><a href="#10-2-JDBC" class="headerlink" title="10.2 JDBC"></a>10.2 JDBC</h2><p>SUN公司为了简化开发人员的(对数据库的统一)操作,提供了一个(Java操作数据库的)规范,俗称JDBC,这些规范的实现由具体的厂商去做</p>
<p>对开发人员来说,只需要掌握JDBC的接口即可</p>
<p><img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808161747716.png" alt="image-20200808161747716"></p>
<p>java.sql</p>
<p>javax.sql</p>
<h2 id="10-3-第一个JDBC程序"><a href="#10-3-第一个JDBC程序" class="headerlink" title="10.3 第一个JDBC程序"></a>10.3 第一个JDBC程序</h2><blockquote>
<p>创建测试数据库</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jdbcStudy <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line">USE jdbcStudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users`(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">PASSWORD <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">birthday <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users`(id,NAME,PASSWORD,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;zhansan&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zs@sina.com&#x27;</span>,<span class="string">&#x27;1980-12-04&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;lisi@sina.com&#x27;</span>,<span class="string">&#x27;1981-12-04&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;wangwu@sina.com&#x27;</span>,<span class="string">&#x27;1979-12-04&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>创建一个项目</li>
<li>导入数据库驱动</li>
<li>测试代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.utils.res.XResources_ko;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcFirstDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2 用户信息和url useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">//3 连接成功，获得数据库对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//4 执行SQL的对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//5 执行SQL的对象 去执行SQL，可能存在结果，查看结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM`users`;&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;pwd=&quot;</span>+resultSet.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birth=&quot;</span>+resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6 释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>步骤总结:</p>
<ol>
<li>加载驱动</li>
<li>连接数据库DriverManager</li>
<li>获得执行的sql对象 Statement</li>
<li>获得返回的结果集</li>
<li>释放连接</li>
</ol>
<blockquote>
<p>DriverManager</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver()) ;</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"> 		<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//connection 代表数据库</span></span><br><span class="line"><span class="comment">// 数据库设置自动提交</span></span><br><span class="line"><span class="comment">//事务提交</span></span><br><span class="line"><span class="comment">//事务回滚</span></span><br><span class="line">connertion.rollback();</span><br><span class="line">connertion.commit();</span><br><span class="line">connection.setAutoComitted();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>URL</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line"><span class="comment">//mysql --3306</span></span><br><span class="line"><span class="comment">//协议://主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span></span><br><span class="line"><span class="comment">//oracle  --1521</span></span><br><span class="line"><span class="comment">//jdbc:oracle:thin:@localhost:1521:sid</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Statement 执行SQL的对象  PrepareStatement 执行SQL的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">statement.executeQuery();<span class="comment">//查询操作，返回 ResultSet</span></span><br><span class="line">statement.execute();<span class="comment">//执行任何SQL 效率低</span></span><br><span class="line">statement.executeUpdate();<span class="comment">// 更新、插入、删除，返回一个受影响的行数</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ResultSet 查询的结果集:封装了所有的查询结果</p>
</blockquote>
<p>获得指定的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.getObject();<span class="comment">//不知道列类型</span></span><br><span class="line">resultSet.getString();<span class="comment">//字符串</span></span><br><span class="line">resultSet.getInt();<span class="comment">//Int型</span></span><br><span class="line">resultSet.getFloat();<span class="comment">//Float类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>遍历,指针</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.beforeFirst();<span class="comment">//移动到最前面</span></span><br><span class="line">resultSet.afterLast();<span class="comment">//移动到最后一行</span></span><br><span class="line">resultSet.next();<span class="comment">//移动到下一行</span></span><br><span class="line">resultSet.previous();<span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute(row);<span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
<h2 id="10-4-statement对象"><a href="#10-4-statement对象" class="headerlink" title="10.4 statement对象"></a>10.4 statement对象</h2><p>Jdbc中的statement对象用于向数据库发送SQL语句,像完成对数据库的增删改查,只需要通过这个对象对数据库发送增删改查的语句即可</p>
<p>Statement对象的executeUpdate方法用于向数据库发送增删改的sql语句,executeUpdate执行完后,会返回一个整数(即增删改语句导致了数据库几行数据发生了变化)</p>
<p>Statement.executeQuery方法用于向数据库发送查询语句,executeQuery方法的返回值代表查询结果的ResultSet对象</p>
<blockquote>
<p>CRUD操作-create</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user(...) values(...)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD操作-delete</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from user where id = 1&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD操作-update</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set name = &#x27;&#x27; where name = &#x27;&#x27;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD操作-read</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where id = 1&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (re.next)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码实现</p>
</blockquote>
<ol>
<li><p>提取工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//驱动只用加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection cnn, Statement st, ResultSet rs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnn != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cnn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>编写增删改的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cnn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnn = JdbcUtils.getConnection();</span><br><span class="line">            st = cnn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO `users`(`id`,`NAME`,`PASSWORD`,`email`,`birthday`)\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES(&#x27;4&#x27;,&#x27;z&#x27;,&#x27;123456&#x27;,&#x27;123124@qq.com&#x27;,&#x27;1990-12-11&#x27;)&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(cnn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cnn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnn = JdbcUtils.getConnection();</span><br><span class="line">            st = cnn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM `users` WHERE id = 4&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(cnn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cnn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnn = JdbcUtils.getConnection();</span><br><span class="line">            st = cnn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE `users` SET `NAME`=&#x27;zz&#x27; WHERE `id` = 1&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(cnn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>查询</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cnn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnn = JdbcUtils.getConnection();</span><br><span class="line">            st = cnn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM `users` where `id` = 1&quot;</span>;</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(cnn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>SQL注入的问题</p>
</blockquote>
<p>sql存在漏洞,会被攻击导致数据泄露,==SQL会被拼接or==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.utils.jdbcutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLinject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">             login(<span class="string">&quot;&#x27;&#x27; or 1=1&quot;</span>,<span class="string">&quot;&#x27;&#x27; or 1=1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username,String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        Connection connection=<span class="literal">null</span>;</span><br><span class="line">        Statement statement=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//SELECT * FROM `users` WHERE `NAME`=&#x27;&#x27; or 1=1 AND `PASSWORD`=&#x27;&#x27; or 1=1 ;</span></span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            connection = jdbcutils.getConnection();</span><br><span class="line">            <span class="comment">//获取sql对象</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//sql</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM `users` WHERE `NAME`= &quot;</span>+<span class="string">&quot;&#x27;&quot;</span>+username+<span class="string">&quot;&#x27;&quot;</span>+<span class="string">&quot; AND `PASSWORD`=&quot;</span>+<span class="string">&quot;&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            <span class="comment">//查询获取返回集合</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">query</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            <span class="keyword">while</span> (query.next())&#123;</span><br><span class="line">                System.out.println(query.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">                System.out.println(query.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jdbcutils.release(connection,statement,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-5-PreparedStatement对象"><a href="#10-5-PreparedStatement对象" class="headerlink" title="10.5 PreparedStatement对象"></a>10.5 PreparedStatement对象</h2><p>PreparedStatement可以房主SQL注入,效率更好</p>
<p>增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cnn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用?占位符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO `users`(`id`,`NAME`,`PASSWORD`,`email`,`birthday`) VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            pstm = cnn.prepareStatement(sql);<span class="comment">//预编译SQL，先写SQL，不执行</span></span><br><span class="line">            pstm.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">            pstm.setString(<span class="number">2</span>,<span class="string">&quot;asda&quot;</span>);</span><br><span class="line">            pstm.setString(<span class="number">3</span>,<span class="string">&quot;asda&quot;</span>);</span><br><span class="line">            pstm.setString(<span class="number">4</span>,<span class="string">&quot;asda&quot;</span>);</span><br><span class="line">            <span class="comment">//util.Date 与 sql.Date 不同</span></span><br><span class="line">            pstm.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pstm.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(cnn,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>删</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cnn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用?占位符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from `users` where `id` = ?&quot;</span>;</span><br><span class="line">            pstm = cnn.prepareStatement(sql);<span class="comment">//预编译SQL，先写SQL，不执行</span></span><br><span class="line">            pstm.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pstm.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(cnn,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cnn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用?占位符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update `users` set `name` =? where id = ?&quot;</span>;</span><br><span class="line">            pstm = cnn.prepareStatement(sql);<span class="comment">//预编译SQL，先写SQL，不执行</span></span><br><span class="line">            pstm.setString(<span class="number">1</span>,<span class="string">&quot;zz&quot;</span>);</span><br><span class="line">            pstm.setInt(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//util.Date 与 sql.Date 不同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pstm.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(cnn,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cnn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用?占位符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from `users` where `id` =?&quot;</span>;</span><br><span class="line">            pstm = cnn.prepareStatement(sql);<span class="comment">//预编译SQL，先写SQL，不执行</span></span><br><span class="line">            pstm.setInt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            rs = pstm.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(cnn,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>SQL注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSQLInject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        login(<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>,<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>);</span><br><span class="line">        login(<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username,String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        Connection conn=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement st=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//SELECT * FROM `users` WHERE `NAME`=&#x27;&#x27; or 1=1 AND `PASSWORD`=&#x27;&#x27; or 1=1 ;</span></span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//PrepareStatement 防止SQL注入的本质，把传递进来的参数当作字符</span></span><br><span class="line">            <span class="comment">//其中存在转义字符会被直接转义</span></span><br><span class="line">            <span class="comment">//sql</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM `users` WHERE `NAME`= ? AND `PASSWORD`=?&quot;</span>;</span><br><span class="line">            <span class="comment">//查询获取返回集合</span></span><br><span class="line">            st = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            st.setString(<span class="number">1</span>,username);</span><br><span class="line">            st.setString(<span class="number">2</span>,password);</span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">                System.out.println(rs.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (</span><br><span class="line">                SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="10-7使用IDEA连接数据库"><a href="#10-7使用IDEA连接数据库" class="headerlink" title="10.7使用IDEA连接数据库"></a>10.7使用IDEA连接数据库</h2><p>添加数据库</p>
<p><img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808195903296.png" alt="image-20200808195903296"></p>
<p>选择数据库<img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808202246383.png" alt="image-20200808202246383"></p>
<p>编写SQL语句</p>
<p><img src="/2022/04/15/MySQL/Users\ZZ\AppData\Roaming\Typora\typora-user-images\image-20200808202312433.png" alt="image-20200808202312433"></p>
<h2 id="10-8-事务"><a href="#10-8-事务" class="headerlink" title="10.8 事务"></a>10.8 事务</h2><p>==要么都成功,要么都失败==</p>
<blockquote>
<p>ACID原则</p>
</blockquote>
<p>原子性 一致性 隔离性 持久性</p>
<blockquote>
<p>代码实现</p>
</blockquote>
<ol>
<li>开启事务</li>
<li>一组业务执行完毕,提交事务</li>
<li>可以在catch语句中显示的定义回滚语句,但默认失败就会回滚</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.lesson04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTransaction1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money - 100 where NAME =  &#x27;a&#x27;&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money + 100 where NAME =  &#x27;b&#x27;&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//业务完毕提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="10-9-数据库连接池"><a href="#10-9-数据库连接池" class="headerlink" title="10.9 数据库连接池"></a>10.9 数据库连接池</h2><p>数据库连接-执行完毕-释放</p>
<p>连接-释放 十分浪费系统资源</p>
<p><strong>池化技术:准备一些预先的资源,过来就连接预先准备好的</strong></p>
<p>最小连接数</p>
<p>最大连接数:业务最高承载上限</p>
<p>超过最大连接数,排队等待</p>
<p>等待超时:</p>
<p>编写连接池,实现一个接口 DataSource</p>
<blockquote>
<p>开源数据源实现</p>
</blockquote>
<p>DBCP</p>
<p>C3P0</p>
<p>Druid:阿里巴巴</p>
<p>使用了这些数据库连接池之后，在项目开发中就不需要编写连接数据库的代码了</p>
<blockquote>
<p>DBCP</p>
</blockquote>
<p>需要用到</p>
<p>commons-dbcp-1.4、commons-pool-1.6</p>
<blockquote>
<p>C3P0</p>
</blockquote>
<p>需要用到</p>
<p> c3p0-0.9.5.5.jar 、mchange-commons-java-0.2.19.jar</p>
<blockquote>
<p>结论</p>
</blockquote>
<p>无论使用什么数据源，本质还是一样的，DataSource接口不会变</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码：<a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记</title>
    <url>/2022/04/15/Mybatis/</url>
    <content><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><h2 id="1-1-什么是MyBatis"><a href="#1-1-什么是MyBatis" class="headerlink" title="1.1 什么是MyBatis"></a>1.1 什么是MyBatis</h2><ul>
<li><strong>MyBatis 是一款优秀的持久层框架;</strong></li>
<li>它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong><em>\</em>Github**</strong> .</li>
</ul>
<span id="more"></span>
<p>如何获得MyBatis</p>
<ul>
<li><p>maven仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></li>
</ul>
<h2 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a>1.2 持久化</h2><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库（Jdbc）,io文件持久化。</li>
</ul>
<p><strong>为什么要持久化？</strong></p>
<ul>
<li>有一些对象，不能让他丢掉</li>
<li>内存太贵</li>
</ul>
<h2 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h2><p>Dao层、Service层、Controller层</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h2 id="1-4-为什么需要MyBatis"><a href="#1-4-为什么需要MyBatis" class="headerlink" title="1.4 为什么需要MyBatis"></a>1.4 为什么需要MyBatis</h2><ul>
<li>帮助程序员将数据存入到数据库中</li>
<li>方便</li>
<li>传统的JDBC代码太复杂了，简化，框架，自动化</li>
<li>不用MyBatis也可以，技术没有高低之分</li>
<li>优点：<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql</li>
</ul>
</li>
</ul>
<h1 id="2-第一个MyBatis程序"><a href="#2-第一个MyBatis程序" class="headerlink" title="2 第一个MyBatis程序"></a>2 第一个MyBatis程序</h1><p><strong>思路流程：搭建环境—&gt;导入Mybatis—-&gt;编写代码—-&gt;测试</strong></p>
<h2 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h2><p>搭建数据库（创建数据库最好用SQLyog，后面容易发生字符编码错误）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis`;</span><br><span class="line">USE `mybatis`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`) </span><br><span class="line"></span><br><span class="line">);ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf<span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (`id`,`name`,`pwd`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;zz1&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;zz2&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;zz3&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>新建项目</p>
<ol>
<li>新建maven项目</li>
<li>删除src</li>
<li>导入依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-创建模块"><a href="#2-2-创建模块" class="headerlink" title="2.2 创建模块"></a>2.2 创建模块</h2><ul>
<li>编写MyBatis核心配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编写MyBatis工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取sqlSessionFactory对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-编写代码"><a href="#2-3-编写代码" class="headerlink" title="2.3 编写代码"></a>2.3 编写代码</h2><ul>
<li>实体类</li>
<li>Dao接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>接口实现类 （由原来的UserDaoImpl转变为一个Mapper配置文件）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个指定的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zz.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id 对应方法名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zz.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h2><p>注意点：</p>
<p>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</p>
<p><strong>MapperRegistry是什么?</strong></p>
<p>核心配置文件中注册mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获得SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="comment">//方式一 getMapper</span></span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">    List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3、CURD"><a href="#3、CURD" class="headerlink" title="3、CURD"></a>3、CURD</h1><h2 id="3-1-namespace"><a href="#3-1-namespace" class="headerlink" title="3.1 namespace"></a>3.1 namespace</h2><p>namespace中的包名要和Dao/Mapper接口的包名一致</p>
<h2 id="3-2-select"><a href="#3-2-select" class="headerlink" title="3.2 select"></a>3.2 select</h2><p>选择，查询语句；</p>
<ul>
<li><p>id：就是对应的namespace中的方法名；</p>
</li>
<li><p>resultType : Sql语句执行的返回值；</p>
</li>
<li><p>parameterType : 参数类型；</p>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//插入用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的mapper中的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (id,name,password) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;666&quot;</span>);</span><br><span class="line">    mapper.addUser(user);</span><br><span class="line">    <span class="comment">//增删改一定要提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：增删改查一定要提交事务：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h2 id="3-3-Insert"><a href="#3-3-Insert" class="headerlink" title="3.3 Insert"></a>3.3 Insert</h2><h2 id="3-4-update"><a href="#3-4-update" class="headerlink" title="3.4 update"></a>3.4 update</h2><h2 id="3-5-Delete"><a href="#3-5-Delete" class="headerlink" title="3.5 Delete"></a>3.5 Delete</h2><h2 id="3-6-万能Map"><a href="#3-6-万能Map" class="headerlink" title="3.6 万能Map"></a>3.6 万能Map</h2><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应该考虑使用Map!</p>
<ol>
<li><p>UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用万能Map插入用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>```xml</p>
<!--对象中的属性可以直接取出来 传递map的key-->
<p><insert id="addUser2" parametertype="map"></insert></p>
<pre><code>insert into user (id,name,password) values (#&#123;userid&#125;,#&#123;username&#125;,#&#123;userpassword&#125;)
</code></pre><p>&lt;/insert&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. ```java</span><br><span class="line">       @MyTest</span><br><span class="line">       public void test3()&#123;</span><br><span class="line">           SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">           UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">           HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">           map.put(&quot;userid&quot;,4);</span><br><span class="line">           map.put(&quot;username&quot;,&quot;zzz&quot;);</span><br><span class="line">           map.put(&quot;userpassword&quot;,789);</span><br><span class="line">           mapper.addUser2(map);</span><br><span class="line">           //提交事务</span><br><span class="line">           sqlSession.commit();</span><br><span class="line">           //关闭资源</span><br><span class="line">           sqlSession.close();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>Map传递参数，直接在sql中取出key即可！    【parameter=“map”】</p>
<p>对象传递参数，直接在sql中取出对象的属性即可！    【parameter=“Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到</p>
<p>多个参数用Map , <strong>或者注解！</strong></p>
</blockquote>
<h2 id="3-7-模糊查询"><a href="#3-7-模糊查询" class="headerlink" title="3.7  模糊查询"></a>3.7  模糊查询</h2><ol>
<li>Java代码执行的时候，传递通配符 % %</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li>在sql拼接中使用通配符！</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mybatis.user <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%&quot;#&#123;<span class="keyword">value</span>&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure>
<h1 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4 配置解析"></a>4 配置解析</h1><h2 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1 核心配置文件"></a>4.1 核心配置文件</h2><ul>
<li>mybatis-config.xml</li>
<li>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>
<h2 id="4-2-环境配置（environments）"><a href="#4-2-环境配置（environments）" class="headerlink" title="4.2 环境配置（environments）"></a>4.2 环境配置（environments）</h2><p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p>
<h2 id="4-3-属性（properties）"><a href="#4-3-属性（properties）" class="headerlink" title="4.3 属性（properties）"></a>4.3 属性（properties）</h2><p>我们可以通过properties属性来实现引用配置文件</p>
<p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p>
<p>编写配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">driver=value=&quot;com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8</span><br><span class="line">username=root</span><br><span class="line">password=123456</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在核心配置文件中映入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一个字段，优先使用外部配置文件的！</li>
</ul>
<h2 id="4-4-类型别名（typeAliases）"><a href="#4-4-类型别名（typeAliases）" class="headerlink" title="4.4 类型别名（typeAliases）"></a>4.4 类型别名（typeAliases）</h2><ul>
<li>类型别名是为 Java 类型设置一个短的名字。</li>
<li>存在的意义仅在于用来减少类完全限定名的冗余。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.zz.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在实体类比较少的时候，使用第一种方式。</p>
<p>如果实体类十分多，建议使用第二种。</p>
<p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-5-设置"><a href="#4-5-设置" class="headerlink" title="4.5 设置"></a>4.5 设置</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p>
<p><img src="/2022/04/15/Mybatis/20200706081846851.png" alt="20200706081846851"></p>
<p><img src="/2022/04/15/Mybatis/20200706081846831.png" alt="20200706081846831"></p>
<h2 id="4-6-其他配置"><a href="#4-6-其他配置" class="headerlink" title="4.6 其他配置"></a>4.6 其他配置</h2><ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li>
<li>plugins插件<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h2 id="4-7-映射器（mappers）"><a href="#4-7-映射器（mappers）" class="headerlink" title="4.7 映射器（mappers）"></a>4.7 映射器（mappers）</h2><p>MapperRegistry：注册绑定我们的Mapper文件；</p>
<p>方式一： 【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zz/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方式二：使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>方式三：使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zz.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>练习时间：</p>
<ul>
<li>将数据库配置文件外部引入</li>
<li>实体类别名</li>
<li>保证UserMapper 接口 和 UserMapper .xml 改为一致！并且放在同一个包下！</li>
</ul>
<h2 id="5-8-生命周期和作用域"><a href="#5-8-生命周期和作用域" class="headerlink" title="5.8 生命周期和作用域"></a>5.8 生命周期和作用域</h2><p><img src="https://img-blog.csdnimg.cn/20200706081923437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder：</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory：</strong></p>
<ul>
<li>说白了就是可以想象为 ：数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong></li>
<li>因此 SqlSessionFactory 的最佳作用域是应用作用域。</li>
<li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>连接到连接池的一个请求！</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后需要赶紧关闭，否则资源被占用！</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200706081946508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>这里面的每一个Mapper，就代表一个具体的业务！5、解决属性名和字段名不一致的问题</p>
<h1 id="5-解决属性名和字段名不一致的问题"><a href="#5-解决属性名和字段名不一致的问题" class="headerlink" title="5 解决属性名和字段名不一致的问题"></a>5 解决属性名和字段名不一致的问题</h1><h2 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1  问题"></a>5.1  问题</h2><p>数据库中的字段</p>
<p><img src="https://img-blog.csdnimg.cn/202007060820133.png#pic_center" alt="在这里插入图片描述"></p>
<p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测出现问题</p>
<p><img src="/2022/04/15/Mybatis/image-20200816200149612.png" alt="image-20200816200149612"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    select * from mybatis.user where id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">//类型处理器</span></span><br><span class="line"><span class="comment">//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;</span></span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ul>
<li><p>起别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-2-结果集映射"><a href="#5-2-结果集映射" class="headerlink" title="5.2 结果集映射"></a>5.2 结果集映射</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id   name   pwd</span><br><span class="line">id   name   password</span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
<li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li>
</ul>
<h1 id="6-日志"><a href="#6-日志" class="headerlink" title="6 日志"></a>6 日志</h1><h2 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h2><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p>
<p>曾经：sout 、debug</p>
<p>现在：日志工厂！</p>
<p><img src="https://img-blog.csdnimg.cn/20200706082113240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>SLF4J</li>
<li>LOG4J  【掌握】</li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>STDOUT_LOGGING   【掌握】</li>
<li>NO_LOGGING</li>
</ul>
<p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p>
<p><strong>STDOUT_LOGGING标准日志输出</strong></p>
<p>在mybatis核心配置文件中，配置我们的日志！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020070608213977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="6-2-Log4j"><a href="#6-2-Log4j" class="headerlink" title="6.2 Log4j"></a>6.2 Log4j</h2><p>什么是Log4j？</p>
<ul>
<li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<a href="https://baike.baidu.com/item/配置文件/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p>先导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置log4j为日志的实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Log4j的使用！，直接测试运行刚才的查询<br> <img src="https://img-blog.csdnimg.cn/20200706082208266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</li>
</ol>
<p><strong>简单使用</strong></p>
<ol>
<li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p>
</li>
<li><p>日志对象，参数为当前类的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(UserDaoTest.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="7-分页"><a href="#7-分页" class="headerlink" title="7 分页"></a>7 分页</h1><p>   <strong>思考：为什么要分页？</strong></p>
<ul>
<li><p>减少数据的处理量</p>
<h2 id="7-1-使用Limit分页"><a href="#7-1-使用Limit分页" class="headerlink" title="7.1 使用Limit分页"></a>7.1 使用Limit分页</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit startIndex,pageSize;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3</span>;  #[<span class="number">0</span>,n]</span><br></pre></td></tr></table></figure>
<p>使用Mybatis实现分页，核心SQL</p>
</li>
</ul>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--//分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByLimit</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList =  mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByRowBounds</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByRowBounds</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//RowBounds实现</span></span><br><span class="line"><span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Java代码层面实现分页</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="literal">null</span>,rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><p><img src="https://img-blog.csdnimg.cn/20200706082257138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h1 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8 使用注解开发"></a>8 使用注解开发</h1><h2 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h2><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br> - <strong>根本原因 :  解耦 , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br> - 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br> - 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p>
<p><strong>关于接口的理解</strong></p>
<p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br> - 接口的本身反映了系统设计人员对系统的抽象理解。<br> - 接口应有两类：<br> - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br> - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br> - 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p>
<p><strong>三个面向区别</strong></p>
<p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br> - 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br> - 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p>
<h2 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h2><ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需要再核心配置文件中绑定接口！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<p>本质：反射机制实现</p>
<p>底层：动态代理！<br> <img src="https://img-blog.csdnimg.cn/20200706082347652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>Mybatis详细的执行流程！</strong><br> <img src="https://img-blog.csdnimg.cn/20200706082410595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h2><p>我们可以在工具类创建的时候实现自动提交事务！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写接口，增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法存在多个参数，所有参数前面加@Param</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id,<span class="meta">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Insert(&quot;insert into user(id,name,pwd) value (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
<p>测试类</p>
<p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p>
<p><strong>关于@Param() 注解</strong></p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li>
<li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li>
</ul>
<p><strong>#{}     ${} 区别</strong></p>
<h1 id="9-Lombok"><a href="#9-Lombok" class="headerlink" title="9 Lombok"></a>9 Lombok</h1><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</p>
<ul>
<li>java library</li>
<li>plugs</li>
<li>build tools</li>
<li>with one annotation your class</li>
</ul>
<p>使用步骤：</p>
<ol>
<li>在IDEA中安装Lombok插件！</li>
<li>在项目中导入lombok的jar包</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在实体类上加注解即可！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"> <span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"> <span class="meta">@FieldNameConstants</span></span><br><span class="line"> <span class="meta">@ToString</span></span><br><span class="line"> <span class="meta">@EqualsAndHashCode</span></span><br><span class="line"> <span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"> <span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span></span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"> <span class="meta">@Builder</span></span><br><span class="line"> <span class="meta">@Singular</span></span><br><span class="line"> <span class="meta">@Delegate</span></span><br><span class="line"> <span class="meta">@Value</span></span><br><span class="line"> <span class="meta">@Accessors</span></span><br><span class="line"> <span class="meta">@Wither</span></span><br><span class="line"> <span class="meta">@SneakyThrows</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>：无参构造，get、set、tostring、hashcode，equals</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Getter</span></span><br></pre></td></tr></table></figure>
<h1 id="10-多对一处理"><a href="#10-多对一处理" class="headerlink" title="10 多对一处理"></a>10 多对一处理</h1><p>多对一：</p>
<p><img src="https://img-blog.csdnimg.cn/20200706082446229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzNTE5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>多个学生，对应一个老师</li>
<li>对于学生这边而言，  <strong>关联</strong> …  多个学生，关联一个老师  【多对一】</li>
<li>对于老师而言， <strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li>
</ul>
<p><img src="/2022/04/15/Mybatis/untitled.png" alt="untitled"></p>
<p>SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;秦老师&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fktid` (`tid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="10-1-测试环境搭建"><a href="#10-1-测试环境搭建" class="headerlink" title="10.1 测试环境搭建"></a>10.1 测试环境搭建</h2><ol>
<li>导入lombok</li>
<li>新建实体类 Teacher，Student</li>
<li>建立Mapper接口</li>
<li>建立Mapper.XML文件</li>
<li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li>
<li>测试查询是否能够成功！</li>
</ol>
<h2 id="10-2-按照查询嵌套处理"><a href="#10-2-按照查询嵌套处理" class="headerlink" title="10.2 按照查询嵌套处理"></a>10.2 按照查询嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路:</span></span><br><span class="line"><span class="comment">        1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="10-2-按照结果嵌套处理"><a href="#10-2-按照结果嵌套处理" class="headerlink" title="10.2 按照结果嵌套处理"></a>10.2 按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">       select s.id sid,s.name sname,t.name tname</span><br><span class="line">       from mybatis.student s, mybatis.teacher t</span><br><span class="line">       where  s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>回顾Mysql 多对一查询方式：</p>
<ul>
<li>子查询</li>
<li>联表查询</li>
</ul>
<h1 id="11-一对多处理"><a href="#11-一对多处理" class="headerlink" title="11 一对多处理"></a>11 一对多处理</h1><p>比如：一个老师拥有多个学生！</p>
<p>对于老师而言，就是一对多的关系!</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol>
<li>环境搭建</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class="line">        from mybatis.student s,mybatis.teacher t</span><br><span class="line">        where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection</span></span><br><span class="line"><span class="comment">javaType=&quot;&quot; 指定属性的类型！</span></span><br><span class="line"><span class="comment">集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="按查询嵌套处理"><a href="#按查询嵌套处理" class="headerlink" title="按查询嵌套处理"></a>按查询嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id=#&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid=#&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li>关联 - association   【多对一】</li>
<li>集合 - collection   【一对多】</li>
<li>javaType    &amp;   ofType<ol>
<li>JavaType  用来指定实体类中属性的类型</li>
<li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题！</li>
<li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li>
</ul>
<p><strong>慢SQL       1s        1000s</strong></p>
<p>面试高频</p>
<ul>
<li>Mysql引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化！</li>
</ul>
<h1 id="12-动态-SQL"><a href="#12-动态-SQL" class="headerlink" title="12 动态 SQL"></a>12 动态 SQL</h1><p><strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong></p>
<p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">  `author` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `views` <span class="type">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<p>创建一个基础工程</p>
<ol>
<li>导包</li>
<li>编写配置文件</li>
<li>编写实体类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>编写实体类对应Mapper接口 和 Mapper.XML文件</li>
</ol>
<p>IdUtils（UUID类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(IdUtils.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.blog (id, title, author, create_time, views) VALUES</span><br><span class="line">    (#&#123;id&#125;, #&#123;title&#125;, #&#123;author&#125;, #&#123;createTime&#125;, #&#123;views&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInitBlog</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(BlogMapper.class);</span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Blog</span>();</span><br><span class="line">    blog.setId(IdUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Mybatis&quot;</span>);</span><br><span class="line">    blog.setAuthor(<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">    blog.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    blog.setViews(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IdUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IdUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IdUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;微服务&quot;</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from mybatis.blog where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="trim（where，set）"><a href="#trim（where，set）" class="headerlink" title="trim（where，set）"></a>trim（where，set）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">	and title = #&#123;title&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">	and author = #&#123;author&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title=#&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author=#&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</strong></p>
<h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<p>使用SQL标签抽取公共部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意事项：</p>
<ul>
<li>最好基于单标来定义SQL片段</li>
<li>不要存在where标签</li>
</ul>
<h1 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13 缓存"></a>13 缓存</h1><h2 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h2><blockquote>
<p>查询   ：  连接数据库，耗资源</p>
<p>一次查询的结果，给他暂存一个可以直接取到的地方 —&gt; 内存：缓存</p>
<p>我们再次查询的相同数据的时候，直接走缓存，不走数据库了</p>
</blockquote>
<ol>
<li>什么是缓存[Cache]？<ul>
<li>存在内存中的临时数据</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题</li>
</ul>
</li>
<li>为什么使用缓存？<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率</li>
</ul>
</li>
<li>什么样的数据可以使用缓存？<ul>
<li>经常查询并且不经常改变的数据    【可以使用缓存】</li>
</ul>
</li>
</ol>
<h2 id="13-2-MyBatis缓存"><a href="#13-2-MyBatis缓存" class="headerlink" title="13.2 MyBatis缓存"></a>13.2 MyBatis缓存</h2><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便的定制和配置缓存，缓存可以极大的提高查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存：一级缓存和二级缓存<ul>
<li>默认情况下，只有一级缓存开启（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高可扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来定义二级缓存。</li>
</ul>
</li>
</ul>
<h2 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h2><ul>
<li>一级缓存也叫本地缓存：SqlSession<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>开启日志</li>
<li>测试在一个Session中查询两次记录</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>查看日志输出</li>
</ol>
<p><strong>缓存失效的情况：</strong></p>
<ol>
<li>查询不同的东西</li>
<li>增删改操作，可能会改变原来的数据，所以必定会刷新缓存</li>
<li>查询不同的Mapper.xml</li>
<li>手动清理缓存</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlSession.clearCache();</span><br></pre></td></tr></table></figure>
<p>小结：一级缓存是默认开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段</p>
<h2 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h2><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li>
<li>如果会话关闭了，这个会员对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容</li>
<li>不同的mapper查询出的数据会放在自己对应的缓存（map）中</li>
</ul>
</li>
</ul>
<p>一级缓存开启（SqlSession级别的缓存，也称为本地缓存）</p>
<ul>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高可扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来定义二级缓存。</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Mapper.xml中使用缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">       <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ol>
<li>问题：我们需要将实体类序列化，否则就会报错</li>
</ol>
</li>
</ol>
<p><strong>小结：</strong></p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会放在一级缓存中</li>
<li>只有当前会话提交，或者关闭的时候，才会提交到二级缓存中</li>
</ul>
<h2 id="13-5-缓存原理"><a href="#13-5-缓存原理" class="headerlink" title="13.5 缓存原理"></a>13.5 缓存原理</h2><p><img src="/2022/04/15/Mybatis/untitled-1597755386033.png" alt="untitled"></p>
<p><strong>注意：</strong></p>
<ul>
<li><p>只有查询才有缓存，根据数据是否需要缓存（修改是否频繁选择是否开启）useCache=“true”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="13-6-自定义缓存-ehcache"><a href="#13-6-自定义缓存-ehcache" class="headerlink" title="13.6 自定义缓存-ehcache"></a>13.6 自定义缓存-ehcache</h2><blockquote>
<p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存</p>
</blockquote>
<ol>
<li><p>导包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在mapper中指定使用我们的ehcache缓存实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码: <a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web笔记</title>
    <url>/2022/04/15/JavaWeb/</url>
    <content><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h1><h2 id="1-1-前沿"><a href="#1-1-前沿" class="headerlink" title="1.1 前沿"></a>1.1 前沿</h2><p>web开发：</p>
<ul>
<li>web，网页的意思</li>
<li>静态web<ul>
<li>html，css</li>
<li>提供给所有人看的数据始终不会发生变化</li>
</ul>
</li>
<li>动态web<ul>
<li>淘宝</li>
<li>每个人不同时间不同地点看到的信息各不相同</li>
<li>技术栈：Servlet/ISP ASP PHP</li>
</ul>
</li>
</ul>
<p>在Java中，动态web资源开发的技术统称为JavaWeb</p>
<h2 id="1-2-web应用程序"><a href="#1-2-web应用程序" class="headerlink" title="1.2 web应用程序"></a>1.2 web应用程序</h2><p>web应用程序，可以提供浏览器访问的程序</p>
<ul>
<li>a.html  b.html……多个web资源，这些web可以被外界访问，对外界提供服务</li>
<li>能访问到的任意一个页面或者资源，都存在于某个计算机上</li>
<li>URL</li>
<li>这个统一的web资源会被放在同一个文件夹下，web应用程序-&gt;Tomcat：服务器</li>
<li>一个web应用由多部分组成（静态web，动态web）<ul>
<li>html css js</li>
<li>jsp servlet</li>
<li>Java</li>
<li>jar包</li>
<li>配置文件(Properties)</li>
</ul>
</li>
</ul>
<p>web应用程序编写完毕后，若想提供给外界访问，需要一个服务器统一管理</p>
<h2 id="1-3-静态web"><a href="#1-3-静态web" class="headerlink" title="1.3 静态web"></a>1.3 静态web</h2><ul>
<li><p><em>.htm </em>.html都是网页的后缀，如果服务器上一直存在这些东西，就可以直接进行读取，通信</p>
<p><img src="/2022/04/15/JavaWeb/image-20200810203757040.png" alt="image-20200810203757040"></p>
</li>
<li><p>静态web存在的缺点</p>
<ul>
<li>Web页面无法动态更新，所有用户看到的都是同一个页面<ul>
<li>轮播图 点击特效：伪动态</li>
<li>JavaScript（实际开发最常用）</li>
<li>VBScript</li>
</ul>
</li>
<li>无法与数据库交互（数据无法持久化，用户无法交互）</li>
</ul>
</li>
</ul>
<h2 id="1-4-动态web"><a href="#1-4-动态web" class="headerlink" title="1.4 动态web"></a>1.4 动态web</h2><p>页面会动态显示，Web的页面显示效果因人而异</p>
<p><img src="/2022/04/15/JavaWeb/image-20200810203749730.png" alt="image-20200810203749730"></p>
<p>缺点</p>
<ul>
<li>假如服务器的动态web资源出现了错误，需要重写后台程序，重新发布<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点</p>
<p>静态web存在的缺点</p>
<ul>
<li>Web页面可以动态更新，所有用户看到的不是同一个页面</li>
<li>可以与数据库交互</li>
</ul>
<p><img src="/2022/04/15/JavaWeb/image-20200810203735337.png" alt></p>
<h1 id="2-Web服务器"><a href="#2-Web服务器" class="headerlink" title="2 Web服务器"></a>2 Web服务器</h1><h2 id="2-1-技术讲解"><a href="#2-1-技术讲解" class="headerlink" title="2.1 技术讲解"></a>2.1 技术讲解</h2><p>ASP</p>
<ul>
<li>微软：国内最早流行的就是ASP</li>
<li>在HTML中嵌入了VB的脚本，ASP+COM；</li>
<li>在ASP开发中，基本上每一个页面都有几千行的业务代码，页面及其混乱</li>
<li>维护成本高</li>
</ul>
<p>php</p>
<ul>
<li>PHP开发速度很快，功能强大，跨平台，代码简单</li>
<li>无法承载大访问量的情况（局限性）</li>
</ul>
<p>JSP/Servlet</p>
<ul>
<li>SUN公司主推的B/S架构</li>
<li>基于Java语言</li>
<li>可以承载三高问题带来的影响</li>
<li>语法像ASP</li>
</ul>
<h2 id="2-2-Web服务器"><a href="#2-2-Web服务器" class="headerlink" title="2.2 Web服务器"></a>2.2 Web服务器</h2><p>服务器是一种被动的操作，用来处理用户的一些请求，给用户相应信息</p>
<p>IIS：微软，ASP Windows中自带的</p>
<p>Tomcat：Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>
<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/服务器">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学JavaWeb的人来说，它是最佳选择</p>
<p>Tomcat 实际上运行JSP 页面和Servlet。目前Tomcat最新版本为9.0.37。</p>
<p>下载tomcat：</p>
<ol>
<li>安装/解压</li>
<li>了解配置文件及目录结构</li>
<li>了解作用 </li>
</ol>
<h1 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3 Tomcat"></a>3 Tomcat</h1><h2 id="3-1-安装Tomcat"><a href="#3-1-安装Tomcat" class="headerlink" title="3.1 安装Tomcat"></a>3.1 安装Tomcat</h2><p><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p>
<h2 id="3-2-启动和配置"><a href="#3-2-启动和配置" class="headerlink" title="3.2 启动和配置"></a>3.2 启动和配置</h2><p>文件夹：</p>
<p><img src="/2022/04/15/JavaWeb/image-20200810203727279.png" alt></p>
<p>启动，关闭Tomcat</p>
<p>bin&gt;startup.bat  / shutdown.bat</p>
<p>访问测试： <a href="http://localhost:8080/">http://localhost:8080/</a></p>
<h2 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a>3.3 配置</h2><p><img src="/2022/04/15/JavaWeb/image-20200810203719364.png" alt="image-20200810203719364"></p>
<p>可以配置启动的端口号</p>
<ul>
<li>Tomcat的默认端口号：8080</li>
<li>MySQL：3306</li>
<li>http：80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以配置主机的名称</p>
<ul>
<li>默认的主机名：localhost -&gt;127.0.0.1</li>
<li>默认的网站应用存放的位置：webapps</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>面试题</strong></p>
<p>访问网页流程：</p>
<ol>
<li>输入域名</li>
<li>检查本机的hosts配置文件下有没有这个域名映射<ol>
<li>有，直接放回对应的ip地址，在这个地址中，有需要访问的web程序，可以直接访问</li>
<li>没有：去DNS解析<img src="/2022/04/15/JavaWeb/image-20200810203708259.png" alt="image-20200810203708259"></li>
</ol>
</li>
</ol>
<h2 id="3-4-发布web网站"><a href="#3-4-发布web网站" class="headerlink" title="3.4 发布web网站"></a>3.4 发布web网站</h2><ul>
<li>将自己写的网站放到服务器（Tomcat）中指定的web应用文件夹（webapps）下</li>
</ul>
<p>网站应有的结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-- webapps :Tomcat服务器的web目录</span><br><span class="line">	-ROOT</span><br><span class="line">	-zz:网站的目录名</span><br><span class="line">		- WEB—INF</span><br><span class="line">			-classes:Java程序</span><br><span class="line">			-lib web应用所依赖的jar包</span><br><span class="line">			-web.xml</span><br><span class="line">		-index.html 默认首页</span><br><span class="line">		- <span class="keyword">static</span></span><br><span class="line">			-css</span><br><span class="line">				-style.css</span><br><span class="line">			-js </span><br><span class="line">			-img</span><br><span class="line">		-...</span><br></pre></td></tr></table></figure>
<h1 id="4-Http"><a href="#4-Http" class="headerlink" title="4.Http"></a>4.Http</h1><h2 id="4-1什么是http"><a href="#4-1什么是http" class="headerlink" title="4.1什么是http"></a>4.1什么是http</h2><p>http（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>
<ul>
<li>文本：html，字符串，……</li>
<li>超文本：图片，音乐，视频，地图，定位……</li>
<li>端口 80</li>
</ul>
<p>https：s—-安全的</p>
<ul>
<li>443</li>
</ul>
<h2 id="4-2-两个时代"><a href="#4-2-两个时代" class="headerlink" title="4.2 两个时代"></a>4.2 两个时代</h2><ul>
<li><p>Http1.0</p>
<ul>
<li>HTTP/1.0:客户端可以与web服务器连接后，只能获得一个web资源</li>
</ul>
</li>
<li>Http2.0</li>
<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源</li>
</ul>
<h2 id="4-3-Http请求"><a href="#4-3-Http请求" class="headerlink" title="4.3  Http请求"></a>4.3  Http请求</h2><ul>
<li>客户端—发请求—服务器</li>
</ul>
<p>百度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request URL:https:<span class="comment">//www.baidu.com/   请求地址</span></span><br><span class="line">Request Method:GET    get方法/post方法</span><br><span class="line">Status Code:<span class="number">200</span> OK    状态码：<span class="number">200</span></span><br><span class="line">Remote（远程） Address:<span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>:<span class="number">443</span></span><br><span class="line">    </span><br><span class="line">Accept:text/html  </span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=<span class="number">0.9</span>    语言</span><br><span class="line">Cache-Control:max-age=<span class="number">0</span></span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure>
<ol>
<li>请求行</li>
</ol>
<ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>Get,Post</strong>,HEAD,DELETE,PUT,TRACT.…<ul>
<li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post:请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li>
</ul>
</li>
</ul>
<ol>
<li>消息头</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br></pre></td></tr></table></figure>
<h2 id="4-4-Http响应"><a href="#4-4-Http响应" class="headerlink" title="4.4  Http响应"></a>4.4  Http响应</h2><ul>
<li>服务器—响应—客户端</li>
</ul>
<p>百度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control:<span class="keyword">private</span>    缓存控制</span><br><span class="line">Connection:Keep-Alive    连接</span><br><span class="line">Content-Encoding:gzip    编码</span><br><span class="line">Content-Type:text/html   类型  </span><br></pre></td></tr></table></figure>
<ol>
<li>响应体</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br><span class="line">Refresh:告诉客户端多久刷新一次</span><br><span class="line">Location：让网页重新定位</span><br></pre></td></tr></table></figure>
<ol>
<li>响应状态码</li>
</ol>
<p>200：请求响应成功200</p>
<p>3xx:请求重定向</p>
<ul>
<li>重定向：你重新到我给你新位置去；</li>
</ul>
<p>4xx:找不到资源404</p>
<ul>
<li>资源不存在；</li>
</ul>
<p>5xx:服务器代码错误 500  502:网关错误</p>
<p>常见面试题：</p>
<p>当浏览器中地址栏输入地址并回车到页面展示，经历了什么？</p>
<h1 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5 Maven"></a>5 Maven</h1><p>为什么学习Maven？</p>
<ol>
<li>在JavaWeb开发中，需要使用大量的的jar包，需要手动导入</li>
<li>如何自动导入和配置jar包？Maven</li>
</ol>
<h2 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h2><p>目的：方便导入jar包</p>
<p>Maven核心思想：<strong>约定大于配置</strong></p>
<ul>
<li>有约束，不要去违反</li>
</ul>
<p>Maven会规定要如何去编写Java代码，必需按规范来。</p>
<h2 id="5-2-下载安装Maven"><a href="#5-2-下载安装Maven" class="headerlink" title="5.2 下载安装Maven"></a>5.2 下载安装Maven</h2><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p>
<h2 id="5-3配置环境变量"><a href="#5-3配置环境变量" class="headerlink" title="5.3配置环境变量"></a>5.3配置环境变量</h2><ul>
<li>M2_HOME maven目录下的bin目录</li>
<li>MAVEN_HOME maven的目录</li>
<li>在系统的path中配置%MAVEN_HOME%\bin</li>
</ul>
<h2 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h2><ul>
<li>镜像：mirrors</li>
<li>作用：加速我们的下载</li>
<li>国内建议使用阿里云的镜像</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-5-本地仓库"><a href="#5-5-本地仓库" class="headerlink" title="5.5 本地仓库"></a>5.5 本地仓库</h2><p>在本地的仓库，远程仓库； 建立一个本地仓库：localRepository</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\apache-maven-3.6.1\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-6-在IDEA中使用Maven"><a href="#5-6-在IDEA中使用Maven" class="headerlink" title="5.6 在IDEA中使用Maven"></a>5.6 在IDEA中使用Maven</h2><ol>
<li>启动IDEA</li>
<li>创建Maven项目</li>
</ol>
<p><img src="/2022/04/15/JavaWeb/image-20200810203643281.png" alt="image-20200810203643281"></p>
<p><img src="/2022/04/15/JavaWeb/image-20200810203635647.png" alt="image-20200810203635647"></p>
<p><img src="/2022/04/15/JavaWeb/image-20200810203626547.png" alt="image-20200810203626547"></p>
<ol>
<li>自动导入包</li>
</ol>
<p><img src="/2022/04/15/JavaWeb/image-20200809153649447-1597062868074.png" alt="image-20200809153649447"></p>
<ol>
<li>观察Maven仓库多了什么东西？</li>
<li>IDEA中的Maven设置<img src="/2022/04/15/JavaWeb/image-20200809153652721.png" alt="image-20200809153652721"></li>
</ol>
<p>注意：项目创建完成后，IDEA有时候会选择默认的Maven，要切换成本地的</p>
<ol>
<li>到这里，Maven在IDEA中的配置和使用就OK了。</li>
</ol>
<h2 id="5-7-创建空的Maven项目"><a href="#5-7-创建空的Maven项目" class="headerlink" title="5.7 创建空的Maven项目"></a>5.7 创建空的Maven项目</h2><h2 id="5-8-标记文件夹功能"><a href="#5-8-标记文件夹功能" class="headerlink" title="5.8 标记文件夹功能"></a>5.8 标记文件夹功能</h2><p><img src="/2022/04/15/JavaWeb/image-20200809154810436.png" alt="image-20200809154810436"></p>
<p><img src="/2022/04/15/JavaWeb/image-20200809154954627.png" alt></p>
<h2 id="5-9-在IDEA中配置Tomcat"><a href="#5-9-在IDEA中配置Tomcat" class="headerlink" title="5.9 在IDEA中配置Tomcat"></a>5.9 在IDEA中配置Tomcat</h2><p><img src="/2022/04/15/JavaWeb/image-20200809155432217.png" alt="image-20200809155432217"></p>
<p><img src="/2022/04/15/JavaWeb/image-20200809155504072.png" alt="image-20200809155504072"></p>
<p><img src="/2022/04/15/JavaWeb/image-20200809155955019.png" alt="image-20200809155955019"></p>
<p><img src="/2022/04/15/JavaWeb/image-20200809160017505.png" alt="image-20200809160017505"></p>
<p>点击启动</p>
<p><img src="/2022/04/15/JavaWeb/image-20200809160246508-1597062778904.png" alt="image-20200809160246508"></p>
<h2 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h2><p>pom.xml是Maven的核心配置文件<br><img src="/2022/04/15/JavaWeb/image-20200809160632461.png" alt="image-20200809160632461"></p>
<p>maven由于约定大于配置，之后可能遇到写的配置文件无法被导出或者生效的问题，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6 Servlet"></a>6 Servlet</h1><p>6.1 Servlet简介</p>
<ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>Sun在这些API中提供了一个接口叫Servlet，如果想开发Servlet，只需要<ul>
<li>编写类，实现Servlet接口</li>
<li>把开发好的java类部署到web服务器中</li>
</ul>
</li>
</ul>
<p><strong>把实现了Servlet接口的Java程序叫做Servlet</strong></p>
<h2 id="6-2-HelloServlet"><a href="#6-2-HelloServlet" class="headerlink" title="6.2 HelloServlet"></a>6.2 HelloServlet</h2><p>Servlet接口有两个默认的实现类，HttpServlet，GenericServlet</p>
<ol>
<li><p>创建普通Maven项目，删除src，在里面建立Module</p>
</li>
<li><p>关于Maven父子工程的理解：</p>
<ol>
<li><p>父项目中会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>子项目里会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zz<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>Maven环境优化</p>
<ol>
<li><p>修改web.xml为最新的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<ol>
<li>将Maven的结构搭建完整</li>
</ol>
<ol>
<li><p>编写一个Servlet程序</p>
<ol>
<li>编写一个普通类</li>
<li>实现Servlet接口，继承HttpServlet</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于get和post只是请求实现的不同方式，可以相互调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>编写Servlet映射</p>
<p>为什么需要映射？写的是Java程序，但是要通过浏览器访问，浏览器需要连接web服务器，所以需要在web服务器中注册Servlet，还需给它一个浏览器能够访问的路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zz.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Tomcat</p>
</li>
<li><p>启动测试</p>
</li>
</ol>
<h2 id="6-3-Servlet原理"><a href="#6-3-Servlet原理" class="headerlink" title="6.3 Servlet原理"></a>6.3 Servlet原理</h2><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p>
<p><img src="/2022/04/15/JavaWeb/image-20200809211518115.png" alt="image-20200809211518115"></p>
<h2 id="6-4-Mapping"><a href="#6-4-Mapping" class="headerlink" title="6.4 Mapping"></a>6.4 Mapping</h2><ol>
<li><p>一个Servlet可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>一个Servlet可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个Servlet可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>默认请求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>指定一些后缀或者前缀</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">    注意点，*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">    hello/sajdlkajda.qinjiang</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.qinjiang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优先级问题：</p>
<p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zz.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="6-5-ServletContext"><a href="#6-5-ServletContext" class="headerlink" title="6.5 ServletContext"></a>6.5 ServletContext</h2><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>
<h3 id="1-共享数据"><a href="#1-共享数据" class="headerlink" title="1.共享数据"></a>1.共享数据</h3><p>我再这个Servlet中保存的数据，可以在另一个servlet中拿到</p>
<p>放数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//this.getInitParameter();</span></span><br><span class="line">        <span class="comment">//this.getServletConfig();</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zz&quot;</span>;</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;username&quot;</span>,name);<span class="comment">//将数据保存在context中，名字为username，值为“zz”</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>读数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String)servletContext.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;姓名：&quot;</span>+ username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-获取初始化参数"><a href="#2-获取初始化参数" class="headerlink" title="2.获取初始化参数"></a>2.获取初始化参数</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置web初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo03</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().println(url);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-请求转发"><a href="#3-请求转发" class="headerlink" title="3.请求转发"></a>3.请求转发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo04</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了Demo04&quot;</span>);</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> context.getRequestDispatcher(<span class="string">&quot;/gp&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重定向与转发：</p>
<p><img src="/2022/04/15/JavaWeb/image-20200810163353282.png" alt="image-20200810163353282"></p>
<h3 id="4-读取资源文件"><a href="#4-读取资源文件" class="headerlink" title="4.读取资源文件"></a>4.读取资源文件</h3><p>Properties</p>
<ul>
<li>在java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p>发现都被打包到了同一个路径下：classes，俗称classpath</p>
<p>思路：需要一个文件流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo05</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().println(username);</span><br><span class="line">        resp.getWriter().println(password);</span><br><span class="line">        is.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-6-HttpServletResponse"><a href="#6-6-HttpServletResponse" class="headerlink" title="6.6 HttpServletResponse"></a>6.6 HttpServletResponse</h2><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象和一个代表响应的HttpServletResponse对象</p>
<ul>
<li>如果要获取客户端请求过来的参数 ：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息，找HttpServletResponse</li>
</ul>
<h3 id="1-简单分类"><a href="#1-简单分类" class="headerlink" title="1.简单分类"></a>1.简单分类</h3><p>负责向浏览器发送数据的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servletOutputstream <span class="title function_">getOutputstream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">   Printwriter <span class="title function_">getwriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>
<p>负责向浏览器发送响应头的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String var1)</span>；</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLength</span><span class="params">(<span class="type">int</span> var1)</span>；</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLengthLong</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(String var1)</span>；</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDateHeader</span><span class="params">(String varl,<span class="type">long</span> var2)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addDateHeader</span><span class="params">(String var1,<span class="type">long</span> var2)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String var1,String var2)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addHeader</span><span class="params">(String var1,String var2)</span>；</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setIntHeader</span><span class="params">(String var1,<span class="type">int</span> var2)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addIntHeader</span><span class="params">(String varl,<span class="type">int</span> var2)</span>;</span><br></pre></td></tr></table></figure>
<p>响应的状态码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">SC_OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_FOUND</span> <span class="operator">=</span> <span class="number">404</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_BAD_GATEWAY</span> <span class="operator">=</span> <span class="number">502</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-常见应用"><a href="#2-常见应用" class="headerlink" title="2.常见应用"></a>2.常见应用</h3><ol>
<li><p>向浏览器输出消息</p>
</li>
<li><p>下载文件</p>
<ol>
<li>要获取下载文件的路径</li>
<li>下载的文件名</li>
<li>下载的文件名设置想办法让浏览器支持下载需要的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端</li>
</ol>
</li>
<li><p>验证码</p>
<p>验证码怎么来的？</p>
<ul>
<li>前端实现</li>
<li>后端实现，需要用到java的图片类，生成图片</li>
</ul>
</li>
<li><p><strong>重定向</strong></p>
<p><img src="/2022/04/15/JavaWeb/image-20200810184241730.png" alt="image-20200810184241730"></p>
<p>一个web资源收到客户端请求后，他会通知A客户端去访问另一个web资源C，这个过程叫重定向</p>
<p>常见场景</p>
<ul>
<li>用户登录</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedirectServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/response/image&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重定向和转发的区别？</p>
<p>相同点：</p>
<ul>
<li>页面都会发生变化</li>
</ul>
<p>不同点：</p>
<ul>
<li>请求转发的时候，url不会发生变化</li>
<li>重定向的时候，url地址会发生变化</li>
</ul>
<p>index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%--这里提交的路径需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext. request, contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>RequestTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTest</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//处理请求</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(username+password);</span><br><span class="line">        <span class="comment">//重定向的时候一定要注意路径问题，否则404</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/response/success.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-7-HttpServletRequest"><a href="#6-7-HttpServletRequest" class="headerlink" title="6.7 HttpServletRequest"></a>6.7 HttpServletRequest</h2><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，Http请求中的所有信息会被封装到HttpServletRequest,通过这个HttpServletRequest的方法,获得客户端的所有信息</p>
<p><img src="/2022/04/15/JavaWeb/image-20200810192812503.png" alt="image-20200810192812503"></p>
<p><img src="/2022/04/15/JavaWeb/image-20200810192825638.png" alt="image-20200810192825638"></p>
<h3 id="1-获取前端的参数"><a href="#1-获取前端的参数" class="headerlink" title="1.获取前端的参数"></a>1.获取前端的参数</h3><p><img src="/2022/04/15/JavaWeb/image-20200810193006772.png" alt="image-20200810193006772"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        System.out.println(Arrays.toString(hobbies));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过请求转发</span></span><br><span class="line">        <span class="comment">// 这里的/ 代表当前的web应用</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req, resp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重定向和转发的区别？</p>
<p>相同点：</p>
<ul>
<li>页面都会发生变化</li>
</ul>
<p>不同点：</p>
<ul>
<li>请求转发的时候，url不会发生变化  307</li>
<li>重定向的时候，url地址会发生变化  302</li>
</ul>
<h1 id="7-Cookkie、Session"><a href="#7-Cookkie、Session" class="headerlink" title="7 Cookkie、Session"></a>7 Cookkie、Session</h1><h2 id="7-1-会话"><a href="#7-1-会话" class="headerlink" title="7.1 会话"></a>7.1 会话</h2><p>会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以成为会话</p>
<p>有状态会话：一个同学来过教室，下次再来，就会知道他曾经来过</p>
<p>如何证明是学生？</p>
<p>学生  学校</p>
<ol>
<li>发票 学校给学生发票</li>
<li>学校登记 学校标记学生来过</li>
</ol>
<p>一个网站，如何证明来过？</p>
<p>客户端   服务端</p>
<ol>
<li>服务端给客户端一个信件，客户端下次访问服务端带上信件就可以了；cookie</li>
<li>服务器登记你来过了，下次来服务器来匹配；session</li>
</ol>
<h2 id="7-2保存会话的两种技术"><a href="#7-2保存会话的两种技术" class="headerlink" title="7.2保存会话的两种技术"></a>7.2保存会话的两种技术</h2><p>cookie</p>
<ul>
<li>客户端技术（响应，请求）</li>
</ul>
<p>session</p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户信息。可以把信息或者数据放在Session中</li>
</ul>
<p>常见应用：网站登录之后，下次就不用再登录了</p>
<h2 id="7-3-Cookie"><a href="#7-3-Cookie" class="headerlink" title="7.3 Cookie"></a>7.3 Cookie</h2><ol>
<li>从请求中拿到cookie信息</li>
<li>服务器给客户端响应cookie</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();<span class="comment">//获得cookie</span></span><br><span class="line">cookie.getName();<span class="comment">//获得cookie的key</span></span><br><span class="line">cookie.getValue();<span class="comment">//获得cookie的值</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);<span class="comment">//新建cookie</span></span><br><span class="line">cookie.setMaxAge(-<span class="number">1</span>);<span class="comment">//设置有效期</span></span><br><span class="line">resp.addCookie(cookie);<span class="comment">//添加cookie</span></span><br></pre></td></tr></table></figure>
<p>cookie:一般回保存在本地的用户目录下 appdata；</p>
<p>一个网站的cookie是否存在上限</p>
<ul>
<li>一个cookie只能保存一个信息；key-value</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li>
<li>cookie大小有限制  4kb</li>
<li>浏览器上限 300个cookie</li>
</ul>
<p>删除Cookie:</p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效</li>
<li>设置有效期时间为0</li>
</ul>
<p>编码解码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;name&quot;</span>, URLEncoder.encode(<span class="string">&quot;黑怕&quot;</span>,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">out.write(URLDecoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="7-4-Session（重点）"><a href="#7-4-Session（重点）" class="headerlink" title="7.4 Session（重点）"></a>7.4 Session（重点）</h2><p>什么是Session:</p>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Session对象</li>
<li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个session就存在</li>
<li>用户登录之后，整个网站都可以访问—&gt;保存用户信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//得到session</span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">//给session存东西</span><br><span class="line">//session.setAttribute(&quot;name&quot;,&quot;黑怕&quot;);</span><br><span class="line">session.setAttribute(&quot;name&quot;,new Person(&quot;zz&quot;,1));</span><br><span class="line">//移除session</span><br><span class="line">session.removeAttribute(&quot;name&quot;);</span><br><span class="line">//手动注销</span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure>
<p>Session与Cookie的区别</p>
<ul>
<li>Cookie 把用户的数据写给用户的浏览器，浏览器保存</li>
<li>Session把用户的数据写道用户独占的Session中，服务器端保存（保存重要的信息，减少服务器资源的浪费）</li>
<li>Session对象由服务器创建</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存登录用户的信息</li>
<li>购物车</li>
<li>整个网站中经常使用的数据保存在session中</li>
</ul>
<p>会话自动过期</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置session默认的失效时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--失效时间，分钟为单位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>5<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Cookie：</p>
<p><img src="/2022/04/15/JavaWeb/image-20200811115243045.png" alt="image-20200811115243045"></p>
<p>Session</p>
<p><img src="/2022/04/15/JavaWeb/image-20200811115511768.png" alt="image-20200811115511768"></p>
<p>ServletContext</p>
<p><img src="/2022/04/15/JavaWeb/image-20200811115641403.png" alt="image-20200811115641403"></p>
<h1 id="8-JSP"><a href="#8-JSP" class="headerlink" title="8 JSP"></a>8 JSP</h1><h2 id="8-1-什么是JSP"><a href="#8-1-什么是JSP" class="headerlink" title="8.1 什么是JSP"></a>8.1 什么是JSP</h2><p>Java Server Pages:Java服务器端页面，也和Servlet一样，用于动态Web技术！</p>
<p>最大的特点：</p>
<ul>
<li><p>JSP就像HTML</p>
</li>
<li><p>区别</p>
<ul>
<li>HTML只给用户提供静态的数据</li>
<li>jsp页面中可以嵌入Java代码，为用户提供动态数据</li>
</ul>
</li>
</ul>
<h2 id="8-2-JSP原理"><a href="#8-2-JSP原理" class="headerlink" title="8.2 JSP原理"></a>8.2 JSP原理</h2><p>思路：JSP是怎么执行的？</p>
<ul>
<li><p>代码层面：与HTML相同</p>
</li>
<li><p>服务器内部工作</p>
<ul>
<li><p>tomcat中有一个work目录</p>
<p>IDEA中使用tomcat会在IDEA的tomcat中生成一个work目录</p>
</li>
</ul>
</li>
</ul>
<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet</strong></p>
<p>JSP最终也会被转换成一个Java类</p>
<p><strong>JSP本质实就是一个Servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspInit</span><span class="params">()</span> &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspService</span><span class="params">(.HttpServletRequest request,HttpServletResponse response)</span></span><br></pre></td></tr></table></figure>
<ol>
<li>判断请求</li>
<li>内置了一些对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;    <span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;   <span class="comment">//applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;         <span class="comment">//config</span></span><br><span class="line">javax.servlet.jsp.<span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;           <span class="comment">//out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.<span class="type">Object</span> <span class="variable">page</span> <span class="operator">=</span> <span class="built_in">this</span>;               <span class="comment">//page：当前</span></span><br><span class="line">HttpServletRequest request                        <span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response                      <span class="comment">//响应</span></span><br></pre></td></tr></table></figure>
<ol>
<li>输出页面前增加的代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);       <span class="comment">//设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="built_in">this</span>, request, response,</span><br><span class="line">       <span class="literal">null</span>, <span class="literal">true</span>, <span class="number">8192</span>, <span class="literal">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure>
<ol>
<li>以上的这些个对象我们可以在JSP页面中直接使用！</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200506183804973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在JSP页面中；</p>
<p>只要是 JAVA代码就会原封不动的输出；</p>
<p>如果是HTML代码，就会被转换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>输出到前端</p>
<h2 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h2><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> <span class="title class_">java</span>.util.Date()%&gt;</span><br></pre></td></tr></table></figure>
<p>jsp脚本片段</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">100</span> ; i++) &#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(<span class="string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p>脚本片段的再实现</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">   <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   out.println(x);</span><br><span class="line"> %&gt;</span><br><span class="line"> &lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line"> &lt;%</span><br><span class="line">   <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">   out.println(y);</span><br><span class="line"> %&gt;</span><br><span class="line"></span><br><span class="line"> &lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;%--在代码嵌入HTML元素--%&gt;</span><br><span class="line"> &lt;%</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"> %&gt;</span><br><span class="line"> &lt;h1&gt;Hello,World  &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class="line"> &lt;%</span><br><span class="line">   &#125;</span><br><span class="line"> %&gt;</span><br></pre></td></tr></table></figure>
<p>JSP声明</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Loading Servlet!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">globalVar</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kuang</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;进入了方法Kuang！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p>
<p>在JSP，嵌入Java代码即可！</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%%&gt;<span class="comment">//中间写java代码</span></span><br><span class="line">&lt;%=%&gt;<span class="comment">//输出（变量或表达式）</span></span><br><span class="line">&lt;%!%&gt;<span class="comment">//声明（全局变量）</span></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure>
<p>JSP的注释，不会在客户端显示，HTML的会！</p>
<h2 id="8-4-JSP指令"><a href="#8-4-JSP指令" class="headerlink" title="8.4 JSP指令"></a>8.4 JSP指令</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> args.... %&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="meta">@include</span>会将两个页面合二为一--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/footer.jsp&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="8-5-9大内置对象"><a href="#8-5-9大内置对象" class="headerlink" title="8.5 9大内置对象"></a>8.5 9大内置对象</h2><ul>
<li><p>PageContext    存东西</p>
</li>
<li><p>Request     存东西</p>
</li>
<li><p>Response</p>
</li>
<li><p>Session      存东西</p>
</li>
<li><p>Application   【SerlvetContext】   存东西</p>
</li>
<li><p>config    【SerlvetConfig】</p>
</li>
<li><p>out</p>
</li>
<li><p>page ，不用了解</p>
</li>
<li><p>exception</p>
</li>
<li><p>```java<br>pageContext.setAttribute(“name1”,”zz1”);//保存的数据只在一个页面中有效<br>request.setAttribute(“name2”,”zz2”); //保存的数据只在一次请求中有效，请求转发会携带这个数据<br>session.setAttribute(“name3”,”zz3”); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器<br>application.setAttribute(“name4”,”zz4”);  //保存的数据只在服务器中有效，从打开服务器到关闭服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</span><br><span class="line"></span><br><span class="line">  session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</span><br><span class="line"></span><br><span class="line">  application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</span><br><span class="line"></span><br><span class="line">## 8.6、JSP标签、JSTL标签、EL表达式</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>EL表达式：  ${ }</p>
<ul>
<li><strong>获取数据</strong></li>
<li><strong>执行运算</strong></li>
<li><strong>获取web开发的常用对象</strong></li>
</ul>
<p>JSP标签</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp.include--%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;jsptag2.jsp&quot;</span>&gt;</span><br><span class="line">&lt;jsp:param name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;zz&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:param name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>
<p><strong>JSTL表达式</strong></p>
<p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>
<p><strong>格式化标签</strong></p>
<p><strong>SQL标签</strong></p>
<p><strong>XML 标签</strong></p>
<p><strong>核心标签</strong> （掌握部分）</p>
<p><img src="/2022/04/15/JavaWeb/image-20200814104957658.png" alt="image-20200814104957658"></p>
<p><strong>JSTL标签库使用步骤</strong></p>
<ul>
<li>引入对应的 taglib</li>
<li>使用其中的方法</li>
<li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li>
</ul>
<p><strong>c：if</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>if测试<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;coreif.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;管理员欢迎您！&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>c:choose   c:when</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">&quot;score&quot;</span> <span class="attr">value</span>=<span class="string">&quot;85&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;score&gt;90&#125;&quot;</span>&gt;</span></span><br><span class="line">        90</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;score&gt;80&#125;&quot;</span>&gt;</span></span><br><span class="line">        80</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;score&gt;70&#125;&quot;</span>&gt;</span></span><br><span class="line">        70</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>c:forEach</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    ArrayList<span class="tag">&lt;<span class="name">String</span>&gt;</span> people = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    people.add(0,&quot;张三&quot;);</span><br><span class="line">    people.add(1,&quot;李四&quot;);</span><br><span class="line">    people.add(2,&quot;王五&quot;);</span><br><span class="line">    people.add(3,&quot;赵六&quot;);</span><br><span class="line">    people.add(4,&quot;田六&quot;);</span><br><span class="line">    request.setAttribute(&quot;list&quot;,people);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">var , 每一次遍历出来的变量</span><br><span class="line">items, 要遍历的对象</span><br><span class="line">begin,   哪里开始</span><br><span class="line">end,     到哪里</span><br><span class="line">step,   步长</span><br><span class="line">--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">&quot;people&quot;</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">&quot;people&quot;</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="attr">begin</span>=<span class="string">&quot;1&quot;</span> <span class="attr">end</span>=<span class="string">&quot;3&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="9-JavaBean"><a href="#9-JavaBean" class="headerlink" title="9 JavaBean"></a>9 JavaBean</h1><p>实体类</p>
<p>JavaBean有特定的写法：</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get/set方法；</li>
</ul>
<p>一般用来和数据库的字段做映射  ORM；</p>
<p>ORM ：对象关系映射</p>
<ul>
<li>表—&gt;类</li>
<li>字段–&gt;属性</li>
<li>行记录——&gt;对象</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>address</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>zz1</td>
<td>3</td>
<td>西安</td>
</tr>
<tr>
<td>2</td>
<td>zz2</td>
<td>18</td>
<td>西安</td>
</tr>
<tr>
<td>3</td>
<td>zz3</td>
<td>100</td>
<td>西安</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">1</span>,<span class="string">&quot;zz1&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">2</span>,<span class="string">&quot;zz2&quot;</span>,<span class="number">18</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">3</span>,<span class="string">&quot;zz3&quot;</span>,<span class="number">100</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h1><ul>
<li>什么是MVC：  Model     view     Controller  模型、视图、控制器</li>
</ul>
<h2 id="10-1-以前的架构"><a href="#10-1-以前的架构" class="headerlink" title="10.1 以前的架构"></a>10.1 以前的架构</h2><p><img src="/2022/04/15/JavaWeb/untitled.png" alt="untitled"></p>
<p>用户直接访问控制层，控制层就可以直接操作数据库；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servlet--CRUD--&gt;数据库</span><br><span class="line">弊端：程序十分臃肿，不利于维护  </span><br><span class="line">servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line"></span><br><span class="line">架构：没有什么是加一层解决不了的！</span><br><span class="line">程序猿调用</span><br><span class="line">↑</span><br><span class="line">JDBC （实现该接口）</span><br><span class="line">↑</span><br><span class="line">Mysql Oracle SqlServer ....（不同厂商）</span><br></pre></td></tr></table></figure>
<h2 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h2><p><img src="/2022/04/15/JavaWeb/untitled-1597383124045.png" alt="untitled"></p>
<p>Model</p>
<ul>
<li>业务处理 ：业务逻辑（Service）</li>
<li>数据持久层：CRUD   （Dao - 数据持久化对象）</li>
</ul>
<p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起Servlet请求 （a，form，img…）</li>
</ul>
<p>Controller  （Servlet）</p>
<ul>
<li>收用户的请求 ：（req：请求参数、Session信息….）</li>
<li>交给业务层处理对应的代码</li>
<li>控制视图的跳转</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure>
<h1 id="11-Filter-（重点）"><a href="#11-Filter-（重点）" class="headerlink" title="11 Filter （重点）"></a>11 Filter （重点）</h1><p>比如 Shiro安全框架技术就是用Filter来实现的</p>
<p>Filter：过滤器 ，用来过滤网站的数据；</p>
<ul>
<li>处理中文乱码</li>
<li>登录验证….</li>
</ul>
<p><img src="/2022/04/15/JavaWeb/untitled-1597383728323.png" alt="untitled"></p>
<p>Filter开发步骤：</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写过滤器</p>
<ol>
<li><p>导包不要错 <strong>（注意）</strong></p>
<p><img src="/2022/04/15/JavaWeb/image-20200814135814761.png" alt="image-20200814135814761"></p>
</li>
<li><p>实现接口，重写对应方法</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharatorEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// chain 链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1 过滤器中所有的代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    * 2 必须要让过滤器继续通行</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTG-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;执行前&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);<span class="comment">//让请求继续，如果不写就停止了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在xml配置Filter</li>
</ol>
</li>
</ol>
<h1 id="12-监听器"><a href="#12-监听器" class="headerlink" title="12 监听器"></a>12 监听器</h1><p>实现一个监听器的接口；（有n种监听器）</p>
<ol>
<li><p>编写一个监听器</p>
<p>实现监听器的接口…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line"><span class="comment">//创建session监听 看你的一举一动</span></span><br><span class="line"><span class="comment">//一旦创建session就会触发一次这个事件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> se.getSession().getServletContext();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) context.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> se.getSession().getServletContext();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) context.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Session销毁：</span></span><br><span class="line"><span class="comment">    1. 手动销毁  getSession().invalidate();</span></span><br><span class="line"><span class="comment">    2. 自动销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li><p>xml注册监听器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.zz.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>看情况是否使用</p>
</li>
</ol>
</li>
</ol>
<h1 id="13-过滤器、监听器常见应用"><a href="#13-过滤器、监听器常见应用" class="headerlink" title="13 过滤器、监听器常见应用"></a>13 过滤器、监听器常见应用</h1><p><strong>监听器：GUI编程中经常使用；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;中秋节快乐&quot;</span>);  <span class="comment">//新建一个窗体</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="literal">null</span>); <span class="comment">//面板</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>); <span class="comment">//设置窗体的布局</span></span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听事件，监听关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.windowClosing(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>
<ol>
<li>用户登录之后，向Sesison中放入用户的数据</li>
<li>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;USER_SESSION&quot;</span>) == <span class="literal">null</span>)&#123;</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/failed.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filterChain.doFilter(servletRequest, servletResponse);</span><br></pre></td></tr></table></figure>
<h1 id="14-JDBC"><a href="#14-JDBC" class="headerlink" title="14 JDBC"></a>14 JDBC</h1><p>什么是JDBC ： Java连接数据库！</p>
<p><img src="/2022/04/15/JavaWeb/untitled-1597393274933.png" alt="untitled"></p>
<p>需要jar包的支持：</p>
<ul>
<li>java.sql</li>
<li>javax.sql</li>
<li>mysql-conneter-java…  连接驱动（必须要导入）</li>
</ul>
<p><strong>实验环境搭建</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    `password` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zs@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ls@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ww@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>导入数据库依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>JDBC 固定步骤：</strong></p>
<ol>
<li>加载驱动</li>
<li>连接数据库,代表数据库</li>
<li>向数据库发送SQL的对象Statement : CRUD</li>
<li>编写SQL （根据业务，不同的SQL）</li>
<li>执行SQL</li>
<li>关闭连接（先开的后关）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJdbc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.编写SQL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行查询SQL，返回一个 ResultSet  ： 结果集</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;password=&quot;</span>+rs.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        rs.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>事务</strong></p>
<p>要么都成功，要么都失败！</p>
<p>ACID原则：保证数据的安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交  commit()</span><br><span class="line">事务回滚  rollback()</span><br><span class="line">关闭事务</span><br><span class="line"></span><br><span class="line">转账：</span><br><span class="line">A:<span class="number">1000</span></span><br><span class="line">B:<span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">A(<span class="number">900</span>)   --<span class="number">100</span>--&gt;   B(<span class="number">1100</span>) </span><br></pre></td></tr></table></figure>
<p><strong>Junit单元测试</strong></p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>简单使用</p>
<p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搭建环境</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   money <span class="type">FLOAT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;B&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;C&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码：<a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Tomcat</tag>
        <tag>Maven</tag>
        <tag>Servlet</tag>
        <tag>JSP</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE</title>
    <url>/2022/04/15/JavaSE/</url>
    <content><![CDATA[<h1 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1 Java基础"></a>1 Java基础</h1><h2 id="1-1-注释"><a href="#1-1-注释" class="headerlink" title="1.1 注释"></a>1.1 注释</h2><ul>
<li><p>单行注释</p>
<p>//注释</p>
</li>
<li><p>多行注释</p>
<p>/*</p>
<p>多行注释</p>
<p>*/</p>
</li>
<li><p>文档注释</p>
<p>/** </p>
<p>*@Author</p>
<p>*@Description</p>
<p>*/</p>
</li>
</ul>
<h2 id="1-2-标识符、关键字"><a href="#1-2-标识符、关键字" class="headerlink" title="1.2 标识符、关键字"></a>1.2 标识符、关键字</h2><p>标识符应该以字母 美元符(￥)或者下划线(_)开始</p>
<p>首字母以后可以是字母 美元符(￥)或者下划线(_)的任意组合</p>
<p>不能使用关键字作为标识符</p>
<p>标识符大小写敏感</p>
<p>标识符不建议使用中文或者拼音</p>
<h2 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h2><ul>
<li>基本数据类型<ul>
<li>数值类型<ul>
<li>整数类型<ul>
<li>byte 占1个字节 -128-127</li>
<li>short 2个字节 -32768-32767</li>
<li>int 4个字节 -2147483648-2147463647</li>
<li>long 8个字节</li>
</ul>
</li>
<li>浮点类型<ul>
<li>float 4个字节</li>
<li>double 8个字节</li>
</ul>
</li>
<li>字符类型<ul>
<li>char 2个字节</li>
</ul>
</li>
</ul>
</li>
<li>boolean 占1个字节  只有true和false</li>
</ul>
</li>
<li>引用数据类型<ul>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ul>
</li>
</ul>
<h2 id="1-4-数据类型扩展"><a href="#1-4-数据类型扩展" class="headerlink" title="1.4 数据类型扩展"></a>1.4 数据类型扩展</h2><ul>
<li><p>二进制 0b </p>
</li>
<li><p>十进制</p>
</li>
<li><p>八进制 0 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">010</span>;<span class="comment">//八进制</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>十六进制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0x10</span>;<span class="comment">//十六进制</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>float 带有舍入误差 大约表示 接近但不等于</p>
<p>最好完全避免使用浮点数进行比较 </p>
<p>BigDecimal 类</p>
<p>转义字符 \n \t </p>
<h2 id="1-5-类型转换"><a href="#1-5-类型转换" class="headerlink" title="1.5 类型转换"></a>1.5 类型转换</h2><p>运算中，不同类型的数据先转换为同一类型，然后进行运算</p>
<p>低——————————————————————————-&gt;高</p>
<p>byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</p>
<p>强制转换  （类型）变量名  高-&gt;低</p>
<p>自动转换  低-&gt;高</p>
<ul>
<li>不能对布尔值进行转换</li>
<li>不能把对象类型转换为不相干的类型</li>
<li>在把高容量转换到低容量的时候，强制转换</li>
<li>转换的时候可能存在精度问题或者内存溢出问题</li>
</ul>
<p>操作比较大的时候，注意溢出问题</p>
<p>JDK7 新特性，数字可以用下划线分割</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">1_000_000_000</span>;</span><br></pre></td></tr></table></figure>
<h2 id="1-6-变量、常量、作用域、作用域"><a href="#1-6-变量、常量、作用域、作用域" class="headerlink" title="1.6 变量、常量、作用域、作用域"></a>1.6 变量、常量、作用域、作用域</h2><p>Java是强类型语言，每个变量都必须声明其类型</p>
<p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type varName [=value] [&#123;,varName[=value]&#125;];</span><br></pre></td></tr></table></figure>
<ul>
<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li>
<li>变量名必须是合法的标识符</li>
<li>类型声明是一条完整的语句，因此每个声明都必须以分号结束</li>
</ul>
<p>变量作用域</p>
<ul>
<li>类变量 static</li>
<li>实例变量 从属于对象，不用初始化 初始值为默认值</li>
<li>局部变量 写在方法里面 必须声明和初始化值</li>
</ul>
<p>常量（Constant）</p>
<ul>
<li>初始化之后不能再改变的值 final</li>
<li>一般使用大写字符</li>
</ul>
<p>命名规范</p>
<ul>
<li>见名知意</li>
<li>包：全小写</li>
<li>类：大写开头，每个单词首字母大写（驼峰）GodMan</li>
<li>方法：第一个单词首字母小写，后面的单词大写开头 runRun()</li>
<li>变量：首字母小写，后面的单词大写开头 lastNAme</li>
<li>常量：全大写和下划线MAX_VALUE</li>
</ul>
<h2 id="1-7-运算符"><a href="#1-7-运算符" class="headerlink" title="1.7 运算符"></a>1.7 运算符</h2><ul>
<li>算数运算符：+ - * / % ++ —</li>
<li>赋值运算符 =</li>
<li>关系运算符 &lt; &lt;= &gt; &gt;= !=  ==  instanceof</li>
<li>逻辑运算符 &amp;&amp; || ！</li>
<li>位运算符 &amp; |  ^ ~ &gt;&gt; &lt;&lt; &gt;&gt;&gt;</li>
<li>条件运算符 ？：</li>
<li>扩展赋值运算符 += -= *= /=</li>
</ul>
<h1 id="2-控制流程"><a href="#2-控制流程" class="headerlink" title="2 控制流程"></a>2 控制流程</h1><h2 id="2-1-Scanner与用户交互"><a href="#2-1-Scanner与用户交互" class="headerlink" title="2.1 Scanner与用户交互"></a>2.1 Scanner与用户交互</h2><p>Scanner对象：</p>
<ul>
<li>next（）<ul>
<li>一定要读取到有效字符后才可以结束输入</li>
<li>对输入有效字符之前遇到的空白会自动去掉</li>
<li>只有输入有效字符后才将其后面输入的空白作为分隔符或结束符</li>
<li><strong>next（）不能得到带有空格的字符串</strong></li>
</ul>
</li>
<li>nextLine（）<ul>
<li>以Enter作为结束符，也就是说nextLine()方法返回的是输入回车前的所有字符</li>
<li>可以得到空白</li>
</ul>
</li>
</ul>
<h2 id="2-2-顺序结构"><a href="#2-2-顺序结构" class="headerlink" title="2.2 顺序结构"></a>2.2 顺序结构</h2><h2 id="2-3-选择结构"><a href="#2-3-选择结构" class="headerlink" title="2.3 选择结构"></a>2.3 选择结构</h2><p>单选择：if（）{}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>双选择：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多选择：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>嵌套的if</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">	<span class="keyword">if</span>()&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>()&#123;</span><br><span class="line"><span class="keyword">case</span> value:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> value:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">..........</span><br><span class="line"><span class="keyword">case</span> value:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch语句中的变量类型可以是</p>
<ul>
<li>byte short int char</li>
<li>从JDK7 开始 开始支持String ，同时case标签必须是字符串常量或字面量</li>
</ul>
<h2 id="2-4-循环结构"><a href="#2-4-循环结构" class="headerlink" title="2.4 循环结构"></a>2.4 循环结构</h2><ul>
<li><p>while</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line"><span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>do…while</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="comment">//循环内容</span></span><br><span class="line">&#125;<span class="keyword">while</span>();</span><br></pre></td></tr></table></figure>
<p>对于while语句而言，如果不满足条件，则不进入循环</p>
<p>do…while循环和while循环相似，不同的是do…while至少会执行一次</p>
<p>while先判断再执行，do…while先执行再判断</p>
</li>
<li><p>for</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新)&#123;</span><br><span class="line">	<span class="comment">//代码语句	</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IDEA快捷键  100.for   等于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>JDK5中加入了用于数组的增强型for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:numbers)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-5-break-continue-goto"><a href="#2-5-break-continue-goto" class="headerlink" title="2.5 break continue goto"></a>2.5 break continue goto</h2><ul>
<li>break再任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。（在switch也可用）</li>
<li>continue 语句用在循环语句体中，用于中止某次循环过程，即跳过循环体中未执行的语句，接着进行下一次是否循环的判定</li>
<li>goto未正式使用</li>
</ul>
<h1 id="3-方法"><a href="#3-方法" class="headerlink" title="3 方法"></a>3 方法</h1><h2 id="3-1-什么是方法"><a href="#3-1-什么是方法" class="headerlink" title="3.1 什么是方法"></a>3.1 什么是方法</h2><p>方法是语句的集合，在一起执行一个功能</p>
<ul>
<li>方法是解决一类问题的步骤的有序组合</li>
<li>方法包含于类或对象中</li>
<li>方法在程序中被创建，在其他地方引用</li>
</ul>
<h2 id="3-2-方法的定义和调用"><a href="#3-2-方法的定义和调用" class="headerlink" title="3.2 方法的定义和调用"></a>3.2 方法的定义和调用</h2><ul>
<li>修饰符：可选 告诉编译器如何调用该方法，定义了该方法的访问类型</li>
<li>返回值类型</li>
<li>方法名 开头小写，后面驼峰</li>
<li>参数类型 <ul>
<li>形式参数：在方法被调用时用于接收外界输入的数据</li>
<li>实参：调用方法时实际传给方法的数据</li>
</ul>
</li>
<li>方法体： 包含具体的语句，定义该方法的功能</li>
</ul>
<p>调用方法：对象名.方法名（实参列表）</p>
<p>当方法返回一个值的时候，方法调用通常被当作一个值。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">larger</span> <span class="operator">=</span> max(<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure>
<p>如果方法返回值时void，方法调用一定是一条语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="3-3-方法的重载"><a href="#3-3-方法的重载" class="headerlink" title="3.3 方法的重载"></a>3.3 方法的重载</h2><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数</p>
<p>重载的规则：</p>
<ul>
<li>方法名称必须相同</li>
<li><strong>参数列表必须不同</strong>（个数不同、类型不同、参数排列顺序不同）</li>
<li>返回类型可以相同也可以不同</li>
<li>仅仅返回类型不同不足以成为方法的重载</li>
</ul>
<h2 id="3-4-可变参数"><a href="#3-4-可变参数" class="headerlink" title="3.4 可变参数"></a>3.4 可变参数</h2><p>JDK1.5开始，Java支持传递同类型的参编参数给一个方法</p>
<p>在方法声明中，在指定参数类型后加一个省略号（…）</p>
<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMax</span><span class="params">(doube… numbers)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-递归"><a href="#3-5-递归" class="headerlink" title="3.5  递归"></a>3.5  递归</h2><p>递归包含两个部分：</p>
<ul>
<li>递归头：什么时候不调用。如果没有头，将陷入死循环</li>
<li>递归体：什么时候需要调用自身方法</li>
</ul>
<h1 id="4-数组"><a href="#4-数组" class="headerlink" title="4 数组"></a>4 数组</h1><h2 id="4-1-数组概述"><a href="#4-1-数组概述" class="headerlink" title="4.1 数组概述"></a>4.1 数组概述</h2><p>数组时相同类型数据的有序集合</p>
<p>数组描述的时相同类型的若干个数据，按照一定的先后次序排列组合而成</p>
<p>其中，每一个数据称作一个数组元素，每</p>
<p>个数组元素可以通过一个下标来访问它们</p>
<h2 id="4-2-数组声明创建"><a href="#4-2-数组声明创建" class="headerlink" title="4.2 数组声明创建"></a>4.2 数组声明创建</h2><p>首先必须声明数组标来，才能在程序中使用数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dateType[] arrayRefVar;<span class="comment">//首选的方法</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType arrayRefVar[];<span class="comment">//效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>
<p>Java语言使用new操作符来创建数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure>
<p>数组的元素是通过索引访问的，数组索引从0开始</p>
<p>获取数组长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrays.length</span><br></pre></td></tr></table></figure>
<h2 id="4-3-数组初始化"><a href="#4-3-数组初始化" class="headerlink" title="4.3 数组初始化"></a>4.3 数组初始化</h2><p>静态初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>动态初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>默认初始化</p>
<ul>
<li>数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化</li>
</ul>
<h2 id="4-4-数组越界"><a href="#4-4-数组越界" class="headerlink" title="4.4 数组越界"></a>4.4 数组越界</h2><p>数组的特点：</p>
<ol>
<li>长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li>
<li>元素必须是相同类型，不允许出现混合类型</li>
<li>元素可以是任何数据类型，包括基本类型和引用类型</li>
<li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素都相当于该对象的成员变量。数组本身就是对象，Java中对象实在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong>。</li>
</ol>
<p>下标的合法区间[0-length-1]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">System.out.println(a[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>
<p><strong>ArrayIndexOutOfBoundsException</strong>:数组下标越界异常</p>
<h1 id="4-5-数组的使用"><a href="#4-5-数组的使用" class="headerlink" title="4.5 数组的使用"></a>4.5 数组的使用</h1><ul>
<li>For-Each循环</li>
<li>数组作方法入参</li>
<li>数组作返回值</li>
</ul>
<h2 id="4-6-多维数组"><a href="#4-6-多维数组" class="headerlink" title="4.6 多维数组"></a>4.6 多维数组</h2><p>多为数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，它的每一个元素都是一个一维数组</p>
<p>二维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>可以看作是一个两行五列的数组</p>
<h1 id="5-面向对象"><a href="#5-面向对象" class="headerlink" title="5 面向对象"></a>5 面向对象</h1><p>5.1 面向对象</p>
<ul>
<li>面向过程思想<ul>
<li>步骤清晰简单，第一步做什么，第二部做什么</li>
<li>面向过程适合处理一些较为简单的问题</li>
</ul>
</li>
<li>面向对象思想<ul>
<li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索</li>
<li>面向对象适合处理复杂的问题，适合处理多人合作的问题。</li>
</ul>
</li>
</ul>
<p>对于藐视复杂的事物，为了宏观把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</p>
<h2 id="5-1-什么是面向对象"><a href="#5-1-什么是面向对象" class="headerlink" title="5.1 什么是面向对象"></a>5.1 什么是面向对象</h2><ul>
<li>面向对象变成（Objec-Oriented Programming，OOP）</li>
<li>面向对象的本质就是：以类的方式组织代码，以对象的组织（封装）数据</li>
</ul>
<p>抽象</p>
<p>三大特性：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<p>从认识论的角度考虑是现有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</p>
<p>从代码运行的角度考虑是现有类后有对象。类是对象的模板</p>
<h2 id="5-2类和对象的创建"><a href="#5-2类和对象的创建" class="headerlink" title="5.2类和对象的创建"></a>5.2类和对象的创建</h2><p>类与对象的关系</p>
<ul>
<li>类是依中抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物<ul>
<li>动物、植物、手机、电脑……</li>
<li>Person类，Pet类，Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为</li>
</ul>
</li>
<li>对象是抽象概念的具体实例<ul>
<li>张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体实例</li>
<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念</li>
</ul>
</li>
</ul>
<p>创建与初始化对象</p>
<ul>
<li>使用new 创建对象</li>
<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中的构造器的调用</li>
<li>类中的构造器也成为构造方法，实在进行创建对象的时候必须要调用的，并且构造器有一下两个特点<ul>
<li>必须和类的名字相同</li>
<li>必须没有返回类型，也不能写void</li>
</ul>
</li>
<li>构造器作用<ul>
<li>new 本质实在调用构造方法</li>
<li>初始化对象的值</li>
</ul>
</li>
<li>注意点<ul>
<li>定义有参构造后，必须实例化无参构造</li>
<li>IDEA  快捷键  Alt+Insert 快速生成构造器</li>
</ul>
</li>
</ul>
<h2 id="5-3-封装"><a href="#5-3-封装" class="headerlink" title="5.3 封装"></a>5.3 封装</h2><ul>
<li><p>该露的露，该藏的藏</p>
<ul>
<li>设计程序追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：进暴露少量的方法给外部使用。</li>
</ul>
</li>
<li><p>封装（数据的隐藏）</p>
<ul>
<li>通常，应该禁止直接访问一个对象中的数据的实际表示，而应该通过操作接口来访问</li>
</ul>
</li>
<li><p><strong>属性私有，get/set</strong></p>
<p>IDEA alt+Insert 生成get/set</p>
</li>
<li><p>作用</p>
<ul>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
</ul>
</li>
</ul>
<h2 id="5-4-继承"><a href="#5-4-继承" class="headerlink" title="5.4 继承"></a>5.4 继承</h2><p>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模</p>
<p><strong>extends</strong>的意思是扩展，子类是父类的扩展</p>
<p>Java中类只有单继承，没有多继承</p>
<p>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有以来，组合，组合等</p>
<p>继承关系的两个类，一个为子类（派生类），一个为父类（基类），子类继承父类，使用关键字extens来表示。</p>
<p>子类和父类之间，从意义上讲应该具有is a的关系</p>
<p>Object类</p>
<ul>
<li>Java中，所有的类都直接或间接的继承Object类</li>
</ul>
<p><strong>super关键字</strong></p>
<ul>
<li>super调用父类的构造方法，必须在构造方法的第一个</li>
<li>super必须出现在子类的方法或者构造方法中</li>
<li>super和this不能同时调用构造方法</li>
</ul>
<p>super vs this</p>
<ul>
<li>代表的对象不同<ul>
<li>this：本身调用者这个对象</li>
<li>super：代表父类对象的应用</li>
</ul>
</li>
<li>前提<ul>
<li>this：没有继承也可以使用</li>
<li>super：只有在继承条件才可以使用</li>
</ul>
</li>
<li>构造方法<ul>
<li>this（） 本类的构造</li>
<li>super（） 父类的构造</li>
</ul>
</li>
</ul>
<p><strong>方法的重写</strong></p>
<p>重写都是方法的重写，与属性无关</p>
<p>重写需要有继承关系，子类重写父类的方法</p>
<ul>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符可以扩大，但不能缩小 父类小，子类大 public&gt;protected&gt;default&gt;private</li>
<li>异常可以缩小不能扩大</li>
</ul>
<p>为什么重写：</p>
<ul>
<li>父类的功能子类不一定需要，或者不一定满足</li>
</ul>
<p>不能重写的：</p>
<ul>
<li>static方法 ，属于类不属于实例</li>
<li>final 修饰的方法不能被子类重写</li>
<li>private 方法</li>
</ul>
<h2 id="5-5-多态"><a href="#5-5-多态" class="headerlink" title="5.5 多态"></a>5.5 多态</h2><p>同一方法可以根据发送对象的不同而采用多种不同的行为方式</p>
<p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</p>
<p>多态的条件</p>
<ul>
<li>继承关系</li>
<li>方法重写</li>
<li>父类引用指向子类</li>
</ul>
<p>==和equals()的区别</p>
<ul>
<li>==既可以判断基本数据类型也可以判断引用数据类型。对于基本数据类型，判断的是值是否相等。对于引用判断类型，判断的是指向的地址是否相等，即是否指向同一个对象</li>
<li>equals()是方法法，而非运算符，只适用于引用数据类型。Object类中equals()与==作用相同，比较两个对象的地址值是否相等，即两个引用是否指向同一个对象。重写过的equals()通常是比较两个对象的实体内容（属性）是否相等</li>
</ul>
<h2 id="5-6-instanceof和强制转换"><a href="#5-6-instanceof和强制转换" class="headerlink" title="5.6 instanceof和强制转换"></a>5.6 instanceof和强制转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x <span class="keyword">instanceof</span> y</span><br></pre></td></tr></table></figure>
<p> x所指向的对象是不是y的子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(student0 <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">System.out.println(student0 <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">System.out.println(student0 <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p><strong>强制转换</strong></p>
<p>高转低使用强制转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student21</span> <span class="operator">=</span> (Student) student2;</span><br><span class="line">student21.eat();<span class="comment">//eat为子类Student的方法</span></span><br></pre></td></tr></table></figure>
<p>低转高会丢失子类方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">student01</span> <span class="operator">=</span> student0;</span><br><span class="line"><span class="comment">//student01.eat();</span></span><br></pre></td></tr></table></figure>
<h2 id="5-7-static"><a href="#5-7-static" class="headerlink" title="5.7 static"></a>5.7 static</h2><h2 id="5-8-抽象类"><a href="#5-8-抽象类" class="headerlink" title="5.8 抽象类"></a>5.8 抽象类</h2><p><strong>abstract</strong>  修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类</p>
<p>抽象类中可以没有抽象方法，但是抽象方法的类一定要声明为抽象类</p>
<p><strong>抽象类不能使用new关键字来创建对象，它只能用子类继承</strong></p>
<p>抽象方法只有方法的声明没有方法的实现，它是用来让子类实现的</p>
<p>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类</p>
<h2 id="5-9-接口"><a href="#5-9-接口" class="headerlink" title="5.9 接口"></a>5.9 接口</h2><p>普通类：只有具体实现</p>
<p>抽象类：具体实现和规范（抽象方法）都有</p>
<p>接口：只有规范</p>
<p>接口就是规范，定义是一组规则，体现了现实世界中，如果你是…则必须能…的思想。如果是天使，则必须能飞。如果是汽车，必须能跑</p>
<p>接口的本质是契约，制定好之后大家都要遵守</p>
<p>OO的精髓是对对象的抽象，最能体现这一点的就是接口。讨论设计模式都只针对具备了抽象能力的语言（C++ java C#） 就是因为设计模式所研究的，实际上就是如何合理的去抽象</p>
<p>声明类的关键字是class，声明接口的关键字为interface</p>
<p>接口中所有定义的方法默认为public abstract</p>
<p>总结：</p>
<ul>
<li>约束</li>
<li>定义方法，不同的实现</li>
<li>public abstract</li>
<li>public static final</li>
<li>不能被实例化，没有构造方法</li>
<li>implements可以实现多个接口</li>
<li>必须要重写接口中的方法</li>
</ul>
<h2 id="5-10内部类"><a href="#5-10内部类" class="headerlink" title="5.10内部类"></a>5.10内部类</h2><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就成为内部类，而A类相对B类来说就是外部类</p>
<ol>
<li><p>成员内部类</p>
<p>内部类可以获得外部类的私有属性</p>
</li>
<li><p>静态内部类</p>
</li>
<li><p>局部内部类</p>
</li>
<li><p>匿名内部类</p>
</li>
</ol>
<h1 id="6-异常"><a href="#6-异常" class="headerlink" title="6 异常"></a>6 异常</h1><h2 id="6-1异常"><a href="#6-1异常" class="headerlink" title="6.1异常"></a>6.1异常</h2><p>原件运行过程中，可能遇到输入不合法，文件不存在，内存或硬盘满了等异常情况，叫做异常（Exception）</p>
<p>三类异常：</p>
<ul>
<li>检查性异常：用户错误或问题引起的异常，无法预见。例如要打开不存在的文件</li>
<li>运行时异常：运行时异常容易被避免，与检查性异常相反，运行时异常再编译时易被忽略</li>
<li>错误：错误不是异常，与JVM相关</li>
</ul>
<p>异常体系结构</p>
<ul>
<li>Java把异常当作对象来处理，并基础一个个基类java.lang.Throwable作为所有异常的超类</li>
<li>在Java API中已经定义了许多异常类，分为两大类，错误Error和异常Exception</li>
</ul>
<p>Error</p>
<ul>
<li>Error类由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关</li>
<li>Java虚拟机错误（Virtual MachineError），当JVM不在有继续操作所需的内存资源时，将出现OutofMemoryError，这些异常发生时，JVM一般会选择线程终止</li>
<li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（（LinkageError）。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li>
</ul>
<p>Exception</p>
<ul>
<li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul>
<li>ArrayIndexOutOfBoundException</li>
<li>NullPointerException</li>
<li>ArithmeticExceotion</li>
<li>MissingResourceException</li>
<li>ClassNotFoundException</li>
</ul>
</li>
<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生</li>
<li>Error与Exception的区别：Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，JVM一般会选择中止线程；Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能去处理这些异常</li>
</ul>
<h2 id="6-1-捕获和抛出异常"><a href="#6-1-捕获和抛出异常" class="headerlink" title="6.1 捕获和抛出异常"></a>6.1 捕获和抛出异常</h2><ul>
<li>抛出异常</li>
<li>捕获异常</li>
<li>五个关键字<ul>
<li>try </li>
<li>catch</li>
<li>finally</li>
<li>throw 主动抛出异常，一般在方法中使用</li>
<li>throws 方法处理不了异常，向上抛出</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-3-自定义异常"><a href="#6-3-自定义异常" class="headerlink" title="6.3 自定义异常"></a>6.3 自定义异常</h2><p>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承Exception类即可。</p>
<p>在程序中使用自定义异常，答题可分为一下几个步骤：</p>
<ol>
<li>创建自定义异常类</li>
<li>在方法中通过throw关键字抛出异常对象</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明出通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作</li>
<li>在出现异常的方法的调用者中捕获并处理异常</li>
</ol>
<h1 id="7-常用类"><a href="#7-常用类" class="headerlink" title="7 常用类"></a>7 常用类</h1><h2 id="7-1-String"><a href="#7-1-String" class="headerlink" title="7.1 String"></a>7.1 String</h2><p>java.lang.String类代表<strong>不可变</strong>的字符序列</p>
<p>“xxxxx”为该类的一个对象</p>
<p>常见构造方法</p>
<ul>
<li><p>```java<br>String(String original)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  创建一个String对象为original的拷贝</span><br><span class="line"></span><br><span class="line">+ ```java</span><br><span class="line">  String(char[] value)</span><br></pre></td></tr></table></figure>
<p>用一个字符数组创建一个String对象</p>
</li>
<li><p>```java<br>String(char[] value,int offset,int count)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  用一个字符数组从offset项开始的count个字符序列创建一个String对象</span><br><span class="line"></span><br><span class="line">String的不可变性</span><br><span class="line"></span><br><span class="line">+ 当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值</span><br><span class="line">+ 当对现有的字符串进行连接操作时，也需要指定内存区域赋值，不能使用原有的value进行操作</span><br><span class="line">+ 当调用replace()方法修改指定字符或字符串时，也需要重新指定内存区域</span><br><span class="line"></span><br><span class="line">String StringBuffer StringBuilder三者的对比</span><br><span class="line"></span><br><span class="line">+ String：不可变的字符序列，底层用char[]存储</span><br><span class="line">+ StringBuffer：可变的字符序列，线程安全，效率低，底层用char[]存储</span><br><span class="line">+ StringBuilder：可变的字符序列，JDK5新增，线程不安全，效率高，底层用char[]存储</span><br><span class="line"></span><br><span class="line">StringBuffer底层</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">String str = new String();//char[] value = new char[0];</span><br><span class="line">String str1 = new String(&quot;abc&quot;);//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span><br><span class="line"></span><br><span class="line">StringBuffer sb = new StringBuffer();//char[] value = new char[16];</span><br><span class="line">System.out.println(sb.length());</span><br><span class="line">sb.append(&#x27;a&#x27;);</span><br><span class="line">sb.append(&#x27;b&#x27;);</span><br><span class="line">System.out.println(sb.length());</span><br><span class="line">StringBuffer sb2 = new StringBuffer(&quot;abc&quot;);//char[] value = new char[&quot;abc&quot;.length()+16]&#123;&#125;;</span><br><span class="line">System.out.println(sb2.length());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>StringBuffer扩容</p>
<ul>
<li>如果要添加的数据底层数组盛不下了，需要扩容底层的数组</li>
<li>默认情况下，扩容为原来容量的2倍+2，同时将原有数组中的元素复制到新的数组中</li>
</ul>
<h2 id="7-2-Date类"><a href="#7-2-Date类" class="headerlink" title="7.2 Date类"></a>7.2 Date类</h2><p>构造器使用</p>
<ul>
<li><p>```java<br>Date date = new Date();</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  创建对应当前时间的Date对象</span><br><span class="line"></span><br><span class="line">+ ```java</span><br><span class="line">  new Date = new Date(21312334525L);</span><br></pre></td></tr></table></figure>
<p>创建指定时间戳的Date对象</p>
</li>
</ul>
<p>方法使用</p>
<ul>
<li><p>```java<br>System.out.println(date1.toString());</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  显示当前的年月日时分秒</span><br><span class="line"></span><br><span class="line">+ ```java</span><br><span class="line">  System.out.println(data1.getTime());</span><br></pre></td></tr></table></figure>
<p>获得时间戳，等同于currentTimeMillis()</p>
</li>
</ul>
<p>SimpleDateFormat</p>
<p>对日期Date类的格式化和解析</p>
<p>两个操作</p>
<ul>
<li><p>格式化：日期 -&gt;字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(date);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">System.out.println(format);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>解析：格式化的逆过程 字符串 -&gt;日期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;20-7-25 下午3:02&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(str);</span><br><span class="line">System.out.println(parse);</span><br></pre></td></tr></table></figure>
<p>带参的指定格式的格式化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> sdf1.format(date);</span><br><span class="line">System.out.println(format1);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Calendar类</p>
<p>抽象类，实例化需要调用</p>
<ul>
<li><p>Calendar.getInstance()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类GregorianCalendar的构造器</p>
</li>
</ul>
<p>set get add getTime setTime操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH,<span class="number">22</span>);</span><br><span class="line">calendar.add(Calendar.DAY_OF_MONTH,<span class="number">3</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();<span class="comment">//日历类-&gt;Date</span></span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">calendar.setTime(date1);<span class="comment">//Date -&gt; 日历类</span></span><br></pre></td></tr></table></figure>
<h2 id="7-3-System类"><a href="#7-3-System类" class="headerlink" title="7.3 System类"></a>7.3 System类</h2><h2 id="7-4-Math类"><a href="#7-4-Math类" class="headerlink" title="7.4 Math类"></a>7.4 Math类</h2><h2 id="7-5-BigInteger-BigDecimal"><a href="#7-5-BigInteger-BigDecimal" class="headerlink" title="7.5 BigInteger  BigDecimal"></a>7.5 BigInteger  BigDecimal</h2><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码：<a href="https://github.com/nuaazz/Java">nuaazz/Java: Java学习笔记 (github.com)</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Rustc源码学习02-CombinedLintPass</title>
    <url>/2022/09/01/Rustc%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A002-CombinedLintPass/</url>
    <content><![CDATA[<h1 id="CombinedLintPass"><a href="#CombinedLintPass" class="headerlink" title="CombinedLintPass"></a>CombinedLintPass</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><a href="https://github.com/awesome-kusion/rust-code-book/blob/main/rust-tools/lint/lint-pass.md">前一篇文章</a> 介绍了关于 <code>Lint</code> 和 <code>LintPass</code> 的一些概念和实现。基于这些结构，提供了一个简易的 <code>Lint</code> 检查的实现方式。本文主要介绍 <code>CombinedLintPass</code> 这一结构的实现，并基于 <code>CombinedLintPass</code> 进一步优化 <code>Lint</code> 的实现。</p>
<span id="more"></span>
<h2 id="CombinedLintpass"><a href="#CombinedLintpass" class="headerlink" title="CombinedLintpass"></a>CombinedLintpass</h2><p>Rustc 在 <code>LintPass</code> 的中实现了 <code>Lint</code> 工具检查的具体逻辑。并且使用 Visitor 模式遍历 AST 的同时调用 lintpass 中的 <code>check_*</code>方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">ast_visit</span>::Visitor <span class="keyword">for</span> <span class="title class_">Linter</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">visit_crate</span>(a: ast:<span class="keyword">crate</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">lintpass</span> <span class="keyword">in</span> lintpasses&#123;</span><br><span class="line">            lintpass.<span class="title function_ invoke__">check_crate</span>(a)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">walk_crate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">visit_stmt</span>(a: ast:stmt)&#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">lintpass</span> <span class="keyword">in</span> lintpasses&#123;</span><br><span class="line">            lintpass.<span class="title function_ invoke__">check_stmt</span>(a)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">walk_stmt</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是，Rustc 自身和 clippy 提供的 Lint 定义多达550+多个。考虑到性能因素，定义大量的 LintPass，分别注册和调用显然是不合适的。Rustc 提供了一种更优的解决方法：既然可以将多个 Lint 组织为一个 LintPass，同样也可以将多个 LintPass 组合成一个 CombinedLintPass。</p>
<blockquote>
<p><a href="https://rustc-dev-guide.rust-lang.org/diagnostics/lintstore.html#compiler-lint-passes-are-combined-into-one-pass">Compiler lint passes are combined into one pass</a><br>Within the compiler, for performance reasons, we usually do not register dozens of lint passes. Instead, we have a single lint pass of each variety (e.g., BuiltinCombinedModuleLateLintPass) which will internally call all of the individual lint passes; this is because then we get the benefits of static over dynamic dispatch for each of the (often empty) trait methods.<br>Ideally, we’d not have to do this, since it adds to the complexity of understanding the code. However, with the current type-erased lint store approach, it is beneficial to do so for performance reasons.</p>
</blockquote>
<h3 id="BuiltinCombinedEarlyLintPass"><a href="#BuiltinCombinedEarlyLintPass" class="headerlink" title="BuiltinCombinedEarlyLintPass"></a>BuiltinCombinedEarlyLintPass</h3><p>CombinedLintPass 同样分为 early 和 late 两类。 以 builtin 的 early lint 为例，Rustc 在 <code>rustc_lint::src::lib.rs</code> 中为这些 lintpass 定义了一个 <code>BuiltinCombinedEarlyLintPass</code> 结构。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">early_lint_passes!(declare_combined_early_pass, [BuiltinCombinedEarlyLintPass]);</span><br></pre></td></tr></table></figure>
<p>虽然这个定义看起来只有一行，但其中通过若干个宏的展开，汇总了14个 <code>LintPass</code>，并且每个 <code>LintPass</code> 提供了50多个 <code>check_*</code> 方法。接下来一一说明这些宏。</p>
<h4 id="BuiltinCombinedEarlyLintPass-的宏定义"><a href="#BuiltinCombinedEarlyLintPass-的宏定义" class="headerlink" title="BuiltinCombinedEarlyLintPass 的宏定义"></a>BuiltinCombinedEarlyLintPass 的宏定义</h4><h5 id="early-lint-passes"><a href="#early-lint-passes" class="headerlink" title="early_lint_passes"></a>early_lint_passes</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> early_lint_passes &#123;</span><br><span class="line">    ($<span class="keyword">macro</span>:path, $args:tt) =&gt; &#123;</span><br><span class="line">        $macro!(</span><br><span class="line">            $args,</span><br><span class="line">            [</span><br><span class="line">                UnusedParens: UnusedParens,</span><br><span class="line">                UnusedBraces: UnusedBraces,</span><br><span class="line">                UnusedImportBraces: UnusedImportBraces,</span><br><span class="line">                UnsafeCode: UnsafeCode,</span><br><span class="line">                AnonymousParameters: AnonymousParameters,</span><br><span class="line">                EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::<span class="title function_ invoke__">default</span>(),</span><br><span class="line">                NonCamelCaseTypes: NonCamelCaseTypes,</span><br><span class="line">                DeprecatedAttr: DeprecatedAttr::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">                WhileTrue: WhileTrue,</span><br><span class="line">                NonAsciiIdents: NonAsciiIdents,</span><br><span class="line">                HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,</span><br><span class="line">                IncompleteFeatures: IncompleteFeatures,</span><br><span class="line">                RedundantSemicolons: RedundantSemicolons,</span><br><span class="line">                UnusedDocComment: UnusedDocComment,</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先是 early_lint_passes 宏，这个宏的主要作用是定义了所有的 early lintpass。这里的 lintpass 是成对出现的，<code>:</code>左边为 lintpass 的 Identifier，<code>:</code>右边为 lintpass 的constructor。所以会出现 <code>EllipsisInclusiveRangePatterns::default()</code> 和 <code>DeprecatedAttr::new()</code>这种形式。early_lint_passes 会将定义的 early lintpass 和 第二个参数一起传递给下一个宏。<br>通过这个宏，之前的<code>BuiltinCombinedEarlyLintPass</code>的定义被展开为：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">declare_combined_early_pass!([BuiltinCombinedEarlyLintPass], [</span><br><span class="line">                UnusedParens: UnusedParens,</span><br><span class="line">                UnusedBraces: UnusedBraces,</span><br><span class="line">                UnusedImportBraces: UnusedImportBraces,</span><br><span class="line">                UnsafeCode: UnsafeCode,</span><br><span class="line">                AnonymousParameters: AnonymousParameters,</span><br><span class="line">                EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::<span class="title function_ invoke__">default</span>(),</span><br><span class="line">                NonCamelCaseTypes: NonCamelCaseTypes,</span><br><span class="line">                DeprecatedAttr: DeprecatedAttr::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">                WhileTrue: WhileTrue,</span><br><span class="line">                NonAsciiIdents: NonAsciiIdents,</span><br><span class="line">                HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,</span><br><span class="line">                IncompleteFeatures: IncompleteFeatures,</span><br><span class="line">                RedundantSemicolons: RedundantSemicolons,</span><br><span class="line">                UnusedDocComment: UnusedDocComment,</span><br><span class="line">            ])</span><br></pre></td></tr></table></figure>
<h5 id="declare-combined-early-pass"><a href="#declare-combined-early-pass" class="headerlink" title="declare_combined_early_pass"></a>declare_combined_early_pass</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> declare_combined_early_pass &#123;</span><br><span class="line">    ([$name:ident], $passes:tt) =&gt; (</span><br><span class="line">        early_lint_methods!(declare_combined_early_lint_pass, [<span class="keyword">pub</span> $name, $passes]);</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>declare_combined_early_pass 宏接收 early_lint_passes宏传来的 name(BuiltinCombinedEarlyLintPass) 和 passes，并继续传递给 early_lint_methods 宏。<br>通过这个宏，<code>BuiltinCombinedEarlyLintPass</code>的定义继续展开为：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">early_lint_methods!(declare_combined_early_lint_pass, </span><br><span class="line">                    [<span class="keyword">pub</span> BuiltinCombinedEarlyLintPass, </span><br><span class="line">                      [</span><br><span class="line">                            UnusedParens: UnusedParens,</span><br><span class="line">                            UnusedBraces: UnusedBraces,</span><br><span class="line">                            UnusedImportBraces: UnusedImportBraces,</span><br><span class="line">                            UnsafeCode: UnsafeCode,</span><br><span class="line">                            AnonymousParameters: AnonymousParameters,</span><br><span class="line">                            EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::<span class="title function_ invoke__">default</span>(),</span><br><span class="line">                            NonCamelCaseTypes: NonCamelCaseTypes,</span><br><span class="line">                            DeprecatedAttr: DeprecatedAttr::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">                            WhileTrue: WhileTrue,</span><br><span class="line">                            NonAsciiIdents: NonAsciiIdents,</span><br><span class="line">                            HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,</span><br><span class="line">                            IncompleteFeatures: IncompleteFeatures,</span><br><span class="line">                            RedundantSemicolons: RedundantSemicolons,</span><br><span class="line">                            UnusedDocComment: UnusedDocComment,</span><br><span class="line">               ]</span><br><span class="line">                    ]);</span><br></pre></td></tr></table></figure>
<h5 id="early-lint-methods"><a href="#early-lint-methods" class="headerlink" title="early_lint_methods"></a>early_lint_methods</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> early_lint_methods &#123;</span><br><span class="line">    ($<span class="keyword">macro</span>:path, $args:tt) =&gt; (</span><br><span class="line">        $macro!($args, [</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">check_param</span>(a: &amp;ast::Param);</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">check_ident</span>(a: &amp;ast::Ident);</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">check_crate</span>(a: &amp;ast::Crate);</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">check_crate_post</span>(a: &amp;ast::Crate);</span><br><span class="line">            ...</span><br><span class="line">        ]);</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>early<em>lint_methods 宏在前一篇文章中也介绍过，它定义了 <code>EarlyLintPass</code> 中需要实现的 `check</em>*<code>函数，并且将这些函数以及接收的参数</code>$args<code>传递给下一个宏。因为</code>BuiltinCombinedEarlyLintPass<code>也是 early lint 的一种，所以同样需要实现这些函数。
通过这个宏，</code>BuiltinCombinedEarlyLintPass`的定义继续展开为：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">declare_combined_early_lint_pass!(</span><br><span class="line">    [<span class="keyword">pub</span> BuiltinCombinedEarlyLintPass, </span><br><span class="line">        [</span><br><span class="line">            UnusedParens: UnusedParens,</span><br><span class="line">            UnusedBraces: UnusedBraces,</span><br><span class="line">            UnusedImportBraces: UnusedImportBraces,</span><br><span class="line">            UnsafeCode: UnsafeCode,</span><br><span class="line">            AnonymousParameters: AnonymousParameters,</span><br><span class="line">            EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::<span class="title function_ invoke__">default</span>(),</span><br><span class="line">            NonCamelCaseTypes: NonCamelCaseTypes,</span><br><span class="line">            DeprecatedAttr: DeprecatedAttr::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">            WhileTrue: WhileTrue,</span><br><span class="line">            NonAsciiIdents: NonAsciiIdents,</span><br><span class="line">            HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,</span><br><span class="line">            IncompleteFeatures: IncompleteFeatures,</span><br><span class="line">            RedundantSemicolons: RedundantSemicolons,</span><br><span class="line">            UnusedDocComment: UnusedDocComment,</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">check_param</span>(a: &amp;ast::Param);</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">check_ident</span>(a: &amp;ast::Ident);</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">check_crate</span>(a: &amp;ast::Crate);</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">check_crate_post</span>(a: &amp;ast::Crate);</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h5 id="declare-combined-early-lint-pass"><a href="#declare-combined-early-lint-pass" class="headerlink" title="declare_combined_early_lint_pass"></a>declare_combined_early_lint_pass</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> declare_combined_early_lint_pass &#123;</span><br><span class="line">    ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], $methods:tt) =&gt; (</span><br><span class="line">        <span class="meta">#[allow(non_snake_case)]</span></span><br><span class="line">        $v <span class="keyword">struct</span> $name &#123;</span><br><span class="line">            $($passes: $passes,)*</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">impl</span> $name &#123;</span><br><span class="line">            $v <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">                <span class="keyword">Self</span> &#123;</span><br><span class="line">                    $($passes: $constructor,)*</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $v <span class="keyword">fn</span> <span class="title function_">get_lints</span>() <span class="punctuation">-&gt;</span> LintArray &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lints</span> = Vec::<span class="title function_ invoke__">new</span>();</span><br><span class="line">                $(lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;$passes::<span class="title function_ invoke__">get_lints</span>());)*</span><br><span class="line">                lints</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">impl</span> <span class="title class_">EarlyLintPass</span> <span class="keyword">for</span> $name &#123;</span><br><span class="line">            expand_combined_early_lint_pass_methods!([$($passes),*], $methods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#[allow(rustc::lint_pass_impl_without_macro)]</span></span><br><span class="line">        <span class="keyword">impl</span> <span class="title class_">LintPass</span> <span class="keyword">for</span> $name &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span> &#123;</span><br><span class="line">                <span class="built_in">panic!</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>declare_combined_early_lint_pass宏是生成 <code>BuiltinCombinedEarlyLintPass</code> 的主体。这个宏中做了以下工作：</p>
<ul>
<li>生成一个名为 <code>BuiltinCombinedEarlyLintPass</code> 的 struct，其中的属性为宏 <code>early_lint_passes</code> 提供的 lintpass 的 identifier。</li>
<li>实现 <code>fn new()</code> <code>fn name()</code> 和 <code>fn get_lints()</code> 方法。其中 <code>new()</code> 调用了 <code>early_lint_passes</code> 提供的 lintpass 的 constructor。</li>
<li>调用宏 <code>expand_combined_early_lint_pass_methods</code>，实现自身的 <code>check_*</code> 方法。</li>
</ul>
<p>通过这个宏，<code>BuiltinCombinedEarlyLintPass</code>的定义变为：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span> &#123;</span><br><span class="line">            UnusedParens: UnusedParens,</span><br><span class="line">            UnusedBraces: UnusedBraces,</span><br><span class="line">            UnusedImportBraces: UnusedImportBraces,</span><br><span class="line">            UnsafeCode: UnsafeCode,</span><br><span class="line">            AnonymousParameters: AnonymousParameters,</span><br><span class="line">            EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns,</span><br><span class="line">            NonCamelCaseTypes: NonCamelCaseTypes,</span><br><span class="line">            DeprecatedAttr: DeprecatedAttr,</span><br><span class="line">            WhileTrue: WhileTrue,</span><br><span class="line">            NonAsciiIdents: NonAsciiIdents,</span><br><span class="line">            HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,</span><br><span class="line">            IncompleteFeatures: IncompleteFeatures,</span><br><span class="line">            RedundantSemicolons: RedundantSemicolons,</span><br><span class="line">            UnusedDocComment: UnusedDocComment,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            UnusedParens: UnusedParens,</span><br><span class="line">            UnusedBraces: UnusedBraces,</span><br><span class="line">            UnusedImportBraces: UnusedImportBraces,</span><br><span class="line">            UnsafeCode: UnsafeCode,</span><br><span class="line">            AnonymousParameters: AnonymousParameters,</span><br><span class="line">            EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::<span class="title function_ invoke__">default</span>(),</span><br><span class="line">            NonCamelCaseTypes: NonCamelCaseTypes,</span><br><span class="line">            DeprecatedAttr: DeprecatedAttr::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">            WhileTrue: WhileTrue,</span><br><span class="line">            NonAsciiIdents: NonAsciiIdents,</span><br><span class="line">            HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,</span><br><span class="line">            IncompleteFeatures: IncompleteFeatures,</span><br><span class="line">            RedundantSemicolons: RedundantSemicolons,</span><br><span class="line">            UnusedDocComment: UnusedDocComment,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get_lints</span>() <span class="punctuation">-&gt;</span> LintArray &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lints</span> = Vec::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;UnusedParens::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;UnusedBraces::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;UnusedImportBraces::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;UnsafeCode::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;AnonymousParameters::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;EllipsisInclusiveRangePatterns::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;NonCamelCaseTypes::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;DeprecatedAttr::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;WhileTrue::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;NonAsciiIdents::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;HiddenUnicodeCodepoints::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;IncompleteFeatures::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;RedundantSemicolons::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;UnusedDocComment::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        </span><br><span class="line">        lints</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">EarlyLintPass</span> <span class="keyword">for</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span> &#123;</span><br><span class="line">    expand_combined_early_lint_pass_methods!([$($passes),*], $methods);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[allow(rustc::lint_pass_impl_without_macro)]</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">LintPass</span> <span class="keyword">for</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span> &#123;</span><br><span class="line">        <span class="built_in">panic!</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="expand-combined-early-lint-pass-methods"><a href="#expand-combined-early-lint-pass-methods" class="headerlink" title="expand_combined_early_lint_pass_methods"></a>expand_combined_early_lint_pass_methods</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> expand_combined_early_lint_pass_methods &#123;</span><br><span class="line">    ($passes:tt, [$($(<span class="meta">#[$attr:meta]</span>)* <span class="keyword">fn</span> $name:<span class="title function_ invoke__">ident</span>($($param:ident: $arg:ty),*);)*]) =&gt; (</span><br><span class="line">        $(<span class="keyword">fn</span> $<span class="title function_ invoke__">name</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, $($param: $arg),*) &#123;</span><br><span class="line">            expand_combined_early_lint_pass_method!($passes, <span class="keyword">self</span>, $name, (context, $($param),*));</span><br><span class="line">        &#125;)*</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>expand_combined_early_lint_pass_methods宏在 <code>BuiltinCombinedEarlyLintPass</code> 中展开所有 <code>early_lint_methods</code> 中定义的方法。<br>通过这个宏，<code>BuiltinCombinedEarlyLintPass</code>的定义变为（省略其他定义）：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">EarlyLintPass</span> <span class="keyword">for</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_param</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, a: &amp;ast::Param) &#123;</span><br><span class="line">        expand_combined_early_lint_pass_method!($passes, <span class="keyword">self</span>, $name, (context, $($param),*));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_ident</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, a: &amp;ast::Ident) &#123;</span><br><span class="line">        expand_combined_early_lint_pass_method!($passes, <span class="keyword">self</span>, $name, (context, $($param),*));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_crate</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, a: &amp;ast::Crate) &#123;</span><br><span class="line">        expand_combined_early_lint_pass_method!($passes, <span class="keyword">self</span>, $name, (context, $($param),*));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="expand-combined-early-lint-pass-method"><a href="#expand-combined-early-lint-pass-method" class="headerlink" title="expand_combined_early_lint_pass_method"></a>expand_combined_early_lint_pass_method</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> expand_combined_early_lint_pass_method &#123;</span><br><span class="line">    ([$($passes:ident),*], $<span class="keyword">self</span>: ident, $name: ident, $params:tt) =&gt; (&#123;</span><br><span class="line">        $($<span class="keyword">self</span>.$passes.$name $params;)*</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>expand<em>combined_early_lint_pass_method：在展开的`check</em><em><code>函数中调用每一个</code>LintPass<code>的</code>check_</em><code>。
通过这个宏，</code>BuiltinCombinedEarlyLintPass`的定义变为（省略其他定义）：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">EarlyLintPass</span> <span class="keyword">for</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_param</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, a: &amp;ast::Param) &#123;</span><br><span class="line">        <span class="keyword">self</span>.UnusedParens.<span class="title function_ invoke__">check_param</span>(context, a);</span><br><span class="line">        <span class="keyword">self</span>.UnusedBraces.<span class="title function_ invoke__">check_param</span>(context, a);</span><br><span class="line">        <span class="keyword">self</span>.UnusedImportBraces.<span class="title function_ invoke__">check_param</span>(context, a);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_ident</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, a: &amp;ast::Ident) &#123;</span><br><span class="line">        <span class="keyword">self</span>.UnusedParens.<span class="title function_ invoke__">check_ident</span>(context, a);</span><br><span class="line">        <span class="keyword">self</span>.UnusedBraces.<span class="title function_ invoke__">check_ident</span>(context, a);</span><br><span class="line">        <span class="keyword">self</span>.UnusedImportBraces.<span class="title function_ invoke__">check_ident</span>(context, a);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_crate</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, a: &amp;ast::Crate) &#123;</span><br><span class="line">        <span class="keyword">self</span>.UnusedParens.<span class="title function_ invoke__">check_crate</span>(context, a);</span><br><span class="line">        <span class="keyword">self</span>.UnusedBraces.<span class="title function_ invoke__">check_crate</span>(context, a);</span><br><span class="line">        <span class="keyword">self</span>.UnusedImportBraces.<span class="title function_ invoke__">check_crate</span>(context, a);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="BuiltinCombinedEarlyLintPass-的最终定义"><a href="#BuiltinCombinedEarlyLintPass-的最终定义" class="headerlink" title="BuiltinCombinedEarlyLintPass 的最终定义"></a>BuiltinCombinedEarlyLintPass 的最终定义</h4><p>通过以上宏的展开，<code>BuiltinCombinedEarlyLintPass</code>的定义实际为如下形式：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span> &#123;</span><br><span class="line">    UnusedParens: UnusedParens,</span><br><span class="line">    UnusedBraces: UnusedBraces,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span>&#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        UnusedParens: UnusedParens,</span><br><span class="line">        UnusedBraces: UnusedBraces,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get_lints</span>() <span class="punctuation">-&gt;</span> LintArray &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lints</span> = Vec::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;UnusedParens::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        lints.<span class="title function_ invoke__">extend_from_slice</span>(&amp;UnusedBraces::<span class="title function_ invoke__">get_lints</span>());</span><br><span class="line">        ...</span><br><span class="line">        lints</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">EarlyLintPass</span> <span class="keyword">for</span> <span class="title class_">BuiltinCombinedEarlyLintPass</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_crates</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, a: &amp;ast::Crate)&#123;</span><br><span class="line">        <span class="keyword">self</span>.UnusedParens.<span class="title function_ invoke__">check_crates</span> (context, a);</span><br><span class="line">        <span class="keyword">self</span>.UnusedBraces.<span class="title function_ invoke__">check_crates</span> (context, a);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_ident</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, context: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, a: Ident)&#123;</span><br><span class="line">        <span class="keyword">self</span>.UnusedParens.<span class="title function_ invoke__">check_ident</span> (context, a);</span><br><span class="line">        <span class="keyword">self</span>.UnusedBraces.<span class="title function_ invoke__">check_ident</span> (context, a);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    .. </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这个定义，可以在遍历 AST 时使用 <code>BuiltinCombinedEarlyLintPass</code> 的 <code>check_*</code> 方法实现多个 lintpass 的检查。</p>
<h2 id="Lint-的进一步优化"><a href="#Lint-的进一步优化" class="headerlink" title="Lint 的进一步优化"></a>Lint 的进一步优化</h2><p>基于 CombinedLintPass ，可以对上一篇文章中提出的 Linter 的设计做进一步优化。<br><img src="/2022/09/01/Rustc%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A002-CombinedLintPass/combinedlintpass-01.jpg" alt="Linter"></p>
<p>这里，可以用 CombinedLintPass 的<code>check_*</code> 方法，在 Visitor 遍历 AST 时执行对应的检查。虽然效果与之前一致，但因为宏的关系，所有的 <code>check_*</code> 方法和需要执行的 lintpass 都被收集到了一个结构中，也更容易管理。同样的，因为 CombinedLintPass 实际上调用的是每个 lintpass 各自的 check 方法，虽然调用起来可能下图一样很复杂，但因为 lintpass 中定义的 check 方法大部分是由宏生成的空检查，所以也不会造成性能上的损失。<br><img src="/2022/09/01/Rustc%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A002-CombinedLintPass/combinedlintpass-02.jpg" alt="调用关系"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了 Rustc 源码中关于 <code>CombinedLintPass</code> 这一结构的定义和实现 ，并以此进一步优化 Linter 的设计。希望能够对理解 Rustc 及 Lint 有所帮助，如有错误，欢迎指正。后续的文章将继续介绍 Rustc 中 Lint 在编译过程中的注册和执行过程，期待继续关注。</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li>KusionStack: <a href="https://github.com/KusionStack">https://github.com/KusionStack</a></li>
<li>Rustc: <a href="https://github.com/rust-lang/rust">https://github.com/rust-lang/rust</a></li>
<li>rustc-dev-guide: <a href="https://rustc-dev-guide.rust-lang.org/">https://rustc-dev-guide.rust-lang.org/</a></li>
<li>Rust Visitor: <a href="https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/index.html">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/index.html</a></li>
<li>Rust Clippy: <a href="https://github.com/rust-lang/rust-clippy">https://github.com/rust-lang/rust-clippy</a></li>
</ul>
]]></content>
      <categories>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>Rust</tag>
        <tag>Rust源码学习</tag>
      </tags>
  </entry>
  <entry>
    <title>RAS算法的数学基础</title>
    <url>/2022/04/15/RAS%E7%AE%97%E6%B3%95%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学校开了一门mathematics for cryptography的课，主要讲了一些密码学中常用到的数学原理。CSDN上关于RSA的文章中，只看到了关于RSA算法的一些讲解，对于其涉及的数学原理并没有多少介绍，因此想写点东西与大家分享，同时也是为了自己复习和巩固。第一次写文章，可能会有一些问题和不足，希望大家能够指正。此外，这篇文章主要参考了我们老师Zülfükar Saygı（TOBB ETÜ - University of Economics &amp; Technology）的PPT课件，《信息安全原理及应用》第三版（熊平，朱天清）以及《信息安全数学基础——算法、应用与实践》第二版（任伟）。</p>
<span id="more"></span>
<h1 id="1-RSA简介"><a href="#1-RSA简介" class="headerlink" title="1.RSA简介"></a>1.RSA简介</h1><p>RSA是1977年由麻省理工学院的Ron Rivest,Adi Shamir和Leonard Adlenman提出的非对称公开密钥密码算法。其可靠性基于大数的因子分解问题。目前为止，仍未找到快速分解因子的算法，所以还没有任何可靠的攻击RSA算法的方式。只要密钥的长度足够长，用RSA加密的信息实际上是不可能破解的。因此，RSA算法已经成为目前应用最广泛的公钥密码。<br>RSA算法的加密过程如下：<br>1)    选择两个足够大素数p、q<br>2)    计算n=p·q   Ф=(p-1)(q-1)<br>3)    选择一个数e，满足1&lt;e&lt;Ф，且gcd（e，Ф）=1<br>4)    计算d，使得e·d≡1 mod Ф</p>
<p>其中{n,e}为公钥，{n,d}为私钥。明文m加密算法为c=$m^e$ mod n，接收方解密方式为m= $c^d$ mod n。<br>RSA的算法并不复杂，其工作原理也有很多文章做了解释和证明。为了确保算法的可靠性，需选取足够长的密钥。本文将讲解在足够长的密钥（1024-2048位，约为$10^{300}$）的情况下，使用RSA算法运算时涉及到的数学基础，主要有Miller-Rabin检测法、费马小定理、欧拉函数与欧拉定理，中国余数定理以及模重复平方算法。</p>
<h1 id="2-数论基础"><a href="#2-数论基础" class="headerlink" title="2.数论基础"></a>2.数论基础</h1><p>RSA用到的数学原理涉及到很多数论中的概念。在此做简要说明。</p>
<h2 id="2-1-整除（Divisibility）"><a href="#2-1-整除（Divisibility）" class="headerlink" title="2.1 整除（Divisibility）"></a>2.1 整除（Divisibility）</h2><p>定理：整数a和b，如果存在整数c，使得b=a·c，则b能被a整除，记做a|b。</p>
<h2 id="2-2-素数（Prime）"><a href="#2-2-素数（Prime）" class="headerlink" title="2.2 素数（Prime）"></a>2.2 素数（Prime）</h2><p>定义：如果整数p≥2且只能被1和它本身整除，则其为素数，否则为合数（composite）。</p>
<h2 id="2-3-最大公约数-Greatest-Commom-Divisor-gcd"><a href="#2-3-最大公约数-Greatest-Commom-Divisor-gcd" class="headerlink" title="2.3 最大公约数(Greatest Commom Divisor,gcd)"></a>2.3 最大公约数(Greatest Commom Divisor,gcd)</h2><p>定义：a和b的最大公约数是能够同时整除a和b的最大正整数，记做gcd（a,b）</p>
<h2 id="2-4-同余（Congruence-theorem）"><a href="#2-4-同余（Congruence-theorem）" class="headerlink" title="2.4 同余（Congruence theorem）"></a>2.4 同余（Congruence theorem）</h2><p>定义：设整数a,b,n(n≠0)，如果a-b是n的整数倍，即a=b+kn，k为整数，则a≡b mod n</p>
<h2 id="2-5-乘法逆元（Multiplicative-Inverse-Elements）"><a href="#2-5-乘法逆元（Multiplicative-Inverse-Elements）" class="headerlink" title="2.5 乘法逆元（Multiplicative Inverse Elements）"></a>2.5 乘法逆元（Multiplicative Inverse Elements）</h2><p>定义：如果gcd（a,b）=1，那么：<br>1)    存在$a^{-1}$，使得a·a-1≡1 mod b，即(a·$a^{-1}$)mod b=1;<br>2)    存在$b^{-1}$，使得b·b-1≡1 mod a，即(b·$b^{-1}$)mod a=1。<br>把$a^{-1}$ 称为a模b的乘法逆元，$b^{-1}$称为b模a的乘法逆元。一般而言，如果a与n是互素的，即gcd（a，n）=1,那么a模n的乘法逆元a-1≡x mod n有唯一解；否则，a-1≡x mod n无解。</p>
<h1 id="3-数学定理"><a href="#3-数学定理" class="headerlink" title="3.数学定理"></a>3.数学定理</h1><h2 id="3-1-Miller-Rabin检测法和费马小定理（Fermat’s-Little-Theorem，FLT）"><a href="#3-1-Miller-Rabin检测法和费马小定理（Fermat’s-Little-Theorem，FLT）" class="headerlink" title="3.1 Miller-Rabin检测法和费马小定理（Fermat’s Little Theorem，FLT）"></a>3.1 Miller-Rabin检测法和费马小定理（Fermat’s Little Theorem，FLT）</h2><p>在RSA算法中，n是由两个素数的乘积来确定的。由于n是公开的，为了避免攻击者用穷举法求出p和q（n=p·q），p和q应足够大。RSA目前建议的密钥长度为1024或2048位。对于一个1024位的密钥而言，p和q的大小在$10^{100}$~$10^{200}$之间。目前还没有有效的方法产生任意大小的素数，只能从期望大小的数中进行测试，直到检测到素数为止。目前常用的方法为Miller-Rabin素性检测法。Miller-Rabin检测法可以确定一个整数是合数，但不能确定其一定是素数。不过尽管如此，该算法所产生的数几乎可以肯定是素数。</p>
<h3 id="3-1-1费马小定理（Fermat’s-Little-Theorem）"><a href="#3-1-1费马小定理（Fermat’s-Little-Theorem）" class="headerlink" title="3.1.1费马小定理（Fermat’s Little Theorem）"></a>3.1.1费马小定理（Fermat’s Little Theorem）</h3><p>Miller-Rabin素性检测法主要是依据费马小定理和费马测试，所以先介绍费马小定理<br>定理：如果p是素数且gcd（a,p）=1，1≤a≤p-1，则$a^{p-1}$≡1 mod p<br>因此，给定需要判定素性的数n，若能找到一个整数a，使得$a^{n-1}$≠1 mod n，则n是合数。<br>Fermat素性测试：<br>输入：奇数n≥3<br>输出：prime/composite<br>Fermat（n）：{<br>    随机选择a，2≤a≤n-2<br>    r=$a^{n-1}$ mod n;<br>    if r≠1 return composite；<br>    return prime；<br>}<br>在费马测试中，如果输出是合数，则n一定是合数。若输出为素数，则有可能为素数。这是因为存在着这样的一些合数n，对于满足gcd（a,n）=1的a，均有$a^{n-1}$=1 mod n。这些数被称为Carmichael数，例如561,1105,1729,2465,2821,6601,8911……但这种数比较稀少，对费马测试的准确性准确性影响很小。研究表明，如果算法输出为prime，即通过了素性测试，则n为素数的可能性大于1-1/2，若测试了t次均为prime，则n为素数的可能性大于1-1/$2^t$。<br>费马小定理除了可以用在Miller-Rabin检测法中，还被用于计算乘法逆元。当 p取素数时，计算过程如下：<br>1)    p是素数且gcd（a,p）=1<br>2)    FLT→$a^{p-1}$≡1 mod p→a·$a^{a-2}$≡1 mod p<br>3)    $a^{p-1}$≡$a^{p-2}$ mod p</p>
<h3 id="3-1-2-Miller-Rabin检测法"><a href="#3-1-2-Miller-Rabin检测法" class="headerlink" title="3.1.2 Miller-Rabin检测法"></a>3.1.2 Miller-Rabin检测法</h3><p>在Fermat测试中，需要计算$a^{n-1}$mod n。若结果为1则输出素数，不为1则输出合数。为了简化计算过程，可以采用如下方法。对于n（n&gt;2），若n为偶数，则n必定为合数；n为奇数，则n-1为偶数，设n-1=2t,于是$a^{n-1}$=$（a^t）^2$，如果$a^t$=±1 mod n，则直接输出素数，没有必要继续计算（因为平方后会得到$a^{n-1}$=1 mod n）。进而，如果n-1=$2^k$t(k≥0)，则<br>$a^{n-1}$=$(((a^t)^2)^2)^2……)^2$共k次平方<br>同前面的分析，如果$a^t$=±1 mod n，则必有$a^{n-1}$=1 mod n，直接输出素数；否则，在k-1次平方的过程中，有一个为-1，则$a^{n-1}$=1 mod n，输出为素数。<br>根据上面的分析，算法如下。<br>Miller-Rabin素性测试<br>输入：奇数n≥3<br>输出：prime/composite<br>Miller-Rabin（n）{<br>    把n-1写成n-1=$2^k$t，随机选择整数a，1≤a≤n-1<br>    b=$a^t$ mod n;<br>    if b≡1 mod n return prime;<br>    for(i=0,i&lt;k,i++){<br>if b≡-1 mod n return prime;<br>else b=$b^2$ mod n;<br>}<br>return composite;<br>}</p>
<h2 id="3-2-欧拉函数与欧拉定理"><a href="#3-2-欧拉函数与欧拉定理" class="headerlink" title="3.2 欧拉函数与欧拉定理"></a>3.2 欧拉函数与欧拉定理</h2><p>在AES算法中，利用Miller-Rabin检测法求得两个足够大的素数p、q，并且计算出计算n=p·q和Ф=(p-1)(q-1)。其中Ф的值为n的欧拉函数（Euler Phi）。</p>
<h3 id="3-2-1欧拉函数（Euler-Phi-Function）"><a href="#3-2-1欧拉函数（Euler-Phi-Function）" class="headerlink" title="3.2.1欧拉函数（Euler Phi Function）"></a>3.2.1欧拉函数（Euler Phi Function）</h3><p>定义：小于n且与n互素的正整数的个数，记做Ф(n)，把Ф(n)称为欧拉函数。<br>性质：<br>    如果n=p是素数，Ф(n)=n-1<br>    如果n=$p^e$是素数的幂，Ф(n)=$p^e$-$p^{e-1}$<br>    如果gcd(m,n)=1，Ф(n·m)= Ф(n) ·Ф(m)<br>在AES算法中，因为p和q都是素数，所以Ф(n)= (p-1)(q-1)</p>
<h3 id="3-2-2欧拉定理-Euler’s-Theorem"><a href="#3-2-2欧拉定理-Euler’s-Theorem" class="headerlink" title="3.2.2欧拉定理(Euler’s Theorem)"></a>3.2.2欧拉定理(Euler’s Theorem)</h3><p>定理：对于任意互素的整数a和n，有aФ(n) ≡1 mod n<br>事实上费马小定理仅是欧拉定理的一种特殊情况（n为素数），所以欧拉定理对于任意的模n都可以求解乘法逆元（用于3.4中计算私钥d）。计算过程如下：<br>    Euler’s Theorem→$a^{Ф(n)}$≡1 mod n→a·aФ(n) ≡1 mod n<br>    $a^{-1}$≡$a^{Ф(n)-1}$ mod n<br>例如，求$13^{-1}$ mod 49。<br>    Ф(49)= Ф($7^2$)=($7^2$)-($7^1$)=42<br>    Euler’s Theorem→$13^{42}$ ≡1 mod 49<br>    $13^{-1}$≡$13^{42}$ mod 49</p>
<h2 id="3-3-模重复平方算法（Repeated-square-and-multiply-algorithm）"><a href="#3-3-模重复平方算法（Repeated-square-and-multiply-algorithm）" class="headerlink" title="3.3  模重复平方算法（Repeated square-and-multiply algorithm）"></a>3.3  模重复平方算法（Repeated square-and-multiply algorithm）</h2><p>RSA加密和解密时都需要计算模幂，欧拉定理求解逆元时也需要计算模幂。普通的求模幂的方法在幂指数特别大时耗时非常大。因此需要用模平法算法加快计算模幂的速度。在此算法中，将指数e用二进制形式表示，即e =$\sum<em>{i=0}^k=e_i2^i$，ei等于0或1，则：<br>$a^e=\prod ^k</em>{i=0}a^{e_i2_i}=(a^{2^0})^{e_0}(a^{2^1})^{e_1}\cdot \cdot \cdot (a^{2^k})^{e_k}$<br>例如，计算$5^{110}$ mod 131.<br>110=64+32+8+4+2=$(1101110)_2$<br>$5^2$≡ 25 mod 131 ,$5^4$≡ 101 mod 131<br>$5^8$≡ 114mod 131 ,$5^{16}$≡ 27 mod 131<br>$5^{32}$≡ 74 mod 131 ,$5^{64}$ ≡ 105 mod 131<br>所以$5^{110}$≡ $5^{64+32+8+4+2}$ ≡ $5^{64}$ ·$5^{32}$ ·$5^8$ ·$5^4$ ·$5^2$ ≡ 105·74·114·101·25 ≡ 60 mod 131</p>
<h2 id="3-4-欧几里得算法（Euclidean-Algorithm-EA）"><a href="#3-4-欧几里得算法（Euclidean-Algorithm-EA）" class="headerlink" title="3.4 欧几里得算法（Euclidean Algorithm,EA）"></a>3.4 欧几里得算法（Euclidean Algorithm,EA）</h2><p>在求得p、q、n、Ф之后，选取一整数e，使得满足1&lt;e&lt;Ф，且gcd（e，Ф）=1。因为任意两个随机数互素的概率约为0.6，所以这一步并不复杂。随机选择整数e，求gcd（e，Ф）并逐一判断即可。e和Ф很小时，很容易e和Ф的最大公约数gcd（e，Ф），如果e和Ф的值很大，可以采用欧几里得算法（Euclidean Algorithm,EA）。<br>EA算法基于以下定理，对于任意非负整数a和任意正整数b，有<br>gcd（a,b）=gcd(b,a mod b)<br>循环使用该定理，可以得到gcd(a,b) = gcd(b,r1) = ··· = gcd(rk,0) = rk。<br>其算法描述如下：<br>    A←a,B←b；<br>    若B=0，则返回A=gcd（a，b）；<br>    R=A mod B；<br>    A←B；<br>    B←R；<br>    转到2）；<br>例如，<br>gcd(91,52) = gcd(52,91−52 = 39)<br>= gcd(39,52−39 = 13)<br>= gcd(13,39−3·13 = 0) = 13.<br>gcd(11111,12345) = gcd(1111,12345-1111= 1234)<br>= gcd(1234,11111−9·1234 = 5)<br>= gcd(5,1234−5·246 = 4)<br>= gcd(4,5-4 = 1)<br>= gcd(1,0)<br>=1.</p>
<h2 id="3-5扩展的欧几里得算法-Extended-Euclidean-Algorithm-EEA"><a href="#3-5扩展的欧几里得算法-Extended-Euclidean-Algorithm-EEA" class="headerlink" title="3.5扩展的欧几里得算法(Extended Euclidean Algorithm,EEA)"></a>3.5扩展的欧几里得算法(Extended Euclidean Algorithm,EEA)</h2><p>在求得e之后，可以计算d，使得e·d≡1 mod Ф。d为e模Ф的乘法逆元，即为e-1。因为e与Ф互素，所以e-1一定存在。使用EA算法求得gcd（e，Ф）=1，再将推导过程一步一步反推回去，可求得两个整数x，y，满足x·e+y·Ф=1→ x·e=-y·Ф+1，即x·e ≡1 mod Ф，e-1=x。即为EEA算法。<br>在上面的例子中，gcd（91,25）= 13，所以91、25没有逆元<br>gcd(11111,12345)=1，<br>则1=5-4=5 -（1234-5·246）=247·5-1234<br>    =247·（11111-9·1234）-1234=247·11111-2224·1234<br>    =247·111 1-2224·（12345-11111）=2471·11111-2224·12345<br>所以，11111模12345的逆元为2471，12345模11111的逆元为-2224。<br>至此，我们可以结合欧拉定理和Repeated square-and-multiply algorithm，或者利用EEA算法来计算任意模n的逆元。</p>
<h2 id="3-6中国剩余定理（Chinese-remainder-theorem，CRT）"><a href="#3-6中国剩余定理（Chinese-remainder-theorem，CRT）" class="headerlink" title="3.6中国剩余定理（Chinese remainder theorem，CRT）"></a>3.6中国剩余定理（Chinese remainder theorem，CRT）</h2><h3 id="3-6-1中国剩余定理"><a href="#3-6-1中国剩余定理" class="headerlink" title="3.6.1中国剩余定理"></a>3.6.1中国剩余定理</h3><p>中国剩余定理，又称孙子定理，最早见于南北朝的经典数学著作《孙子算经》中的“物不知数”问题：“今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二，问物几何？”<br>这其实是求解一个一次同余式方程组，即：<br>    x≡2 mod 3<br>    x≡3 mod 5<br>    x≡2 mod 7<br>《孙子算经》中给出了解法，但只是一个孤立的例子，南宋数学家秦九韶给出了一般性的求解方法。中国古代将这一成果统称为“孙子定理”，在外文文献中常被称为 “中国剩余定理”。它可能是最著名的由中国人给出的算法。下面给出其定理。<br>定理：设$m<em>1$,$m_2$,…，$m_k$是k个两两互素的正整数，m=$\prod </em>{i=1}^{k}m<em>i$，$M_i$=m/$m_i$，则对于任意的整数$a_1$,$a_2$,…,$a_k$，则同余式组<br>x≡$a_1$ mod $m_1$<br>x≡$a_2$ mod $m_2$<br>…<br>x≡$a_k$ mod $m_k$<br>有唯一解，即x≡$\sum </em>{i=1}^kM_iM^{-1}a_i$ mod n，其中$M_iM^{-1}$≡1 mod n。<br>例如韩信点兵问题，可化为同余式组<br>    x≡1 mod 5<br>    x≡5 mod 6<br>    x≡4 mod 7<br>    x≡10 mod 11<br>应用CRT，m=5·6·7·11=2310<br>$M_1$=462 $M_1^{-1}$≡3 mod 5<br>$M_2$=385 $M_2^{-1}$≡1 mod 6<br>$M_3$=330 $M_3^{-1}$≡1 mod 7<br>$M_4$=210 $M_4^{-1}$≡1 mod 11<br>x≡462·3·1+385·1·5+330·1·4+210·1·10≡6731≡2111 mod 2310</p>
<h3 id="3-6-2-CRT在RSA中的应用"><a href="#3-6-2-CRT在RSA中的应用" class="headerlink" title="3.6.2 CRT在RSA中的应用"></a>3.6.2 CRT在RSA中的应用</h3><p>解密者在计算m=$c^d$ mod n的过程中，可以分别计算m=$c^d$ mod p和m=$c^d$ mod q，然后利用CRT计算出m。但CRT算法只能对解密过程加速，不能对加密过程加速，因为加密者只知道公钥（e，n），并不知道n的分解p、q。所以，，为了维护加密者的用户体验，很多情况下RSA的加密密钥e较解密密钥d小。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在RSA算法的求解过程如下，<br>    用Miller-Rabin检测法去选取两个足够大（$10^{100}$~$10^{200}$）的素数p、q。<br>    利用p、q计算出n=p·q和n的欧拉数Ф(n)=(p-1)·(q-1)。<br>    随机选取整数e，    利用EA算法计算最大公约数gcd（e，Ф），使得gcd（e，Ф）=1。<br>    使用EEA或者Euler’s Theorem求解d。<br>    解密过程中，可以用到CRT算法来加速解密过程。  </p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>数学</tag>
        <tag>费马小定理</tag>
        <tag>Miller-Rabin</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2022/04/15/JavaScript/</url>
    <content><![CDATA[<h1 id="1-什么是JavaScript"><a href="#1-什么是JavaScript" class="headerlink" title="1 什么是JavaScript"></a>1 什么是JavaScript</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>JavaScript是一门世界上最流行的脚本语言</p>
<p>==合格的后端人员必须精通JavaScript==</p>
<h2 id="1-2-历史"><a href="#1-2-历史" class="headerlink" title="1.2 历史"></a>1.2 历史</h2><p>ECMAScript它可以理解为JavaScript的一个标准</p>
<p>最新版本已经到es6版本~</p>
<p>但是大部分浏览器还只停留在支持es5代码上！</p>
<p>开发环境–线上环境，版本不一致</p>
<span id="more"></span>
<h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2 快速入门"></a>2 快速入门</h1><h2 id="2-1-引入JavaScript"><a href="#2-1-引入JavaScript" class="headerlink" title="2.1 引入JavaScript"></a>2.1 引入JavaScript</h2><ol>
<li><p>内部引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>abc.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;abc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    script标签内写js代码  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;script&gt;    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        alert(&#x27;hello world&#x27;);   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/script&gt;   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    外部引入    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    注意：script标签必须成对出现   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/zz.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    不用显示定义type  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-基本语法入门"><a href="#2-2-基本语法入门" class="headerlink" title="2.2 基本语法入门"></a>2.2 基本语法入门</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.定义变量 变量类型 变量名 = 变量值；</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;zz&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> score = <span class="number">60</span>;</span><br><span class="line"><span class="comment">// 2. 条件控制</span></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">60</span> &amp;&amp; score &lt;<span class="number">70</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;60-70&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">70</span> &amp;&amp; score &lt;<span class="number">80</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;70-80&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;other&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多行注释</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"><span class="comment">//console.log(socre) 在浏览器控制台打印变量</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>浏览器调试</p>
<p><img src="/2022/04/15/JavaScript/image-20200812190136005.png" alt="image-20200812190136005"></p>
<h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h2><p>数值 文本 图形 音频 视频</p>
<p>==变量==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = xxx;</span><br></pre></td></tr></table></figure>
<p>==number==</p>
<p>js不区分小数和整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span><span class="comment">//整数123</span></span><br><span class="line"><span class="number">123.</span><span class="comment">//浮点数123.1</span></span><br><span class="line"><span class="number">1.123e3</span><span class="comment">//科学计数法</span></span><br><span class="line">-<span class="number">99</span><span class="comment">//负数</span></span><br><span class="line"><span class="title class_">NaN</span><span class="comment">//not a number</span></span><br><span class="line"><span class="title class_">Infinity</span> <span class="comment">//无限大</span></span><br></pre></td></tr></table></figure>
<p>==字符串==</p>
<p>‘abc’ “abc”</p>
<p>==布尔值==</p>
<p>true false</p>
<p>==逻辑运算==</p>
<p>&amp;&amp; || !</p>
<p>==比较运算符==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">= <span class="comment">//赋值</span></span><br><span class="line">== <span class="comment">//等于 类型不一样，值一样 也是true</span></span><br><span class="line">=== <span class="comment">//绝对等于 类型一样值一样</span></span><br></pre></td></tr></table></figure>
<p>这是JS的一个缺陷，不要用==比较</p>
<p>注意：</p>
<ul>
<li>NaN===NaN 为false，这个值与所有数值都不想等，包括自己</li>
<li>只能通过isNaN（NaN）来判断这个数是不是NaN</li>
</ul>
<p>浮点数问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有精度损失，尽量避免使用浮点数进行运算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(((<span class="number">1</span>/<span class="number">3</span>)-(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))&lt;<span class="number">0.00000000001</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>==null和undefined==</p>
<p>null 空</p>
<p>undefined 未定义</p>
<p>==数组==</p>
<p>一些==列==类型相同的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保证代码可读性，尽量使用[]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">null</span>,<span class="literal">true</span>]</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">arr</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">null</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>取数组下标越界会undefined</p>
<p>==对象==</p>
<p>对象是{} 数组是[]</p>
<p>每个属性直接用逗号隔开，最后一个不需要添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person&#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;zz&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>:<span class="number">3</span>,</span><br><span class="line">	tages[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">name</span></span><br><span class="line">&gt; zz</span><br></pre></td></tr></table></figure>
<h2 id="2-4-严格检查模式"><a href="#2-4-严格检查模式" class="headerlink" title="2.4 严格检查模式"></a>2.4 严格检查模式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &#x27;use strict&#x27;; 严格检查模式，预防JS的随意性产生的一些问题</span></span><br><span class="line"><span class="comment">    必须卸载第一行</span></span><br><span class="line"><span class="comment">    局部变量建议使用let 定义</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//全局变量</span></span></span><br><span class="line"><span class="language-javascript">    i = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//局部变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i1 = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//ES6 let</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i2 = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h1><h2 id="3-1-字符串"><a href="#3-1-字符串" class="headerlink" title="3.1 字符串"></a>3.1 字符串</h2><ol>
<li>正常的字符串使用单引号或双引号包裹</li>
<li>使用转义字符</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\<span class="string">&#x27;</span></span><br><span class="line"><span class="string">\n</span></span><br><span class="line"><span class="string">\t</span></span><br><span class="line"><span class="string">\u4e2t //\u#### Unicode字符</span></span><br><span class="line"><span class="string">\x41 //Ascll字符</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>多行字符串编写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> msg =<span class="string">`hello</span></span><br><span class="line"><span class="string">world`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模板字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zz&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> msg1 = <span class="string">`hello,<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.<span class="property">length</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串可变性：不可变</p>
</li>
<li><p>大小写转换 是方法不是属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">toUpperCase</span>()</span><br><span class="line">str.<span class="title function_">toLowerCase</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>```javascript<br>str.indexOf(‘substr’)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">9. ```javascript</span><br><span class="line">   str.substring(1,3) //[&#125; 左闭右开</span><br><span class="line">   str.substring(1) //从第一个到最后一个</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-2-数组"><a href="#3-2-数组" class="headerlink" title="3.2 数组"></a>3.2 数组</h2><p><strong>Array可以包含任意的数据类型</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<ol>
<li><p>长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="property">length</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>注意：给arr.length赋值，数组大小会发生变化，赋值国小元素会丢失，过大会得到undefined</p>
</li>
<li><p>indexOf 通过元素获得下标所以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">indexOf</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>字符串的‘1’和数字1不同</p>
</li>
<li><p>slice()截取array的一部分，返回一个新的数组，类似于substring</p>
</li>
<li><p>push pop</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">arr.<span class="property">pop</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>unshift,shift 头部压入 弹出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.unshift()</span><br><span class="line">arr.shift()</span><br></pre></td></tr></table></figure>
</li>
<li><p>排序 sort</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素反转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">reverse</span>()</span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>concat() 拼接字符串 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">concat</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr</span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>concat()不改变原来的数组，只是返回一个新数组</p>
</li>
<li><p>连接符 join</p>
<p>打印拼接数组，使用特定的字符串连接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">arr.<span class="property">join</span></span><br><span class="line"><span class="string">&quot;C-B-A&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多维数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>]]</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>数组：存储数据（如何存 取）</p>
<h2 id="3-3-对象"><a href="#3-3-对象" class="headerlink" title="3.3 对象"></a>3.3 对象</h2><p>若干个键值对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var 对象名 = &#123;</span><br><span class="line">	属性名：属性值，</span><br><span class="line">	属性名：属性值，</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zz&#x27;</span>,</span><br><span class="line">    age : <span class="number">3</span>,</span><br><span class="line">    <span class="attr">email</span>:<span class="string">&quot;sadada@qq.com&quot;</span>      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JS中的对象，{…}表示一个对象，键值对描述属性 xxx：xxx，多个属性之间使用逗号隔开，最后一个属性不加逗号</p>
<p>JS中的所有键都是字符串，值是任意对象</p>
<ol>
<li><p>对象赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;zz&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用一个不存在的对象属性不会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">haha</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>动态的删减属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>动态的添加,直接给新的属性添加值即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person.haha = &quot;haha&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断属性值是否在这个对象中 xxx in xxx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;age&#x27; in person</span><br><span class="line">true</span><br><span class="line">//继承</span><br><span class="line">&#x27;toString&#x27; in person</span><br><span class="line">true</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断一个属性是否是这个对象自身拥有的hasOwnProperty（）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-4-流程控制"><a href="#3-4-流程控制" class="headerlink" title="3.4 流程控制"></a>3.4 流程控制</h2><p>if判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">60</span> &amp;&amp; score &lt;<span class="number">70</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;60-70&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">70</span> &amp;&amp; score &lt;<span class="number">80</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;70-80&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;other&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>循环</p>
<p>while</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (age &lt; <span class="number">100</span>)&#123;</span><br><span class="line">	age = age + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> (age &lt; <span class="number">100</span>)&#123;</span><br><span class="line">	age = age + <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">while</span> (age &lt; <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p>for</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">	i = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>forEach 循环，5.1引入</p>
</blockquote>
<p>数组循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">age.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> num <span class="keyword">in</span> age)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age[num])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-Map和Set"><a href="#3-5-Map和Set" class="headerlink" title="3.5 Map和Set"></a>3.5 Map和Set</h2><blockquote>
<p>ES6新特性</p>
</blockquote>
<p>Map</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">90</span>],[<span class="string">&#x27;haha&#x27;</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.<span class="title function_">get</span>(<span class="string">&#x27;tom&#x27;</span>)；</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="number">123456</span>)；</span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;tom&#x27;</span>)；</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure>
<p>Set: 无序不重复集合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]);<span class="comment">//去重</span></span><br><span class="line"><span class="comment">//[3,1]</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<h2 id="3-6-iterator"><a href="#3-6-iterator" class="headerlink" title="3.6 iterator"></a>3.6 iterator</h2><p>遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for of   for in是下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历map</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">90</span>],[<span class="string">&#x27;haha&#x27;</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历set</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> set)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-函数及面向对象"><a href="#4-函数及面向对象" class="headerlink" title="4 函数及面向对象"></a>4 函数及面向对象</h1><h2 id="4-1-函数定义及变量作用域"><a href="#4-1-函数定义及变量作用域" class="headerlink" title="4.1 函数定义及变量作用域"></a>4.1 函数定义及变量作用域</h2><blockquote>
<p>定义方式1</p>
</blockquote>
<p>绝对值函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> -x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦执行到return代表函数结束，返回结果</p>
<p>如果没有执行return，函数也会返回结果，结果是undefined</p>
<blockquote>
<p>定义方式2</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> -x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>function(x){…}是一个匿名函数，可以把结果赋值给abs，通过abs就可以调用函数</p>
<p>方法一和方法二等价</p>
<blockquote>
<p>调用函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">abs</span>(<span class="number">10</span>)<span class="comment">//10</span></span><br><span class="line"><span class="title function_">ab</span>(-<span class="number">10</span>)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p>参数问题：JS可以传任意个参数也可以不传</p>
<p>参数传进来是否存在？</p>
<p>如果不存在参数，如何规避？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(typeif x!== <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="string">&#x27;not a number&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> -x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>arguments</p>
</blockquote>
<p>arguments是一个JS免费赠送的关键字，代表传递进来的所有参数，是一个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x=&gt;&quot;</span>+x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;<span class="variable language_">arguments</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> -x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题:arguments 包含所有的参数，有时候想使用多余的参数来进行附加操作，需要排除已有的参数</p>
<blockquote>
<p>rest</p>
</blockquote>
<p>以前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ES6 引入的新特性，获取除了已定义参数之外的所有参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aaa</span>(<span class="params">a,b,...rest</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>rest参数只能写在最后面，必须用…标识</p>
<h2 id="4-2-变量作用域"><a href="#4-2-变量作用域" class="headerlink" title="4.2 变量作用域"></a>4.2 变量作用域</h2><p>在JS中，var定义变量实际上是由作用域</p>
<p>加入在函数体中声明，则在函数体外不能使用（可以通过闭包实现）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//x = x + 2 ;Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>
<p>两个函数使用了相同的变量名，只要在函数内部，就不冲突</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">zz2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内部函数可以访问外部函数的变量，反之则不行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zz</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">zz2</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//内部函数可以访问外部函数的变量</span></span><br><span class="line">            <span class="keyword">var</span> y = x + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//外部函数不能访问内部函数的变量</span></span><br><span class="line">        <span class="comment">//var z = y + 1;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>函数变量重名时，函数查找变量从自身开始，由内向外查找</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">zz</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">zz2</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//内部函数可以访问外部函数的变量</span></span><br><span class="line">            <span class="keyword">var</span> x =  <span class="number">2</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(x);<span class="comment">//2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">zz2</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">zz</span>();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提升变量的作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zz</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="string">&quot;x&quot;</span> + y;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">	<span class="keyword">var</span> y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果 xundefined</p>
<p>说明JS的执行引擎自动提升了y的声明，但不会提升变量y的赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zz2</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> y;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="string">&quot;x&quot;</span> + y;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">	<span class="keyword">var</span> y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是在JS建立之初就存在的特性。规范：所有变量的定义都卸载函数头部，便于维护；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zz3</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">1</span>,</span><br><span class="line">		y = x + <span class="number">1</span>,</span><br><span class="line">		z,i,a;<span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>全局函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>全局对象window</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(x);</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">window</span>.<span class="property">x</span>);<span class="comment">//默认的所有全局变量都自动绑定在window对象下</span></span><br></pre></td></tr></table></figure>
<p>alert()函数本身也是window的一变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x =<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="variable language_">window</span>. <span class="title function_">alert</span>(x);</span><br><span class="line"><span class="keyword">var</span> o1d_ _alert = <span class="variable language_">window</span>. alert;</span><br><span class="line"><span class="comment">//o1d_ alert(x);</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">alert</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">//发现alertO 失效了</span></span><br><span class="line"><span class="variable language_">window</span>. <span class="title function_">alert</span>(<span class="number">123</span>);</span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">alert</span> = o1d_ _alert;</span><br><span class="line"><span class="variable language_">window</span>. <span class="title function_">alert</span>(<span class="number">456</span>);</span><br></pre></td></tr></table></figure>
<p>Javascript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围，就会向外查找，如果在全局作用域都没有找到，报错<code>RefrenceError</code></p>
<blockquote>
<p>规范</p>
</blockquote>
<p>由于我们所有的全局变量都会绑定到我们的window上。如果不同的js文件，使用了相同的全局变量，冲突-&gt;如何能够减少冲突？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ZzApp</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line"><span class="title class_">ZzApp</span>.<span class="property">name</span> = <span class="string">&#x27;zz&#x27;</span>;</span><br><span class="line"><span class="title class_">ZzApp</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">a,b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题。（jQuery）</p>
<blockquote>
<p>局部作用域let</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aaa</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span> ;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i+<span class="number">1</span>);<span class="comment">//问题，i 出了这个作用域还可以使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ES6：<code>let</code>关键字，解决局部作用域冲突问题！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aaa</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span> ;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i+<span class="number">1</span>);<span class="comment">//问题，i 出了这个作用域还可以使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建议大家都用<code>let</code>取定义局部作用域的变量</p>
<blockquote>
<p>常量：const</p>
</blockquote>
<p><strong>ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量：建议不要修改这样的值。</strong></p>
<p>在ES6引入了常量关键字：<code>const</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="string">&#x27;3.14&#x27;</span>;<span class="comment">//只读效果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="string">&#x27;123&#x27;</span>;<span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br></pre></td></tr></table></figure>
<h2 id="4-3-方法"><a href="#4-3-方法" class="headerlink" title="4.3 方法"></a>4.3 方法</h2><blockquote>
<p>定义方法（方法就是把函数放在对象里面，对象中只有2个东西：属性和方法）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zz = &#123;</span><br><span class="line">    name = <span class="string">&#x27;zz&#x27;</span>,</span><br><span class="line">    brith :<span class="number">2020</span>,</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="attr">age</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//今年-出生年月</span></span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="variable language_">this</span>.<span class="property">brith</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">zz.<span class="property">name</span>;</span><br><span class="line"><span class="comment">//方法，一定要带()</span></span><br><span class="line">zz.<span class="title function_">age</span>();</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">return</span> now-<span class="variable language_">this</span>.<span class="property">birth</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zz = &#123;</span><br><span class="line">    name : <span class="string">&#x27;zz&#x27;</span>,</span><br><span class="line">    birth : <span class="number">2000</span>,</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="attr">age</span>:getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//zz.age()    =&gt;ok</span></span><br><span class="line"><span class="comment">//getAge()     =&gt;NaN</span></span><br></pre></td></tr></table></figure>
<p><strong>this是无法指向的，是默认指向调用它的那个对象</strong></p>
<blockquote>
<p>apply 所有对象都有apply</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getAge.<span class="title function_">apply</span>(zz,[]);<span class="comment">//this 指向了zz</span></span><br></pre></td></tr></table></figure>
<h1 id="5-内部对象"><a href="#5-内部对象" class="headerlink" title="5 内部对象"></a>5 内部对象</h1><blockquote>
<p>标准对象 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span></span><br><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span></span><br><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line"><span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Math</span>.<span class="property">abs</span></span><br><span class="line"><span class="string">&quot;function&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span></span><br><span class="line"><span class="string">&quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-1-Date"><a href="#5-1-Date" class="headerlink" title="5.1 Date"></a>5.1 Date</h2><p><strong>基本使用</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//</span></span><br><span class="line">now.<span class="title function_">getFullYear</span>();<span class="comment">//年</span></span><br><span class="line">now.<span class="title function_">getMonth</span>();<span class="comment">//月</span></span><br><span class="line">now.<span class="title function_">getDate</span>();<span class="comment">//日</span></span><br><span class="line">now.<span class="title function_">getDay</span>();<span class="comment">//星期几</span></span><br><span class="line">now.<span class="title function_">getHours</span>();<span class="comment">//时</span></span><br><span class="line">now.<span class="title function_">getMinutes</span>();<span class="comment">//分</span></span><br><span class="line">now.<span class="title function_">getSeconds</span>();<span class="comment">//秒</span></span><br><span class="line"></span><br><span class="line">now.<span class="title function_">getTime</span>();<span class="comment">//时间戳 全世界统一 1970 1.1 0:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1589096655409</span>));<span class="comment">//时间戳转时间</span></span><br></pre></td></tr></table></figure>
<p><strong>转换</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本地时间</span></span><br><span class="line">now.<span class="title function_">toLocaleString</span>();</span><br><span class="line"><span class="string">&quot;2020/5/10 下午3:44:15&quot;</span></span><br><span class="line"><span class="comment">//东八区</span></span><br><span class="line">now.<span class="title function_">toGMTString</span>();</span><br><span class="line"><span class="string">&quot;Sun, 10 May 2020 07:44:15 GMT&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2-JOSN"><a href="#5-2-JOSN" class="headerlink" title="5.2 JOSN"></a>5.2 JOSN</h2><blockquote>
<p>JSON是什么</p>
</blockquote>
<p>早期，所有数据传输习惯使用XML</p>
<ul>
<li><a href="https://baike.baidu.com/item/JSON">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式</li>
<li>简洁和清晰的<strong>层次结构</strong>使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
<p>在Javascript一切皆为对象，任何js 支持的类型都可以用JSON来表示：number，string</p>
<p>格式：</p>
<ul>
<li>对象都用 {}</li>
<li>数组都用 []</li>
<li>所有的键值对 都是用 key:value</li>
</ul>
<p>JSON 字符串和 JS 对象的转换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;zz&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象转换json字符串:&#123;&quot;name&quot;:&quot;zz&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;</span></span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonUser);</span><br><span class="line"></span><br><span class="line"><span class="comment">//json  字符串转换为对象，参数为json字符串</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;zz&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p>JSON 和 JS 对象的区别：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;zz&quot;</span>,<span class="attr">age</span>:<span class="number">3</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;zz&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-3-Ajax"><a href="#5-3-Ajax" class="headerlink" title="5.3 Ajax"></a>5.3 Ajax</h2><ul>
<li>原生的Javascript写法，xhr异步请求</li>
<li>jQuery封装好的方法 $(“#name”).ajax(“”)</li>
<li>axios请求</li>
</ul>
<h1 id="6-面向对象编程"><a href="#6-面向对象编程" class="headerlink" title="6 面向对象编程"></a>6 面向对象编程</h1><blockquote>
<p>原型</p>
</blockquote>
<p>Javascript、Java、C#…面向对象：Javascript有些区别</p>
<ul>
<li>类：模板</li>
<li>对象：具体实例</li>
</ul>
<p>在Javascript这个需要大家换一下思维</p>
<p>原型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//面向对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;liusx&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">run</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;run.....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小明的原型 是Student</span></span><br><span class="line">xiaoming.<span class="property">__proto__</span> = <span class="title class_">Student</span>;</span><br><span class="line">xiaoming.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Bird</span> = &#123;</span><br><span class="line"><span class="attr">fly</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;fly......&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小明的原型 是Bird</span></span><br><span class="line">xiaoming.<span class="property">__proto__</span> = <span class="title class_">Bird</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>class继承：<code>class</code>关键字，ES6引入</p>
</blockquote>
<p>1 定义一个类，属性，方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6 之后======</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小红&#x27;</span>);</span><br><span class="line">xiaoming.<span class="title function_">hello</span>();</span><br></pre></td></tr></table></figure>
<p>2 继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6 之后======</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pupil</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Student</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name,grade</span>)&#123;</span><br><span class="line"><span class="variable language_">super</span>(name);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myGrade</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是一名小学生&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line">xiaoming.<span class="title function_">hello</span>();</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> <span class="title function_">pupil</span>(<span class="string">&#x27;小红&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">xiaohong.<span class="title function_">myGrade</span>();</span><br></pre></td></tr></table></figure>
<p>本质<img src="/2022/04/15/JavaScript/image-20200813151018995.png" alt="image-20200813151018995"></p>
<blockquote>
<p>原型链</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">__proto__</span><br></pre></td></tr></table></figure>
<h1 id="7-操作Bom元素-重点"><a href="#7-操作Bom元素-重点" class="headerlink" title="7 操作Bom元素(重点)"></a>7 操作Bom元素(重点)</h1><blockquote>
<p>浏览器介绍</p>
</blockquote>
<p>Javascript 和 浏览器关系？ </p>
<p>Javascript 诞生就是为了能够让他在浏览器中运行</p>
<p>BOM：浏览器对象模型（内核）</p>
<ul>
<li>IE 6~11</li>
<li>Chrome</li>
<li>Safari</li>
<li>FireFox</li>
</ul>
<p><strong>第三方</strong>：</p>
<ul>
<li>QQ浏览器</li>
<li>360浏览器</li>
</ul>
<blockquote>
<p>window（重要）：代表浏览器窗口</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"><span class="number">722</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line"><span class="number">1148</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">outerHeight</span></span><br><span class="line"><span class="number">824</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">outerWidth</span></span><br><span class="line"><span class="number">1536</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Navigator：封装了浏览器信息</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.<span class="property">appName</span></span><br><span class="line"><span class="string">&quot;Netscape&quot;</span></span><br><span class="line">navigator.<span class="property">appVersion</span></span><br><span class="line"><span class="string">&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&quot;</span></span><br><span class="line">navigator.<span class="property">userAgent</span></span><br><span class="line"><span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&quot;</span></span><br><span class="line">navigator.<span class="property">platform</span></span><br><span class="line"><span class="string">&quot;Win32&quot;</span></span><br></pre></td></tr></table></figure>
<p>大多数时候，我们不会使用：<code>navigator</code> 对象，因为会被认为修改！不建议使用这些属性判断和编写代码</p>
<blockquote>
<p>screen：代表屏幕尺寸</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.<span class="property">width</span></span><br><span class="line"><span class="number">1536</span></span><br><span class="line">screen.<span class="property">height</span></span><br><span class="line"><span class="number">864</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>location（重要）：代表当前页面的URL信息</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">host</span>:<span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="attr">href</span>:<span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line"><span class="attr">proticlo</span>:<span class="string">&quot;https&quot;</span></span><br><span class="line"><span class="attr">reload</span>:f <span class="title function_">reload</span>()<span class="comment">// 刷新网页</span></span><br><span class="line"><span class="comment">// 设置新的地址</span></span><br><span class="line">location.<span class="title function_">assign</span>(<span class="string">&#x27;https://liusuixing.gitee.io/&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>document（内容：DOM）：代表当前页面，HTML DOM文档树</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">title</span></span><br><span class="line"><span class="string">&quot;百度一下，你就知道&quot;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;zz&#x27;</span></span><br><span class="line"><span class="string">&#x27;zz&#x27;</span></span><br></pre></td></tr></table></figure>
<p>获取具体的文档数节点：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;dl id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/dl&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	val dl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>获取cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span></span><br></pre></td></tr></table></figure>
<p>劫持cookie原理</p>
<p>www.taobao.com</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;aa.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--恶意人员：获取你的cookie上传到它的服务器--&gt;</span><br></pre></td></tr></table></figure>
<p>服务器端可以设置cookie：httpOnly</p>
<blockquote>
<p>history（不建议使用）：代表浏览器的历史记录</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">histor.<span class="title function_">forward</span>();<span class="comment">//前进</span></span><br><span class="line">history.<span class="title function_">back</span>();<span class="comment">//后退</span></span><br></pre></td></tr></table></figure>
<h1 id="8-操作Dom元素（重点）"><a href="#8-操作Dom元素（重点）" class="headerlink" title="8 操作Dom元素（重点）"></a>8 操作Dom元素（重点）</h1><p>DOM：文档对象模型</p>
<blockquote>
<p> 核心</p>
</blockquote>
<p>浏览器页面就是一个DOM 树形结构</p>
<ul>
<li>更新：更新Dom节点</li>
<li>遍历dom节点：得到Dom节点</li>
<li>删除：删除一个Dom节点</li>
<li>添加：添加一个新的节点</li>
</ul>
<p>要操作一个Dom节点，就必须要获得这个Dom节点</p>
<ul>
<li>更新：更新Dom节点</li>
<li>遍历dom节点：得到Dom节点</li>
<li>删除：删除一个Dom节点</li>
<li>添加：添加一个新的节点</li>
</ul>
<p>要操作一个Dom节点，就必须要获得这个Dom节点</p>
<blockquote>
<p>获得Dom节点</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//对应css选择器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;h1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> p2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;p2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;father&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> children = father.<span class="property">children</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//father.firstChild;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//father.lastChild;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>更新节点</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> id1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    id1.<span class="property">innerText</span>=<span class="string">&#x27;456&#x27;</span>;<span class="comment">//修改文本的值</span></span></span><br><span class="line"><span class="language-javascript">    id1.<span class="property">innerHTML</span>=<span class="string">&#x27;&lt;strong&gt;456&lt;/strong&gt;&#x27;</span>;<span class="comment">//可以解析HTML文本标签</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>操作文本：</p>
<ul>
<li><code>id1.innerText=&#39;456&#39;</code>：修改文本的值</li>
<li><code>id1.innerHTML=&#39;&lt;strong&gt;456&lt;/strong&gt;&#39;</code>：可以解析HTML文本标签</li>
</ul>
<p>操作CSS：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;yellow&#x27;</span>;<span class="comment">// 属性使用 字符串 包裹</span></span><br><span class="line">id1.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;20px&#x27;</span>;<span class="comment">// - 转 驼峰命名问题</span></span><br><span class="line">id1.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&#x27;2em&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除节点</p>
</blockquote>
<p>删除节点的步骤：先获取父节点，再通过父节点删除自己</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> self = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> father = p1.<span class="property">parentElement</span>;</span></span><br><span class="line"><span class="language-javascript">    father.<span class="title function_">removeChild</span>(self);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//删除是一个动态的过程，先删除0，在删除2会找不到2节点</span></span></span><br><span class="line"><span class="language-javascript">    father.<span class="title function_">removeChild</span>(father.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">    father.<span class="title function_">removeChild</span>(father.<span class="property">children</span>[<span class="number">1</span>])</span></span><br><span class="line"><span class="language-javascript">    father.<span class="title function_">removeChild</span>(father.<span class="property">children</span>[<span class="number">2</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：删除多个节点的时候，children是在时刻变化的</p>
<blockquote>
<p>插入节点</p>
</blockquote>
<p>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过 innerHTML 就可以增加一个元素了，但是这个DOM节点已经存在元素了，会产生覆盖。</p>
<p>追加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;JS&quot;</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> js = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;js&#x27;</span>);<span class="comment">//已存在的节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//追加到后面</span></span></span><br><span class="line"><span class="language-javascript">    list.<span class="title function_">appendChild</span>(<span class="variable constant_">JS</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>追加之后<img src="/2022/04/15/JavaScript/image-20200813162322570.png" alt="image-20200813162322570"></p>
<p>创建一个新的标签并添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">///通过JS创建一个新的节点</span></span><br><span class="line"><span class="keyword">var</span> newP = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);<span class="comment">//创建一个p标签</span></span><br><span class="line">newP.<span class="property">id</span> = <span class="string">&#x27;newP&#x27;</span>;</span><br><span class="line">newP.<span class="property">innerText</span> = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">list.<span class="title function_">append</span>(newP);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过这个标签可以设置任意值</span></span><br><span class="line"><span class="keyword">var</span> myScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">myScript.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/javascript&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以创建一个Style标签</span></span><br><span class="line"><span class="keyword">var</span> myStyle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);<span class="comment">//创建空style标签</span></span><br><span class="line">myStyle.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/css&#x27;</span>);</span><br><span class="line">myStyle.<span class="property">innerHTML</span> = <span class="string">&#x27;body&#123;background-color:red&#125;&#x27;</span>;<span class="comment">//设置标签内容</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(myStyle);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>insertBefore</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ee = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ee&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> js = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;JS&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">list.<span class="title function_">insertBefore</span>(js,ee);</span><br></pre></td></tr></table></figure>
<h1 id="9-操作表单（验证）"><a href="#9-操作表单（验证）" class="headerlink" title="9 操作表单（验证）"></a>9 操作表单（验证）</h1><blockquote>
<p> 表单是什么 form DOM树</p>
</blockquote>
<ul>
<li>文本框：text</li>
<li>下拉框：select</li>
<li>单选框：radio</li>
<li>多选框：checkbox</li>
<li>隐藏域：hidden</li>
<li>密码框：password</li>
<li>…</li>
</ul>
<p>表单的目的：提交信息</p>
<blockquote>
<p>获得要提交的信息</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span>&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//得到输入框的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input_text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boy_radio = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;boy&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> girl_radio = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;girl&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//修改</span></span></span><br><span class="line"><span class="language-javascript">    input_text.<span class="property">value</span> = <span class="string">&#x27;123&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//单选框 多选框等固定的值，只能得到当前的值</span></span></span><br><span class="line"><span class="language-javascript">    boy_radio.<span class="property">checked</span>;<span class="comment">//查看返回的结果是否为true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>提交表单：MD5加密，表单优化</p>
</blockquote>
<ul>
<li>一般的md5加密</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MD5加密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    绑定事件    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;f()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pwd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pwd&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(uname.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pwd.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        pwd.<span class="property">value</span> = <span class="title function_">md5</span>(pwd.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pwd.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>表单绑定提交事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MD5加密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--表单邦迪提交事件</span></span><br><span class="line"><span class="comment">onsubmit 绑定一个提交检测的函数.true 提交 false不提交--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    绑定事件    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;f()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pwd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pwd&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(uname.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pwd.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        pwd.<span class="property">value</span> = <span class="title function_">md5</span>(pwd.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pwd.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//判断是否提交 true 提交 false 不提交</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="10-jQuery"><a href="#10-jQuery" class="headerlink" title="10 jQuery"></a>10 jQuery</h1><p><strong>jQuery库</strong>：里面封装大量JavaScript方法</p>
<p><strong>jQuery API：</strong><a href="http://jquery.cuishifeng.cn/">http://jquery.cuishifeng.cn/</a></p>
<blockquote>
<p>获取jQuery</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--公式</span></span><br><span class="line"><span class="comment">    $(selector)。action（）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test-jquery&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//选择器就是css的选择器</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#test-jquery&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>选择器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//原生js，选择器少，麻烦且不好记</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//id、标签、类</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//jQuery 就是 css中的选择器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">click</span>();<span class="comment">//id选择器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>();<span class="comment">//标签选择</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">&#x27;.className&#x27;</span>).<span class="title function_">click</span>();<span class="comment">//class选择器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>事件</p>
</blockquote>
<p>鼠标事件 键盘事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.3.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取鼠标当前的坐标--&gt;</span></span><br><span class="line">mouse：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;move&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">在这里移动鼠标</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//网页加载完毕后 响应事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#div&#x27;</span>).<span class="title function_">mousemove</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#move&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;x:&#x27;</span>+ e.<span class="property">pageX</span> + <span class="string">&#x27;,&#x27;</span> + e.<span class="property">pageY</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>操作DOM</p>
</blockquote>
<ul>
<li>节点文本操作</li>
<li>css操作</li>
<li>元素的显示和隐藏：本质 <code>display=none;</code></li>
<li>…等等更多查看API</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;test-ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span> <span class="attr">class</span>=<span class="string">&quot;js&quot;</span>&gt;</span>Javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">&quot;python&quot;</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>show_hide<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#test-ul li[name=&#x27;python&#x27;]&quot;</span>).<span class="title function_">text</span>();<span class="comment">//获得值</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#test-ul li[name=&#x27;python&#x27;]&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;Python_new&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#test-ul&#x27;</span>).<span class="title function_">html</span>();<span class="comment">//获得值</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;test-ul&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;strong&gt;html_new&lt;/strong&gt;&#x27;</span>);<span class="comment">//设置值</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#js&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);<span class="comment">//设置样式</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#sh&#x27;</span>).<span class="title function_">show</span>();<span class="comment">//显示</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#sh&#x27;</span>).<span class="title function_">hide</span>();<span class="comment">//隐藏</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">window</span>).<span class="title function_">width</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">window</span>).<span class="title function_">height</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">width</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">height</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码: <a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>二维凸包 Andrew算法</title>
    <url>/2022/04/24/%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85-Andrew%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>LeetCode: <a href="https://leetcode-cn.com/problems/erect-the-fence/">587.安装栅栏</a></p>
<p>在一个二维的花园中，有一些用 (x, y) 坐标表示的树。由于安装费用十分昂贵，你的任务是先用最短的绳子围起所有的树。只有当所有的树都被绳子包围时，花园才能围好栅栏。你需要找到正好位于栅栏边界上的树的坐标。</p>
<p>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]</span><br><span class="line">output: [[1,1],[2,0],[4,2],[3,3],[2,4]]</span><br></pre></td></tr></table></figure>
<p><img src="/2022/04/24/%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85-Andrew%E7%AE%97%E6%B3%95/erect_the_fence_1.png" alt></p>
<h1 id="Andrew算法"><a href="#Andrew算法" class="headerlink" title="Andrew算法"></a>Andrew算法</h1><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>Andrew算法用于解决二维凸包问题。即在二维平面上用最小的周长包围所有点。因为周长最小，边界一定是凸多边形。所以从一个点出发，逆时针方向，相邻两条边夹角一定小于等于180°（向量夹角）。若大于，则一定不是边界的点，可以通过这样的方式来判断点是否在边界上。</p>
<p>Andrew算法将凸包分为两部分，以边界最左和最右的两个节点的连线为分界线，分为上壳和下壳两部分。下壳从x坐标最小值顺时针“拐”到x最大值；上壳从最大值拐到最小值。</p>
<p><img src="/2022/04/24/%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85-Andrew%E7%AE%97%E6%B3%95/分界线.png" alt></p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol>
<li>根据x坐标升序排序，x相同则y升序排序</li>
<li>用栈维护凸包（边界）上的点。</li>
<li>计算下壳：从左到右遍历节点，对每一个新节点，与栈中最后一个节点组成一条边，栈中最后两个节点组成一条边，判断新节点是否在凸包上</li>
<li>如果在凸包上，入栈，进入下一个节点</li>
<li>如果不在凸包上，循环出栈，直至新节点与栈中最后一个节点组成的边在凸包上。</li>
<li>如果栈中少于两个点，则节点直接入栈</li>
<li>同理，从右到左遍历，计算上壳。</li>
</ol>
<h2 id="是否在凸包上的判断"><a href="#是否在凸包上的判断" class="headerlink" title="是否在凸包上的判断"></a>是否在凸包上的判断</h2><p>用两个边的夹角（向量极角）来判断轨迹顺/逆时针旋转，即是否在凸包上。对于向量$\vec{pq}$,$\vec{qr}$,向量的叉积cross(p,q,r) =$\vec{pq}$×$\vec{qr}$，如果叉积小于 0，可以知道向量 $\vec{pq}$,$\vec{qr}$顺时针旋转，则此时向右拐；如果叉积大于 0，可以知道向量 $\vec{pq}$,$\vec{qr}$ 逆时针旋转，表示是左拐；如果叉积等于 0，则 $\vec{pq}$,$\vec{qr}$在同一条直线上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cross</span>(<span class="params">p: <span class="type">List</span>[<span class="built_in">int</span>], q: <span class="type">List</span>[<span class="built_in">int</span>], r: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> (q[<span class="number">0</span>] - p[<span class="number">0</span>]) * (r[<span class="number">1</span>] - q[<span class="number">1</span>]) - (q[<span class="number">1</span>] - p[<span class="number">1</span>]) * (r[<span class="number">0</span>] - q[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">outerTrees</span>(<span class="params">self, trees: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">cross</span>(<span class="params">p: <span class="type">List</span>[<span class="built_in">int</span>], q: <span class="type">List</span>[<span class="built_in">int</span>], r: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            <span class="keyword">return</span> (q[<span class="number">0</span>] - p[<span class="number">0</span>]) * (r[<span class="number">1</span>] - q[<span class="number">1</span>]) - (q[<span class="number">1</span>] - p[<span class="number">1</span>]) * (r[<span class="number">0</span>] - q[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        n = <span class="built_in">len</span>(trees)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> trees</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按照 x 从小到大排序，如果 x 相同，则按照 y 从小到大排序</span></span><br><span class="line">        trees.sort()</span><br><span class="line"></span><br><span class="line">        hull = [<span class="number">0</span>]  <span class="comment"># hull[0] 需要入栈两次，不标记</span></span><br><span class="line">        used = [<span class="literal">False</span>] * n</span><br><span class="line">        <span class="comment"># 求凸包的下半部分</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(hull) &gt; <span class="number">1</span> <span class="keyword">and</span> cross(trees[hull[-<span class="number">2</span>]], trees[hull[-<span class="number">1</span>]], trees[i]) &lt; <span class="number">0</span>:</span><br><span class="line">                used[hull.pop()] = <span class="literal">False</span></span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line">            hull.append(i)</span><br><span class="line">        <span class="comment"># 求凸包的上半部分</span></span><br><span class="line">        m = <span class="built_in">len</span>(hull)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> used[i]:</span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(hull) &gt; m <span class="keyword">and</span> cross(trees[hull[-<span class="number">2</span>]], trees[hull[-<span class="number">1</span>]], trees[i]) &lt; <span class="number">0</span>:</span><br><span class="line">                    used[hull.pop()] = <span class="literal">False</span></span><br><span class="line">                used[i] = <span class="literal">True</span></span><br><span class="line">                hull.append(i)</span><br><span class="line">        <span class="comment"># hull[0] 同时参与凸包的上半部分检测，因此需去掉重复的 hull[0]</span></span><br><span class="line">        hull.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [trees[i] <span class="keyword">for</span> i <span class="keyword">in</span> hull]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>Andrew</tag>
        <tag>凸包</tag>
        <tag>几何</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记</title>
    <url>/2022/04/15/SpringMVC/</url>
    <content><![CDATA[<h1 id="1-回顾MVC"><a href="#1-回顾MVC" class="headerlink" title="1 回顾MVC"></a>1 回顾MVC</h1><h2 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h2><ul>
<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li>
<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>
<li>MVC主要作用是<strong><em>\</em>降低了视图与业务逻辑间的双向偶合**</strong>。</li>
<li>MVC不是一种设计模式，<strong><em>\</em>MVC是一种架构模式**</strong>。当然不同的MVC存在差异。</li>
</ul>
<p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p>
<p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3S3dQT1BXcTAwcE1KaWFLODZsRjZCaklYVzdXbW05S1ZFVjFGWFVmSk1EMEt6dVlaN2ljNVVIZ2dzWkRBenlZeXJkNHBMdm5CSVZNNXpBLzY0MA?x-oss-process=image/format,png" alt="img"></p>
<h2 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h2><ul>
<li>在web早期的开发中，通常采用的都是Model1。</li>
<li>Model1中，主要分为两层，视图层和模型层。</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3S3dQT1BXcTAwcE1KaWFLODZsRjZCaklXZThSUGNDVWVleG9qQmlhUHRZN0hpYlFvblMzUGRDeTk4b1YyNEYwdFlrOEl4RVVZNDNOOTNUQS82NDA?x-oss-process=image/format,png" alt="img"></p>
<p>Model1优点：架构简单，比较适合小型项目开发；</p>
<p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p>
<h2 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h2><p>Model2把一个项目分成三部分，包括<strong><em>\</em>视图、控制、模型。**</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3S3dQT1BXcTAwcE1KaWFLODZsRjZCaklDS3N6cXkyd1plbWtLN1hpYkNRd0VuNzk1dW85Y1JTN0VRd2pUOFg3R3UyTnVhbklKZlVRWDZRLzY0MA?x-oss-process=image/format,png" alt="img"></p>
<ol>
<li>用户发请求</li>
<li>Servlet接收请求数据，并调用对应的业务逻辑方法</li>
<li>业务处理完毕，返回更新后的数据给servlet</li>
<li>servlet转向到JSP，由JSP来渲染页面</li>
<li>响应给前端更新后的页面</li>
</ol>
<p><strong>职责分析：</strong></p>
<p><strong>Controller：控制器</strong></p>
<ol>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ol>
<p><strong>Model：模型</strong></p>
<ol>
<li>业务逻辑</li>
<li>保存数据的状态</li>
</ol>
<p><strong>View：视图</strong></p>
<ol>
<li>显示页面</li>
</ol>
<p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p>
<h1 id="2-回顾Servlet"><a href="#2-回顾Servlet" class="headerlink" title="2 回顾Servlet"></a>2 回顾Servlet</h1><ol>
<li><p>新建项目，导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>简历Moudule 添加Web-app支持</p>
</li>
<li><p>导入servlet和jsp依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写一个Servlet类，用来处理客户请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取前端参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用业务层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//视图转发或重定向</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在WEB-INF目录下新建一个jsp的文件夹，新建test.jsp</p>
</li>
</ol>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>注册Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zz.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>MVC框架要做哪些事情</strong></p>
<ol>
<li>将url映射到java类或java类的方法 .</li>
<li>封装用户提交的数据 .</li>
<li>处理请求–调用相关的业务处理–封装响应数据 .</li>
<li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li>
</ol>
<h1 id="3-SpringMVC"><a href="#3-SpringMVC" class="headerlink" title="3 SpringMVC"></a>3 SpringMVC</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KwPOPWq00pMJiaK86lF6BjIRQkoR3WJaVZzicPAx3NumuY40RXSQOPzIbEicYsT0ySCPQ8cvQc2ic1Aw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p>
<p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>
<p><strong>我们为什么要学习SpringMVC呢?</strong></p>
<p> Spring MVC的特点：</p>
<ol>
<li>轻量级，简单易学</li>
<li>高效 , 基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p>
<p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p>
<p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p>
<p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p>
<h2 id="3-2-中心控制器"><a href="#3-2-中心控制器" class="headerlink" title="3.2 中心控制器"></a>3.2 中心控制器</h2><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p>
<p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，<strong>DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)</strong>。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KwPOPWq00pMJiaK86lF6BjI7ENu0jNibPiaiaiaBhyx6o9UUyU82Mddg4DjwzniaczmTLRbAtI9pKJq1tQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<p>SpringMVC的原理如下图所示：</p>
<p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KwPOPWq00pMJiaK86lF6BjIaosVziclWLEJQkzobxHrpHcmtu2yTeVWPmEI4Yq5PaicS52VaJt8dYfQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<h2 id="3-3-SpringMVC执行原理"><a href="#3-3-SpringMVC执行原理" class="headerlink" title="3.3 SpringMVC执行原理"></a>3.3 SpringMVC执行原理</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KwPOPWq00pMJiaK86lF6BjIbmPOkY8TxF6qvGAGXxC7dArYcr8uJlWoVC4aF4bfxgCGCD8sHg8mgw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p>
<p><strong>简要分析执行流程</strong></p>
<ol>
<li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p>
<ul>
<li><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p>
</li>
<li><p><strong>如上url拆分成三部分：</strong></p>
</li>
<li><p><a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a></p>
</li>
<li><p>SpringMVC部署在服务器上的web站点</p>
</li>
<li><p>hello表示控制器</p>
</li>
<li><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p>
</li>
</ul>
</li>
<li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p>
</li>
<li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p>
</li>
<li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p>
</li>
<li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p>
</li>
<li><p>Handler让具体的Controller执行。</p>
</li>
<li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p>
</li>
<li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p>
</li>
<li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p>
</li>
<li><p>最终视图呈现给用户。</p>
</li>
</ol>
<h1 id="4-第一个MVC程序"><a href="#4-第一个MVC程序" class="headerlink" title="4 第一个MVC程序"></a>4 第一个MVC程序</h1><p>1、新建一个Moudle ， springmvc-02-hello ， 添加web的支持</p>
<p>2、确定导入了SpringMVC 的依赖</p>
<p>3、配置web.xml  ， 注册DispatcherServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p>
<p>说明，这里的名称要求是按照官方来的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、添加 处理映射器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>6、添加 处理器适配器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>7、添加 视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>8、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">       <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">       mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9、将自己的类交给SpringIOC容器，注册bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>10、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>11、配置Tomcat 启动测试！</p>
<p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p>
<ol>
<li>查看控制台输出，看一下是不是缺少了什么jar包。</li>
<li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li>
<li>重启Tomcat 即可解决！</li>
</ol>
<h1 id="5-使用注解开发"><a href="#5-使用注解开发" class="headerlink" title="5 使用注解开发"></a>5 使用注解开发</h1><p>1、新建一个Moudle ， springmvc-03-anno ， 添加web的支持</p>
<p>2、确定导入了SpringMVC 的依赖</p>
<p>3、配置web.xml  ， 注册DispatcherServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p>
<p>说明，这里的名称要求是按照官方来的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、自动扫描包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zz.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>6、让SpringMVC不在处理静态资源 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>7、支持mvc注解驱动 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>8、添加 视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>8、编写我们要操作业务Controller ，@RequestMapping(“/hello”)映射访问的地址</p>
<p>return “hello” 返回给视图解析器拼接的jsp页面名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>; <span class="comment">//返回给视图解析器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9、将自己的类交给SpringIOC容器，注册bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>10、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>11、配置Tomcat 启动测试！</p>
<p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p>
<ol>
<li>查看控制台输出，看一下是不是缺少了什么jar包。</li>
<li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li>
<li>重启Tomcat 即可解决！</li>
</ol>
<h1 id="6-控制器Controller"><a href="#6-控制器Controller" class="headerlink" title="6 控制器Controller"></a>6 控制器Controller</h1><ul>
<li><p>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</p>
</li>
<li><p>控制器负责解析用户的请求并将其转换为一个模型。</p>
</li>
<li><p>在Spring MVC中一个控制器类可以包含多个方法</p>
</li>
<li><p>在Spring MVC中，对于Controller的配置方式有很多种</p>
</li>
</ul>
<h2 id="实现Controller接口"><a href="#实现Controller接口" class="headerlink" title="实现Controller接口"></a>实现Controller接口</h2><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//实现该接口的类获得控制器功能</span><br><span class="line">public interface Controller &#123;</span><br><span class="line">   //处理请求且返回一个模型与视图对象</span><br><span class="line">   ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<ol>
<li><p>新建一个Moudle，springmvc-04-controller 。将刚才的03 拷贝一份, 我们进行操作！</p>
</li>
<li><ul>
<li>删掉HelloController</li>
<li>mvc的配置文件只留下 视图解析器！</li>
</ul>
</li>
<li><p>编写一个Controller类，ControllerTest1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定义控制器</span><br><span class="line">//注意点：不要导错包，实现Controller接口，重写方法；</span><br><span class="line">public class ControllerTest1 implements Controller &#123;</span><br><span class="line"></span><br><span class="line">   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">       //返回一个模型视图对象</span><br><span class="line">       ModelAndView mv = new ModelAndView();</span><br><span class="line">       mv.addObject(&quot;msg&quot;,&quot;Test1Controller&quot;);</span><br><span class="line">       mv.setViewName(&quot;test&quot;);</span><br><span class="line">       return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean name=&quot;/test&quot; class=&quot;com.zz.controller.ControllerTest1&quot;/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名</p>
</li>
</ol>
<p><strong>说明：</strong></p>
<ul>
<li>实现接口Controller定义控制器是较老的办法</li>
<li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li>
</ul>
<h2 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h2><ul>
<li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p>
</li>
<li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zz.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>增加一个ControllerTest2类，使用注解实现；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller注解的类会自动添加到Spring上下文中</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest2</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;ControllerTest2&quot;</span>);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>运行tomcat测试</li>
</ul>
<p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p>
<p><strong>注解方式是平时使用的最多的方式！</strong></p>
<h1 id="7-RequestMapping"><a href="#7-RequestMapping" class="headerlink" title="7 RequestMapping"></a>7 RequestMapping</h1><p><strong>@RequestMapping</strong></p>
<ul>
<li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p>
</li>
<li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p>
</li>
<li><p>只注解在方法上面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class TestController &#123;</span><br><span class="line">   @RequestMapping(&quot;/h1&quot;)</span><br><span class="line">   public String test()&#123;</span><br><span class="line">       return &quot;test&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问路径：<a href="http://localhost:8080">http://localhost:8080</a> / 项目名 / h1</p>
</li>
<li><p>同时注解类与方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/admin&quot;)</span><br><span class="line">public class TestController &#123;</span><br><span class="line">   @RequestMapping(&quot;/h1&quot;)</span><br><span class="line">   public String test()&#123;</span><br><span class="line">       return &quot;test&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问路径：<a href="http://localhost:8080">http://localhost:8080</a> / 项目名/ admin /h1  , 需要先指定类的路径再指定方法的路径；</p>
</li>
</ul>
<h1 id="8-RestFul-风格"><a href="#8-RestFul-风格" class="headerlink" title="8 RestFul 风格"></a>8 RestFul 风格</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h2><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a><strong>功能</strong></h2><p>资源：互联网所有的事物都可以被抽象为资源</p>
<p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p>
<p>分别对应 添加、 删除、修改、查询。</p>
<p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p>
<p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p>
<p>​    <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p>
<p>​    <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p>
<p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p>
<p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p>
<p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p>
<p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p>
<p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p>
<p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p>
<p><strong>学习测试</strong></p>
<ol>
<li><p>在新建一个类 RestFulController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>原来的风格</p>
<p><a href="http://localhost:8080/add?a=1&amp;b=2">http://localhost:8080/add?a=1&amp;b=2</a></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class RestFulController &#123;</span><br><span class="line">    @RequestMapping(&quot;/add&quot;)</span><br><span class="line">    public String test1(int a, int b, Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,a+b);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>RestFul <a href="http://localhost:8080/add?a/b">http://localhost:8080/add?a/b</a></p>
<p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a, <span class="meta">@PathVariable</span> <span class="type">int</span> b, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,a+b);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>使用method属性指定请求类型</strong></p>
<p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p>
<p>我们来测试一下：</p>
<ul>
<li><p>增加一个方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//映射访问路径,必须是POST请求</span><br><span class="line">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="line">public String index2(Model model)&#123;</span><br><span class="line">   model.addAttribute(&quot;msg&quot;, &quot;hello!&quot;);</span><br><span class="line">   return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p>
</li>
</ul>
<ul>
<li><p>如果将POST修改为GET则正常了；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//映射访问路径,必须是Get请求</span><br><span class="line">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="line">public String index2(Model model)&#123;</span><br><span class="line">   model.addAttribute(&quot;msg&quot;, &quot;hello!&quot;);</span><br><span class="line">   return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>小结：</strong></p>
<p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p>
<p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p>
<p>方法级别的注解变体有如下几个：组合注解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping</span><br><span class="line">@PostMapping</span><br><span class="line">@PutMapping</span><br><span class="line">@DeleteMapping</span><br><span class="line">@PatchMapping</span><br></pre></td></tr></table></figure>
<p>@GetMapping 是一个组合注解，平时使用的会比较多！</p>
<p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p>
<h1 id="9-结果跳转方式"><a href="#9-结果跳转方式" class="headerlink" title="9 结果跳转方式"></a>9 结果跳转方式</h1><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p>
<p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应的controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的controller类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ControllerTest1 implements Controller &#123;</span><br><span class="line"></span><br><span class="line">   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">       //返回一个模型视图对象</span><br><span class="line">       ModelAndView mv = new ModelAndView();</span><br><span class="line">       mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);</span><br><span class="line">       mv.setViewName(&quot;test&quot;);</span><br><span class="line">       return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h2><p>通过设置ServletAPI , 不需要视图解析器 .</p>
<p>1、通过HttpServletResponse进行输出</p>
<p>2、通过HttpServletResponse实现重定向</p>
<p>3、通过HttpServletResponse实现转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultGo</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p>
<p>测试前，需要将视图解析器注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发二</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p>
<p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p>
<p>可以重定向到另外一个请求实现 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC2</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">       <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="10-数据处理"><a href="#10-数据处理" class="headerlink" title="10 数据处理"></a>10 数据处理</h1><h2 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h2><h3 id="1、提交的域名称和处理方法的参数名一致"><a href="#1、提交的域名称和处理方法的参数名一致" class="headerlink" title="1、提交的域名称和处理方法的参数名一致"></a><strong>1、提交的域名称和处理方法的参数名一致</strong></h3><p>提交数据 : <a href="http://localhost:8080/hello?name=kuangshen">http://localhost:8080/hello?name=kuangshen</a></p>
<p>处理方法 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(String name)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台输出 : kuangshen</p>
<h3 id="2、提交的域名称和处理方法的参数名不一致"><a href="#2、提交的域名称和处理方法的参数名不一致" class="headerlink" title="2、提交的域名称和处理方法的参数名不一致"></a><strong>2、提交的域名称和处理方法的参数名不一致</strong></h3><p>提交数据 : <a href="http://localhost:8080/hello?username=kuangshen">http://localhost:8080/hello?username=kuangshen</a></p>
<p>处理方法 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span><br><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台输出 : kuangshen</p>
<p><strong>3、提交的是一个对象</strong></p>
<p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p>
<p>1、实体类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">   private int id;</span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line">   //构造</span><br><span class="line">   //get/set</span><br><span class="line">   //tostring()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、提交数据 : <a href="http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></p>
<p>3、处理方法 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public String user(User user)&#123;</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台输出 : User { id=1, name=’kuangshen’, age=15 }</p>
<p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p>
<h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p>
<p>我们前面一直都是如此 . 就不过多解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>第二种 : 通过ModelMap</strong></p>
<p>ModelMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>第三种 : 通过Model</strong></p>
<p>Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>就对于新手而言简单来说使用区别就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><br><span class="line"></span><br><span class="line">ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><br><span class="line"></span><br><span class="line">ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span><br></pre></td></tr></table></figure>
<p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p>
<p><strong>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。</strong></p>
<h1 id="11-乱码问题"><a href="#11-乱码问题" class="headerlink" title="11 乱码问题"></a>11 乱码问题</h1><p>测试步骤：</p>
<p>1、我们可以在首页编写一个提交的表单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/e/t&quot; method=&quot;post&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>2、后台编写对应的处理类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Encoding &#123;</span><br><span class="line">   @RequestMapping(&quot;/e/t&quot;)</span><br><span class="line">   public String test(Model model,String name)&#123;</span><br><span class="line">       model.addAttribute(&quot;msg&quot;,name); //获取表单提交的值</span><br><span class="line">       return &quot;test&quot;; //跳转到test页面显示输入的值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、输入中文测试，发现乱码</p>
<p>解决方法一：对get有效，对post无效</p>
<p>过滤器Filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zz.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方法二：SpringMVC配置过滤器 极端情况下对get支持不好</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方法三：检查tomcat配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>方法四：自定义过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">myrequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRequest</span>(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyRequest</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="built_in">this</span>.request = request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Map <span class="title function_">getParameterMap</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="comment">// 处理get乱码</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> <span class="title class_">String</span>(values[i]</span><br><span class="line">                                      .getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">super</span>.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="12-JSON"><a href="#12-JSON" class="headerlink" title="12 JSON"></a>12 JSON</h1><h2 id="12-1-什么是JSON？"><a href="#12-1-什么是JSON？" class="headerlink" title="12.1 什么是JSON？"></a>12.1 什么是JSON？</h2><blockquote>
<p>什么是JSON？</p>
</blockquote>
<ul>
<li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li>
<li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li>
<li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
<p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p>
<ul>
<li>对象表示为键值对，数据由逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;: &quot;QinJiang&quot;&#125;</span><br><span class="line">&#123;&quot;age&quot;: &quot;3&quot;&#125;</span><br><span class="line">&#123;&quot;sex&quot;: &quot;男&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p>
<p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;; //这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="line">var json = &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;; //这是一个 JSON 字符串，本质是一个字符串</span><br></pre></td></tr></table></figure>
<p><strong>JSON 和 JavaScript 对象互转</strong></p>
<p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = JSON.parse(&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;);</span><br><span class="line">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></pre></td></tr></table></figure>
<p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var json = JSON.stringify(&#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;);</span><br><span class="line">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>代码测试</strong></p>
<p>1、新建一个module ，springmvc-05-json ， 添加web的支持</p>
<p>2、在web目录下新建一个 json-1.html ， 编写测试内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//编写一个JavaScript对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;zz&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//将js对象转换为json</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> s = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//将json对象转换为JavaScript对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> user1 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(s);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(user1);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、在IDEA中使用浏览器打开，查看控制台输出！</p>
<h2 id="12-2-Jackson"><a href="#12-2-Jackson" class="headerlink" title="12.2 Jackson"></a>12.2 Jackson</h2><p>Jackson应该是目前比较好的json解析工具了</p>
<p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p>
<p>我们这里使用Jackson，使用它需要导入它的jar包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置SpringMVC需要的配置</p>
<p>web.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">        version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--1.注册servlet--&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">       &lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">           &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</span><br><span class="line">       &lt;/init-param&gt;</span><br><span class="line">       &lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br><span class="line">       &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">   &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--所有请求都会被springmvc拦截 --&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">   &lt;filter&gt;</span><br><span class="line">       &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">       &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">           &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">       &lt;/init-param&gt;</span><br><span class="line">   &lt;/filter&gt;</span><br><span class="line">   &lt;filter-mapping&gt;</span><br><span class="line">       &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
<p>springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要导入lombok</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.zz.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zz.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Controller会走视图解析器  @ResponseBody配合@Controller使用则不会走视图解析器 返回字符串</span></span><br><span class="line"><span class="comment">//@RestController 直接返回字符串，不走视图解析器</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="comment">//@ResponseBody //不会走视图解析器，会直接返回一个字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jackson  ObjectionMapper</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zz&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j2&quot;)</span></span><br><span class="line">    <span class="comment">//@ResponseBody //不会走视图解析器，会直接返回一个字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jackson  ObjectionMapper</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zz1&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zz1&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zz2&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zz3&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        userList.add(user3);</span><br><span class="line">        userList.add(user4);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapper.writeValueAsString(userList);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line">    <span class="comment">//@ResponseBody //不会走视图解析器，会直接返回一个字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jackson  ObjectionMapper</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j4&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//自定义日期格式对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//指定日期格式</span></span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j5&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">json5</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JsonUtils.getJson(date);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>JsonUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object,String dateFormat)</span> &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//不使用时间差的方式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//自定义日期格式对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dateFormat);</span><br><span class="line">        <span class="comment">//指定日期格式</span></span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-3-FastJson"><a href="#12-3-FastJson" class="headerlink" title="12.3 FastJson"></a>12.3 FastJson</h2><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p>
<p>fastjson 的 pom依赖！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.2.60&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>fastjson 三个主要的类：</p>
<p><strong>JSONObject  代表 json 对象</strong> </p>
<ul>
<li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li>
<li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li>
</ul>
<p><strong>JSONArray  代表 json 对象数组</strong></p>
<ul>
<li>内部是有List接口中的方法来完成操作的。</li>
</ul>
<p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p>
<ul>
<li>JSON类源码分析与使用</li>
<li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li>
</ul>
<p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zz1&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zz2, 3, &quot;</span>男<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       User user3 = new User(&quot;</span>zz3<span class="string">&quot;, 3, &quot;</span>男<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       User user4 = new User(&quot;</span>zz4<span class="string">&quot;, 3, &quot;</span>男<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span></span><br><span class="line"><span class="string">       list.add(user1);</span></span><br><span class="line"><span class="string">       list.add(user2);</span></span><br><span class="line"><span class="string">       list.add(user3);</span></span><br><span class="line"><span class="string">       list.add(user4);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>*******Java对象 转 JSON字符串*******<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       String str1 = JSON.toJSONString(list);</span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>JSON.toJSONString(list)==&gt;<span class="string">&quot;+str1);</span></span><br><span class="line"><span class="string">       String str2 = JSON.toJSONString(user1);</span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>JSON.toJSONString(user1)==&gt;<span class="string">&quot;+str2);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>\n****** JSON字符串 转 Java对象*******<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       User jp_user1=JSON.parseObject(str2,User.class);</span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>JSON.parseObject(str2,User.class)==&gt;<span class="string">&quot;+jp_user1);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>\n****** Java对象 转 JSON对象 ******<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>(JSONObject) JSON.toJSON(user2)==&gt;<span class="string">&quot;+jsonObject1.getString(&quot;</span>name<span class="string">&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>\n****** JSON对象 转 Java对象 ******<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>JSON.toJavaObject(jsonObject1, User.class)==&gt;<span class="string">&quot;+to_java_user);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p>
<h1 id="13-Ajax"><a href="#13-Ajax" class="headerlink" title="13 Ajax"></a>13 Ajax</h1><h2 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h2><ul>
<li><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></li>
<li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li>
<li><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></li>
<li>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</li>
<li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</li>
<li><p>就和国内百度的搜索框一样!</p>
</li>
<li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p>
</li>
<li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li>
<li>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</li>
</ul>
<h2 id="13-2-伪造Ajax"><a href="#13-2-伪造Ajax" class="headerlink" title="13.2 伪造Ajax"></a>13.2 伪造Ajax</h2><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p>
<p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p>
<p>2、编写一个 ajax-frame.html 使用 iframe 测试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;currentTime&#x27;</span>).<span class="property">innerText</span> = myDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">LoadPage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> targetUrl =  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;url&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(targetUrl);</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframePosition&quot;</span>).<span class="property">src</span> = targetUrl;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入要加载的地址：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;currentTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;LoadPage()&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载页面位置：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframePosition&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、使用IDEA开浏览器测试一下！</p>
<p><strong>利用AJAX可以做：</strong></p>
<ul>
<li>注册时，输入用户名自动检测用户是否已经存在。</li>
<li>登陆时，提示用户名密码错误</li>
<li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li>
<li>….等等</li>
</ul>
<h2 id="13-3-jQuery-ajax"><a href="#13-3-jQuery-ajax" class="headerlink" title="13.3 jQuery.ajax"></a>13.3 jQuery.ajax</h2><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p>
<p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p>
<p>jQuery 提供多个与 AJAX 有关的方法。</p>
<p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p>
<p>jQuery 不是生产者，而是大自然搬运工。</p>
<p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，GET、POST（1.9.0之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;)</span><br><span class="line">          async：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback=?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure>
<p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p>
<p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、编写一个AjaxController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ajax1</span><span class="params">(String name , HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、编写index.jsp测试</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;%--&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;--%&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       function <span class="title function_">a1</span><span class="params">()</span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#txtName&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data,status) &#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">                   alert(status);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txtName&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p>
<h2 id="13-4-SpringMVC实现"><a href="#13-4-SpringMVC实现" class="headerlink" title="13.4 SpringMVC实现"></a>13.4 SpringMVC实现</h2><p>实体类user</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来获取一个集合对象，展示到前端页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">ajax2</span><span class="params">()</span>&#123;</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆2号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆3号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       $(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           $.<span class="title function_">post</span>(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;data.<span class="property">length</span> ; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                   html+= <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].<span class="property">name</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].<span class="property">age</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].<span class="property">sex</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">               $(<span class="string">&quot;#content&quot;</span>).<span class="title function_">html</span>(html);</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p>
<blockquote>
<p>注册提示效果</p>
</blockquote>
<p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p>
<p>我们写一个Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">ajax3</span><span class="params">(String name,String pwd)</span>&#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="comment">//模拟数据库中存在数据</span></span><br><span class="line">   <span class="keyword">if</span> (name!=<span class="literal">null</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           msg = <span class="string">&quot;用户名输入错误&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">if</span> (pwd!=<span class="literal">null</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;123456&quot;</span>.equals(pwd))&#123;</span><br><span class="line">           msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           msg = <span class="string">&quot;密码输入有误&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span> msg; <span class="comment">//由于@RestController注解，将msg转成json格式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端页面 login.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">a1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           $.<span class="title function_">post</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">url</span>:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">data</span>:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#name&quot;</span>).<span class="title function_">val</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">if</span> (data.<span class="title function_">toString</span>()==<span class="string">&#x27;OK&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                       $(<span class="string">&quot;#userInfo&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                  &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                       $(<span class="string">&quot;#userInfo&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                  &#125;</span></span><br><span class="line"><span class="language-javascript">                   $(<span class="string">&quot;#userInfo&quot;</span>).<span class="title function_">html</span>(data);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">a2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           $.<span class="title function_">post</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">url</span>:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">data</span>:&#123;<span class="string">&#x27;pwd&#x27;</span>:$(<span class="string">&quot;#pwd&quot;</span>).<span class="title function_">val</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">if</span> (data.<span class="title function_">toString</span>()==<span class="string">&#x27;OK&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                       $(<span class="string">&quot;#pwdInfo&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                  &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                       $(<span class="string">&quot;#pwdInfo&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                  &#125;</span></span><br><span class="line"><span class="language-javascript">                   $(<span class="string">&quot;#pwdInfo&quot;</span>).<span class="title function_">html</span>(data);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;a1()&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;a2()&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;pwdInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>【记得处理json乱码问题】</p>
<p>测试一下效果，动态请求响应，局部刷新，就是如此！</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KZibKx8mbpgp9uicB6eJRNyNtU7ek8sJ1kpbFia5e5IoMRtGFwBiaylw7iakYBws0icEAqyH22l6Y7FMzQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<blockquote>
<p>获取baidu接口Demo</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP百度搜索<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#q</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#ul</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background-color</span>: <span class="number">#f60</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 2.步骤二</span></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 定义demo函数 (分析接口、数据)</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> <span class="title class_">Ul</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 如果搜索数据存在 把内容添加进去</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">if</span> (data.<span class="property">s</span>.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// 隐藏掉的ul显示出来</span></span></span><br><span class="line"><span class="language-javascript">               <span class="title class_">Ul</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// 搜索到的数据循环追加到li里</span></span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;data.<span class="property">s</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                   html += <span class="string">&#x27;&lt;li&gt;&#x27;</span>+data.<span class="property">s</span>[i]+<span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// 循环的li写入ul</span></span></span><br><span class="line"><span class="language-javascript">               <span class="title class_">Ul</span>.<span class="property">innerHTML</span> = html;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 1.步骤一</span></span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 获取输入框和ul</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> Q = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;q&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> <span class="title class_">Ul</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 事件鼠标抬起时候</span></span></span><br><span class="line"><span class="language-javascript">           Q.<span class="property">onkeyup</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// 如果输入框不等于空</span></span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> != <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="comment">// 创建标签</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                   <span class="comment">//给定要跨域的地址 赋值给src</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span></span><br><span class="line"><span class="language-javascript">                   script.<span class="property">src</span> = <span class="string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span>+<span class="variable language_">this</span>.<span class="property">value</span>+<span class="string">&#x27;&amp;cb=demo&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                   <span class="comment">// 将组合好的带src的script标签追加到body里</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="14-拦截器"><a href="#14-拦截器" class="headerlink" title="14 拦截器"></a>14 拦截器</h1><h2 id="14-1简介"><a href="#14-1简介" class="headerlink" title="14.1简介"></a>14.1简介</h2><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p>
<p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p>
<p><strong>过滤器</strong></p>
<ul>
<li>servlet规范中的一部分，任何java web工程都可以使用</li>
<li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li>
</ul>
<p><strong>拦截器</strong> </p>
<ul>
<li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li>
<li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截</li>
</ul>
<h2 id="14-2-自定义拦截器"><a href="#14-2-自定义拦截器" class="headerlink" title="14.2 自定义拦截器"></a>14.2 自定义拦截器</h2><p>那如何实现拦截器呢？</p>
<p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p>
<p>1、新建一个Moudule ， springmvc-07-Interceptor  ， 添加web支持</p>
<p>2、配置web.xml 和 springmvc-servlet.xml 文件</p>
<p>3、编写一个拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理的方法之前执行</span></span><br><span class="line">   <span class="comment">//如果返回true执行下一个拦截器</span></span><br><span class="line">   <span class="comment">//如果返回false就不执行下一个拦截器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理前------------&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理方法执行之后执行</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理后------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------清理------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、在springmvc的配置文件中配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、编写一个Controller，接收请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试拦截器的控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/interceptor&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">testFunction</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;控制器中的方法执行了&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、前端 index.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;</span>&gt;</span>拦截器测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>7、启动tomcat 测试一下！</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KshicHhIPa51icXVueiaMfB0HtJH2NsHDlcibyEJuibgomZzDNpHiammcSRt2V87uPMYGC7h0gt5KS2Dcw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<blockquote>
<p>验证用户是否登录 (认证用户)</p>
</blockquote>
<p><strong>实现思路</strong></p>
<p>1、有一个登陆页面，需要写一个controller访问页面。</p>
<p>2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p>
<p>3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p>
<p><strong>测试：</strong></p>
<p>1、编写一个登陆页面  login.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、编写一个Controller处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳转到登陆页面</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/jumplogin&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">jumpLogin</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳转到成功页面</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/jumpSuccess&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">jumpSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//登陆提交</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpSession session, String username, String pwd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// 向session记录用户身份信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;接收前端===&quot;</span>+username);</span><br><span class="line">       session.setAttribute(<span class="string">&quot;user&quot;</span>, username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//退出登陆</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;logout&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// session 过期</span></span><br><span class="line">       session.invalidate();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、编写一个登陆成功的页面 success.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录成功页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$&#123;user&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&lt;%--登录--%&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumplogin&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumpSuccess&quot;</span>&gt;</span>成功页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、编写用户登录拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">// 如果是登陆页面则放行</span></span><br><span class="line">       System.out.println(<span class="string">&quot;uri: &quot;</span> + request.getRequestURI());</span><br><span class="line">       <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 如果用户已登陆也放行</span></span><br><span class="line">       <span class="keyword">if</span>(session.getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 用户没有登陆跳转到登陆页面</span></span><br><span class="line">       request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、在Springmvc的配置文件中注册拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>7、再次重启Tomcat测试！</p>
<p><strong>OK，测试登录拦截功能无误.</strong></p>
<h1 id="15-文件上传和下载"><a href="#15-文件上传和下载" class="headerlink" title="15 文件上传和下载"></a>15 文件上传和下载</h1><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p>
<p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p>
<p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p>
<ul>
<li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li>
<li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li>
<li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p>
<ul>
<li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li>
<li>而Spring MVC则提供了更简单的封装。</li>
<li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li>
<li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li>
<li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li>
</ul>
<blockquote>
<p>文件上传</p>
</blockquote>
<p>1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、配置bean：multipartResolver</p>
<p>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CommonsMultipartFile 的 常用方法：</p>
<ul>
<li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li>
<li><strong>InputStream getInputStream()：获取文件流</strong></li>
<li><p><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></p>
<p>我们去实际测试一下</p>
</li>
</ul>
<p>3、编写前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、<strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line">   <span class="comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">   <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//上传路径保存设置</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">       <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">       <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">           realPath.mkdir();</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//读取写出</span></span><br><span class="line">       <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">       <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">           os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">           os.flush();</span><br><span class="line">      &#125;</span><br><span class="line">       os.close();</span><br><span class="line">       is.close();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、测试上传文件，OK！</p>
<p><strong>采用file.Transto 来保存上传的文件</strong></p>
<p>1、编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//上传路径保存设置</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">   <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">       realPath.mkdir();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//上传文件地址</span></span><br><span class="line">   System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">   file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、前端表单提交地址修改</p>
<p>3、访问提交测试，OK！</p>
<blockquote>
<p>文件下载</p>
</blockquote>
<p><strong>文件下载步骤：</strong></p>
<p>1、设置 response 响应头</p>
<p>2、读取文件 — InputStream</p>
<p>3、写出文件 — OutputStream</p>
<p>4、执行操作</p>
<p>5、关闭流 （先开后关）</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">//要下载的图片地址</span></span><br><span class="line">   <span class="type">String</span>  <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   <span class="type">String</span>  <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">   <span class="comment">//设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">   <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">   <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">   <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="type">byte</span>[] buff =<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//4、执行 写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/download&quot;</span>&gt;</span>点击下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码: <a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MVC</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>南大《软件分析》01.Introduction</title>
    <url>/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B01-Introduction/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是南京大学李樾、谭添老师的《软件分析》课程的笔记。内容来自课程ppt以及课程讲解。</p>
<blockquote>
<p>课程主页：<a href="https://tai-e.pascal-lab.net/lectures.html">Static Program Analysis | Tai-e (pascal-lab.net)</a></p>
<p>授课视频：<a href="https://www.bilibili.com/video/BV1b7411K7P4">视频南京大学《软件分析》课程01（Introduction）_哔哩哔哩_bilibili</a></p>
<p>课程实验repo：<a href="https://github.com/pascal-lab/Tai-e-assignments">pascal-lab/Tai-e-assignments: Tai-e assignments for static program analysis (github.com)</a></p>
</blockquote>
<h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><ol>
<li>PL and Static Analysis</li>
<li>Why We Learn Static Analysis</li>
<li>What is Static Analysis</li>
<li>Static Analysis Features and Examples</li>
</ol>
<span id="more"></span>
<h1 id="PL-and-Static-Analysis"><a href="#PL-and-Static-Analysis" class="headerlink" title="PL and Static Analysis"></a>PL and Static Analysis</h1><p>PL: Progeamming Languages</p>
<ul>
<li>Theory<ul>
<li>Language design</li>
<li>Type system</li>
<li>Semantics and logics</li>
<li>……</li>
</ul>
</li>
<li>Environment<ul>
<li>Compilers</li>
<li>Runtime system</li>
<li>……</li>
</ul>
</li>
<li>Application<ul>
<li>==Program analysis==</li>
<li>Program verification</li>
<li>Program synthesis</li>
<li>……</li>
</ul>
</li>
</ul>
<p>Background: In the last decade, the language cores had few changes, but the programs became significantly larger and more complicated.</p>
<p>Challenge: How to ensure the reliability, security and other promises of large-scale and complex programs?</p>
<h1 id="Why-we-need-static-analysis"><a href="#Why-we-need-static-analysis" class="headerlink" title="Why we need static analysis?"></a>Why we need static analysis?</h1><ul>
<li>Program Reliability<ul>
<li>Null pointer dereference, momery leak, etc.</li>
</ul>
</li>
<li>Program Security<ul>
<li>Private information leak, injection attack, etc.</li>
</ul>
</li>
<li>Compiler Optimization<ul>
<li>Dead code elimination, code motion, etc.</li>
</ul>
</li>
<li>Program Understanding<ul>
<li>IDE call hierarchy, type indication, etc.</li>
</ul>
</li>
</ul>
<h1 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h1><h2 id="Static-Analysis-1"><a href="#Static-Analysis-1" class="headerlink" title="Static Analysis"></a>Static Analysis</h2><p>==Static== analysis analyzes a program <em>P</em> to reason about its behaviors and deterines whether it satisfies some properties ==before running== <em>P</em>.</p>
<ul>
<li>Does <em>P</em> contain andy private information leaks?</li>
<li>Does <em>P</em> deference any null pointers?</li>
<li>Are all the cast operations in <em>P</em> safe?</li>
<li>Can <em>v1</em> and <em>v2</em> in <em>P</em> point to the same memory location?</li>
<li>Will certain <em>assert</em> statements in <em>P</em> fail?</li>
<li>Is this piece of code in <em>P</em> dead(so that it could be eliminated)?</li>
<li>…</li>
</ul>
<h2 id="Rice-Theorem"><a href="#Rice-Theorem" class="headerlink" title="Rice Theorem"></a>Rice Theorem</h2><p>Unfortuanately, by Rice’s Theorem, there is no such approach to determine whether P satisfies such non-trivial propertirs, i.e., giving exact answer: Yes or No.</p>
<blockquote>
<p>Rice’s Theorem:</p>
<p>Any non-trivial property of the behavior of progras in a r.e. language is undecidable</p>
</blockquote>
<p>r.e.(recurisively enumerable) = recognizable by a Turing-machine（C, Java, and amost all languages）</p>
<p>A property is trivial if either it is not satisfied by any r.e. language,  or if it is satisfied by all r.e. languages; otherwise it is non-trivial.</p>
<p>non-trivial properties </p>
<p>~= interesting properties </p>
<p>~= the properties related with run-time behaviors of programs</p>
<blockquote>
<p>任何编程语言编写的程序中与动态运行时相关的特性都是不确定的</p>
</blockquote>
<p>Perfect static analysis</p>
<ul>
<li>Sound(Overapproximate，false postitivs), and</li>
<li>Complete(Underaapproximate，false negatives)</li>
</ul>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B01-Introduction/SoundandComplete.png" alt></p>
<p>Useful static analysis</p>
<ul>
<li>Compromise soundness(false negatives), or</li>
<li>Compromise completeness(false positives)</li>
</ul>
<p>Mostly compromising completensess: ==Sound== but ==not fully-precise== static analysis.</p>
<h2 id="Necessity-of-Soundness"><a href="#Necessity-of-Soundness" class="headerlink" title="Necessity of Soundness"></a>Necessity of Soundness</h2><p>Soundness is ==critiacal== to a collection of important(static-analysis) applications such as <em>compiler optimization</em> and <em>program verification</em>.</p>
<p>Example: Safe Cast</p>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B01-Introduction/SafeCast.png" alt></p>
<ul>
<li>Unsound: Safe Cast -&gt; wrong conclusion</li>
<li>Sound: Not Safe Cast: correct conclusion</li>
<li>Soundness is also ==preferable== to other (static-analysis) applications for which soundness is not demanded, e.g., bug detection, as better soundness implies more bugs could be found.</li>
</ul>
<h2 id="Static-Analysis-Bird’s-Eye-View"><a href="#Static-Analysis-Bird’s-Eye-View" class="headerlink" title="Static Analysis-Bird’s Eye View"></a>Static Analysis-Bird’s Eye View</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (input)</span><br><span class="line">	x = 1;</span><br><span class="line">else</span><br><span class="line">	x = 0</span><br><span class="line">-&gt; x = ?</span><br></pre></td></tr></table></figure>
<p>Two analysis results:</p>
<ol>
<li><p>when input is true, x = 1</p>
<p>when input is false, x = 0</p>
<p>Sonud, precise, expensive</p>
</li>
<li><p>x = 1 or  x = 0</p>
<p>Sound, imprecise, cheap</p>
</li>
</ol>
<p>Static Analysis: ensure(or get close to) ==soundness==, while making good trade-offs between analysis ==precision== and analysis ==speed==. </p>
<h2 id="Two-Words-to-Conclude-Static-Analysis"><a href="#Two-Words-to-Conclude-Static-Analysis" class="headerlink" title="Two Words to Conclude Static Analysis"></a>Two Words to Conclude Static Analysis</h2><p>Abstraction + Over-approximation</p>
<p>Example: Determine the sign (+, -, or 0) of all the variables of a given program.</p>
<ul>
<li>Abstraction</li>
<li>Over-approximation<ul>
<li>Transfer functions</li>
<li>Control flows</li>
</ul>
</li>
</ul>
<h3 id="Abstaction"><a href="#Abstaction" class="headerlink" title="Abstaction"></a>Abstaction</h3><p>Determine the sign (+, -, or 0) of all the variables of a given program.</p>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B01-Introduction/Abstraction.png" alt></p>
<h3 id="Over-approximation"><a href="#Over-approximation" class="headerlink" title="Over-approximation:"></a>Over-approximation:</h3><h4 id="Transfer-Functions"><a href="#Transfer-Functions" class="headerlink" title="Transfer Functions"></a>Transfer Functions</h4><ul>
<li>In static analysis, transfer functions define how to evaluate different program statements on abstract values.</li>
<li>Transfer functions are defined according to “analysis problem” and the “semantics” of different program statements.</li>
</ul>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B01-Introduction/TransferFunction.png" alt></p>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B01-Introduction/TranferFunctionAnalysis.png" alt></p>
<p>1, 2: Static analysis is useful</p>
<p>3: But(over-approximated) static analysis produces false positives</p>
<h4 id="Control-Flows"><a href="#Control-Flows" class="headerlink" title="Control Flows"></a>Control Flows</h4><p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B01-Introduction/ControlFlows.png" alt></p>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B01-Introduction/ControlFlow2.png" alt></p>
<p>As it’s impossible to enumerate all paths in practice, flow merging (as a way of over-approximation) is taken for granted in most static analyses.</p>
]]></content>
      <categories>
        <category>软件分析</category>
      </categories>
      <tags>
        <tag>静态分析</tag>
        <tag>Static Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>南大《软件分析》02.Intermediate Representation</title>
    <url>/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是南京大学李樾、谭添老师的《软件分析》课程的笔记。内容来自课程ppt以及课程讲解。</p>
<blockquote>
<p>课程主页：<a href="https://tai-e.pascal-lab.net/lectures.html">Static Program Analysis | Tai-e (pascal-lab.net)</a></p>
<p>授课视频：<a href="https://www.bilibili.com/video/BV1b7411K7P4">视频南京大学《软件分析》课程01（Introduction）_哔哩哔哩_bilibili</a></p>
<p>课程实验repo：<a href="https://github.com/pascal-lab/Tai-e-assignments">pascal-lab/Tai-e-assignments: Tai-e assignments for static program analysis (github.com)</a></p>
</blockquote>
<h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><ol>
<li>Compilers and Static Analyzers </li>
<li>AST vs. IR </li>
<li>IR: Three-Address Code (3AC) </li>
<li>3AC in Real Static Analyzer </li>
<li>Static Single Assignment (SSA) </li>
<li>Basic Blocks (BB) </li>
<li>Control Flow Graphs (CFG)</li>
</ol>
<span id="more"></span>
<h1 id="Compiler-and-Static-Analyzers"><a href="#Compiler-and-Static-Analyzers" class="headerlink" title="Compiler and Static Analyzers"></a>Compiler and Static Analyzers</h1><p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/CompilerandStaticAnalyzers.png" alt></p>
<h1 id="AST-vs-IR"><a href="#AST-vs-IR" class="headerlink" title="AST vs. IR"></a>AST vs. IR</h1><p>AST：</p>
<ul>
<li>high-level and closed to grammar structure</li>
<li>usually language dependent</li>
<li>suitable for fast type checking</li>
<li>lack of control flow information</li>
</ul>
<p>IR：</p>
<ul>
<li>low-level and closed to machine code</li>
<li>usually language independent</li>
<li>compact and uniform</li>
<li>contains control flow information</li>
<li>usually considered as the basis for static analysis</li>
</ul>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/ASTandIR.png" alt></p>
<h1 id="Intermediate-Representation-IR"><a href="#Intermediate-Representation-IR" class="headerlink" title="Intermediate Representation(IR)"></a>Intermediate Representation(IR)</h1><h2 id="3-Address-Code-3AC"><a href="#3-Address-Code-3AC" class="headerlink" title="3-Address Code(3AC)"></a>3-Address Code(3AC)</h2><p> There is at most one operator on the right side of an instruction</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t = a + b + 3</span><br><span class="line">↓</span><br><span class="line">t1 = a + b</span><br><span class="line">t2 = t1 + 3</span><br></pre></td></tr></table></figure>
<p>Each 3AC contains at most 3 addresses:</p>
<ul>
<li>Name: a, b</li>
<li>Constant: 3</li>
<li>Compiler-generated temporary: t1, t2</li>
</ul>
<h2 id="Some-Common-3AC-Forms"><a href="#Some-Common-3AC-Forms" class="headerlink" title="Some Common 3AC Forms"></a>Some Common 3AC Forms</h2><ul>
<li>x, y, z: addresses</li>
<li>bop: binary arithmetic or logical operation</li>
<li>uop: unary operation(minus, negation, casting)</li>
<li>L: a label to represent a program location</li>
<li>rop: relational operator(&gt;,&lt;,==,&gt;=,&lt;=, etc.)</li>
<li>goto L: unconditional jump</li>
<li>if … goto L: conditional jump</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = y bop z</span><br><span class="line">x = uop y</span><br><span class="line">x = y</span><br><span class="line">goto L</span><br><span class="line">if x goto L</span><br><span class="line">if x rop y goto L</span><br></pre></td></tr></table></figure>
<h1 id="Soot-and-Its-IR-Jimple"><a href="#Soot-and-Its-IR-Jimple" class="headerlink" title="Soot and Its IR: Jimple"></a>Soot and Its IR: Jimple</h1><p>Soot: Most popular static analysis framework for Java </p>
<blockquote>
<p><a href="https://github.com/Sable/soot/wiki/Tutorials">https://github.com/Sable/soot/wiki/Tutorials</a> </p>
<p><a href="https://github.com/Sable/soot">https://github.com/Sable/soot</a> </p>
</blockquote>
<p>Soot’s IR is Jimple: typed 3-address code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java Src</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForLoop3AC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3AC(jimple)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">&#123;</span><br><span class="line">    java.lang.String[] r0;</span><br><span class="line">    <span class="type">int</span> i1;</span><br><span class="line">    </span><br><span class="line">    r0 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line">    i1 = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">label1:</span><br><span class="line">    <span class="keyword">if</span> i1 &gt;= <span class="number">10</span> goto label2;</span><br><span class="line">    i1 = i1 + <span class="number">1</span>;</span><br><span class="line">    goto label1;</span><br><span class="line"></span><br><span class="line">label2:</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java Src</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileLoop3AC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (arr[i] &lt; <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3AC(jimple)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">&#123;</span><br><span class="line">    java.lang.String[] r0;</span><br><span class="line">    <span class="type">int</span>[] r1;</span><br><span class="line">    <span class="type">int</span> $i0, i1;</span><br><span class="line">    </span><br><span class="line">    r0 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line">    r1 = newarray (<span class="type">int</span>)[<span class="number">10</span>];</span><br><span class="line">    i1 = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">label1:</span><br><span class="line">    i1 = i1 + <span class="number">1</span>;</span><br><span class="line">    $i0 = r1[i1];</span><br><span class="line">    <span class="keyword">if</span> $i0 &lt; <span class="number">10</span> goto label1;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java Src</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForLoop3AC</span> &#123;</span><br><span class="line">    String <span class="title function_">foo</span><span class="params">(String para1, String para2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> para1 + <span class="string">&quot; &quot;</span> + para2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">MethodCall3AC</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodCall3AC</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> mc.foo(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3AC(jimple)</span></span><br><span class="line">java.lang.String <span class="title function_">foo</span><span class="params">(java.lang.String, java.lang.String)</span></span><br><span class="line">&#123;</span><br><span class="line">	nju.sa.examples.MethodCal13AC r0;</span><br><span class="line">	java.lang.String r1, r2, $r7;</span><br><span class="line">	java.lang.StringBuilder $r3, $r4, $r5, $r6;</span><br><span class="line">	r0 := <span class="meta">@this</span>: nju.sa.examples.MethodCall3AC;</span><br><span class="line">	r1 := <span class="meta">@parameter0</span>: java.lang.String;</span><br><span class="line">	r2 := <span class="meta">@parameter1</span>: java.lang.String;</span><br><span class="line">	$r3 = <span class="keyword">new</span> <span class="title class_">java</span>.lang.StringBuilder;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// method signature &lt;&gt;</span></span><br><span class="line">    specialinvoke $r3.&lt;java.lang.StringBuilder: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line">	$r4 = virtualinvoke $r3.&lt;java.lang.StringBuilder: java.lang.StringBuilder <span class="title function_">append</span><span class="params">(java.lang.String)</span>&gt;(r1);</span><br><span class="line">    $r5 = virtualinoke $r4.&lt;java.lang.StringBuilder: java.lang.StringBuilder append java.lang.String)&gt;(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    $r6 = virtualinvoke $r5.&lt;java.lang.StringBuilder: java.lang.StringBuilder <span class="title function_">append</span><span class="params">(java.lang.String)</span>&gt;(r2);</span><br><span class="line">    $r7 = virtualinvoke $r6.&lt;java.lang.StringBuilder: java.lang.String <span class="title function_">toString</span><span class="params">()</span>&gt;();</span><br><span class="line">    <span class="keyword">return</span> $r7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">&#123;</span><br><span class="line">	java.lang.String[] r0;</span><br><span class="line">    nju.sa.examples.MethodCall3AC $r3;</span><br><span class="line">    </span><br><span class="line">    r0 := <span class="meta">@parameter0</span>: java.lang.String[]; </span><br><span class="line">    $r3 = <span class="keyword">new</span> <span class="title class_">nju</span>.sa.example.MethodCall3AC;</span><br><span class="line">    </span><br><span class="line">    specialinvoke $r3.&lt;nju.sa.example.MethodCall3AC: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line">    virtualinvoke $r3.&lt;nju.sa.example.MethodCall3AC: java.lang.String <span class="title function_">foo</span><span class="params">(java.lang.String, java.lang.String)</span>&gt;(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>invokespecial: call constructor, call superclass methods, call private methods</p>
<p>invokevirutal: instance methods call (virtual dispatch)</p>
<p>invokeinterface: cannot optimization，checking interface implementation</p>
<p>invokestatic: call static methods</p>
<p>Java 7: invokedynamic -&gt; Java static typing , dynamic language runs on JVM</p>
<p>method signature: class name, return type, method name(parameter types)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java Src</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class3AC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3AC(jimple)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">nju</span>.sa.examples.Class3AC <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> pi;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> &lt;init&gt;()</span><br><span class="line">	&#123;</span><br><span class="line">		nju.sa.examples.Class3AC r0;</span><br><span class="line">		r0 := <span class="meta">@this</span>: nju.sa.examples.Class3AC;</span><br><span class="line">		specialinvoke r0.&lt;java.lang.0bject: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">	&#123;</span><br><span class="line">		java.lang.String[] r0;</span><br><span class="line">		r0 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> &lt;clinit&gt;()</span><br><span class="line">	&#123;</span><br><span class="line">		&lt;nju.sa.examples.Class3AC: <span class="type">double</span> pi&gt; = <span class="number">3.14</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Static-Single-Assignment-SSA"><a href="#Static-Single-Assignment-SSA" class="headerlink" title="Static Single Assignment(SSA)"></a>Static Single Assignment(SSA)</h1><ul>
<li>All assignments in SSA are to variables with distinct names<ul>
<li>Give each definition a fresh name</li>
<li>Propagate fresh name to subsequent uses</li>
<li>Every variable has exactly on definition</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>3AC</th>
<th>SSA</th>
</tr>
</thead>
<tbody>
<tr>
<td>p = a + b</td>
<td>p1 = a + b</td>
</tr>
<tr>
<td>q = p - c</td>
<td>q1 = p1 - c</td>
</tr>
<tr>
<td>p = q * d</td>
<td>p2 = q1 * d</td>
</tr>
<tr>
<td>p = e - p</td>
<td>p3 = e - p2</td>
</tr>
<tr>
<td>q = p + q</td>
<td>q2 = p3 + q1</td>
</tr>
</tbody>
</table>
</div>
<p>What if a variable use is at control flow merges?</p>
<ul>
<li>A special merge operator,$\phi$ (called phi-function), is introduced to select the values at merge nodes</li>
<li>$\phi(x0, x1)$has the value x0 if the control flow passes through the true part of the conditional and the value x1 otherwise</li>
</ul>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/SSA.png" alt></p>
<p>Why SSA?</p>
<ul>
<li><p>Flow information is indirectly incorporated into the unique variable names</p>
<p>May help deliver some simpler analyses, e.g., flow-insensitive analysis gains partial precision of flow-sensitive analysis via SSA</p>
</li>
<li><p>Define-and-Use pairs are explicit</p>
<p>Enable more effective data facts storage and propagation in some on-demand tasks </p>
<p>Some optimization tasks perform better on SSA (e.g., conditional constant propagation, global value numbering)</p>
</li>
</ul>
<p>Why not SSA?</p>
<ul>
<li>may introduce too many variables and phi-functions</li>
<li>May introduce inefficiency problem when translating to machine code (due to copy operations）</li>
</ul>
<h1 id="Control-Flow-Analysis"><a href="#Control-Flow-Analysis" class="headerlink" title="Control Flow Analysis"></a>Control Flow Analysis</h1><ul>
<li>Usually refer to building Control Flow Graph (CFG) </li>
<li>CFG serves as the basic structure for static analysis </li>
<li>The node in CFG can be an individual 3-address instruction, or (usually) a Basic Block (BB)</li>
</ul>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/CFG.png" alt></p>
<h1 id="Basic-Blocks-BB"><a href="#Basic-Blocks-BB" class="headerlink" title="Basic Blocks(BB)"></a>Basic Blocks(BB)</h1><p>Basic block(BB) are maximal sequences of consecutive three-address instruction with theproperties that</p>
<ul>
<li>It can be entered only at the beginning, i.e., the first instruction in the block </li>
<li>It can be exited only at the end, i.e., the last instruction in the block</li>
</ul>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/BB.png" alt></p>
<h1 id="Design-the-algorithm-to-build-BBs"><a href="#Design-the-algorithm-to-build-BBs" class="headerlink" title="Design the algorithm to build BBs"></a>Design the algorithm to build BBs</h1><h2 id="How-to-build-Basic-Blocks"><a href="#How-to-build-Basic-Blocks" class="headerlink" title="How to build Basic Blocks?"></a>How to build Basic Blocks?</h2><p>INPUT: A sequence of three-address instructions of P </p>
<p>OUTPUT: A list of basic blocks of P </p>
<p>METHOD: </p>
<ol>
<li>Determine the leaders in P<ul>
<li>The first instruction in P is a leader</li>
<li>Any target instruction of a conditional or unconditional jump is a leader </li>
<li>Any instruction that immediately follows a conditional or unconditional jump is a leader</li>
</ul>
</li>
<li>Build BBs for P<ul>
<li>A BB consists of a leader and all its subsequent instructions until the next leader</li>
</ul>
</li>
</ol>
<p>Example: </p>
<p>Input: 3AC of P</p>
<ol>
<li>x = input</li>
<li>y = x - 1</li>
<li>z = x * y</li>
<li>if z &lt; x goto (7)</li>
<li>p = x / y</li>
<li>q = p + y</li>
<li>a = q</li>
<li>b = x + a</li>
<li>c = 2a - b</li>
<li>if p == q goto 12</li>
<li>goto 3</li>
<li>return </li>
</ol>
<p>Output: BBs of P</p>
<ol>
<li>Determine the leaders of P<ul>
<li>(1) (first instruction)</li>
<li>(3) (7) (12) (target instruction of a conditional or unconditional jump)</li>
<li>(5) (11) (12) (instruction that follows a conditional or unconditional jump)</li>
</ul>
</li>
<li>Build BBs of P<ul>
<li>B1 {(1), (2)}</li>
<li>B2 {(3), (4)}</li>
<li>B3 {(5), (6)}</li>
<li>B4 {(7), (8), (9), (10)}</li>
<li>B5 {(11)}</li>
<li>B6 {(12)}</li>
</ul>
</li>
</ol>
<h1 id="Control-Flow-Graph-CFG"><a href="#Control-Flow-Graph-CFG" class="headerlink" title="Control Flow Graph(CFG)"></a>Control Flow Graph(CFG)</h1><ul>
<li>The nodes of CFG are basic blocks</li>
<li>There is an edge from block A to block B if and only if<ul>
<li>There is a conditional or unconditional jump from the end of A to the beginning of B</li>
<li>B immediately follows A in the original order of instructions an A does not end in an unconditional jump</li>
</ul>
</li>
<li>It is normal to replace the jumps to instruction lables by jumps to basic blocks</li>
</ul>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/CFGedge.png" alt></p>
<p>So, we can get:</p>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/CFG2.png" alt></p>
<p>And Usually we add two nodes, Entry and Exit. </p>
<ul>
<li>They do not correspond to executable IR</li>
<li>A edge from Entry to the BB containing the first instruction of IR</li>
<li>A edge to Exit from any BB containing an instruction that could be the last instruction of IR</li>
</ul>
<p><img src="/2022/04/25/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B02-IntermediateRepresentation/CFG3.png" alt></p>
]]></content>
      <categories>
        <category>软件分析</category>
      </categories>
      <tags>
        <tag>静态分析</tag>
        <tag>Static Analysis</tag>
        <tag>IR</tag>
        <tag>3AC</tag>
        <tag>SSA</tag>
        <tag>Basic Block</tag>
      </tags>
  </entry>
  <entry>
    <title>南大《软件分析》03.Data Flow Analysis - Applications I</title>
    <url>/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是南京大学李樾、谭添老师的《软件分析》课程的笔记。内容来自课程ppt以及课程讲解。</p>
<blockquote>
<p>课程主页：<a href="https://tai-e.pascal-lab.net/lectures.html">Static Program Analysis | Tai-e (pascal-lab.net)</a></p>
<p>授课视频：<a href="https://www.bilibili.com/video/BV1b7411K7P4">视频南京大学《软件分析》课程01（Introduction）_哔哩哔哩_bilibili</a></p>
<p>课程实验repo：<a href="https://github.com/pascal-lab/Tai-e-assignments">pascal-lab/Tai-e-assignments: Tai-e assignments for static program analysis (github.com)</a></p>
</blockquote>
<h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><ol>
<li>Overview of Data Flow Analysis </li>
<li>Preliminaries of Data Flow Analysis </li>
<li>Reaching Definitions Analysis </li>
<li>Live Variables Analysis </li>
<li>Available Expressions Analysis</li>
</ol>
<span id="more"></span>
<h1 id="Overview-of-Data-Flow-Analysis"><a href="#Overview-of-Data-Flow-Analysis" class="headerlink" title="Overview of Data Flow Analysis"></a>Overview of Data Flow Analysis</h1><p>Data Flow Analysis -&gt; How Data flows on CFG?</p>
<p>-&gt; How application-specfific Data Flows through the Nodes(BBs/statements) and Edges(control flows) of CFG(a program)?</p>
<ul>
<li>application-specfific Data: Abstraction, + - 0 $\top$ $\bot$</li>
<li>Flows: Safe-approximation. For most stactic analyses are “may analysis”<ul>
<li>may analysis: outputs information that may be true (over-approximation)</li>
<li>must analysis: outputs information that must be true (under-approximation)</li>
<li>Over- and under-approximations are both for safety of analysis</li>
</ul>
</li>
<li>Nodes: Transfer function, e.g. (+) + (+) = (+)</li>
<li>Edges: Control-flow handing: Union the sign at merges</li>
</ul>
<p>different data-flow analysis applications have </p>
<p>different data abstraction and </p>
<p>different flow safe-approximation strategies, i.e., </p>
<p>different transfer functions and control-flow handlings</p>
<h1 id="Preliminaries-of-Data-Flow-Analysis"><a href="#Preliminaries-of-Data-Flow-Analysis" class="headerlink" title="Preliminaries of Data Flow Analysis"></a>Preliminaries of Data Flow Analysis</h1><h2 id="Input-and-Output-States"><a href="#Input-and-Output-States" class="headerlink" title="Input and Output States"></a>Input and Output States</h2><ul>
<li>Each execution of an IR statement transforms an input state to a new output state</li>
<li>The input(output) state is associated with program point before(after) the statement</li>
</ul>
<p><img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/IO.jpg" alt></p>
<p>In each data-flow analysis application, we associate with every program point ==a data-flow value== that represents an ==abstraction== of the set of all possible ==program states== that can be observed for that point.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = 10;</span><br><span class="line">point  -&gt;    x = +, y = undefine</span><br><span class="line">y = -1;</span><br><span class="line">point  -&gt;    x = +, y = -</span><br><span class="line">x = y;</span><br><span class="line">point  -&gt;    x = -, y = -</span><br><span class="line">x = x / y;</span><br><span class="line">point  -&gt;    x = +, y = -</span><br></pre></td></tr></table></figure>
<p>The set of possible data-flow values is the domain for this application(+ - 0 $\top$ $\bot$)</p>
<p>Data-flow analysis is to ==find a solution== to a set of ==safe-approximation directed constraints== on the IN[s]’s and OUT[s]’s, for all statements s. </p>
<ul>
<li>constraints based on semantics of statements (transfer functions) </li>
<li>constraints based on the flows of control</li>
</ul>
<h2 id="Notations-for-Transfer-Function’s-Constraints"><a href="#Notations-for-Transfer-Function’s-Constraints" class="headerlink" title="Notations for Transfer Function’s Constraints"></a>Notations for Transfer Function’s Constraints</h2><ul>
<li>Forward Analysis: $OUT[s] = f_s(IN[s])$</li>
<li>Backward Analysis: $IN[s] = f_s(OUT[s])$</li>
</ul>
<h2 id="Notations-for-Control-Flow’s-Constraints"><a href="#Notations-for-Control-Flow’s-Constraints" class="headerlink" title="Notations for Control Flow’s Constraints"></a>Notations for Control Flow’s Constraints</h2><ul>
<li><p>Control flow within a BB: $In[s_{i+1}] = OUT[s_i], for ~all~i = 1,2,…n-1$</p>
</li>
<li><p>Control flow among BBs:</p>
<p>$IN[B]=IN[s_1]$ </p>
<p>$OUT[B]=OUT[s_n]$</p>
<ul>
<li><p>Forward:</p>
<p>$OUT[B]=f<em>B(IN[B]),f_B=f</em>{s<em>n}\circ …\circ f</em>{s<em>2} \circ f</em>{s_1}$</p>
<p>$IN[B]=\wedge P_{~a~predecessor of B}~OUT[P]$</p>
</li>
<li><p>Backward:</p>
<p>$IN[B]=f<em>B(OUT[B]),f_B=f</em>{s<em>1}\circ f</em>{s<em>2} \circ …\circ f</em>{s_n}$</p>
<p>$OUT[B]=\wedge S_{~a~successor of B}~IN[S]$</p>
</li>
</ul>
</li>
</ul>
<p>The meet operator $\wedge$ is used to summarize the contributions from different paths at the confluence of those paths</p>
<p>Issues Not Covered:</p>
<ul>
<li>Method Calls<ul>
<li>Intra-procedural CFG</li>
<li>Will be introduced in lecture: Inter-procedural Analysis</li>
</ul>
</li>
<li>Aliases<ul>
<li>Variables have no aliases</li>
<li>Will be introduced in lecture: Pointer Analysis</li>
</ul>
</li>
</ul>
<h1 id="Reaching-Definitions-Analysis"><a href="#Reaching-Definitions-Analysis" class="headerlink" title="Reaching Definitions Analysis"></a>Reaching Definitions Analysis</h1><h2 id="Reaching-Definition"><a href="#Reaching-Definition" class="headerlink" title="Reaching Definition"></a>Reaching Definition</h2><p>A ==definition d== at program point p ==reaches== a point q if there is a path from p to q such that ==d== is not “killed” along that path.</p>
<ul>
<li><p>A definition of a variable v is a statement that assigns a value to v</p>
</li>
<li><p>Translated as: definition of variable v at program point p reaches point q if there is a path from p to q such that no new definition of v appears on that path</p>
<p><img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/ReachingDefinitions.jpg" alt></p>
</li>
</ul>
<ul>
<li>Reaching definitions can be used to ==detect possible undefined variables==. e.g., introduce a dummy definition for each variable v at the entry of CFG, and if th e dummy definition of v reaches a point p where v is used, then v may be used before definition (as undefined reaches v)</li>
</ul>
<h2 id="Understanding-Reaching-Definitions"><a href="#Understanding-Reaching-Definitions" class="headerlink" title="Understanding Reaching Definitions"></a>Understanding Reaching Definitions</h2><p>Abstraction:</p>
<ul>
<li><p>Data Flow Values/Facts</p>
<ul>
<li><p>The definition of all the variables in a program</p>
</li>
<li><p>Can be represented by bit vectors</p>
<p>e.g., D1, D2, D3, D4, …, D100 (100 efinitions)</p>
<p>$\underbrace{0000…0}_{100}$</p>
<p>Bit i from the left represents definition Di</p>
</li>
</ul>
</li>
</ul>
<p>Safe-approximation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D: v = x op y</span><br></pre></td></tr></table></figure>
<p>This statement “generates” a definition D of variable v and “kills” all the other definitions in the program that define variable v, while leaving the remaining incoming definition unaffected.</p>
<ul>
<li><p>Transfer Function</p>
<p>$OUT[B] = gen_B\cup(IN[B] - kill_B)$</p>
<p><img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/Transfer Function.jpg" alt></p>
</li>
<li><p>Control Flow</p>
<p>$IN[B]=\cup P_{~a~predecessor of B}~OUT[P]$</p>
</li>
</ul>
<h2 id="Algorithm-of-Reaching-Definitions-Analysis"><a href="#Algorithm-of-Reaching-Definitions-Analysis" class="headerlink" title="Algorithm of Reaching Definitions Analysis"></a>Algorithm of Reaching Definitions Analysis</h2><p>INPUT: CFG($kill_B$ and $gen_B$ computed for each basic block B)</p>
<p>OUTPUT: $IN[B]$ and$OUT[B]$ for each basic block B</p>
<p>METHOD:<img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/Algorithm.jpg" alt></p>
<p>解释：</p>
<ol>
<li><p>$OUT[entry]=\phi$含义: </p>
<p>entre没有statements 和 definition</p>
</li>
<li><p>for中each basic block $B\entry$和第一行的$OUT[entry]=\phi$ 为什么不合并？</p>
<p>这是经典的模板算法，并非只对Reaching Definition适用。</p>
</li>
<li><p>for中 $OUT[B]=\phi$ ?</p>
<p>may analysis一般为空</p>
<p>must analysis一般为top($\top$)</p>
</li>
<li><p>为什么这个算法最终可以停止？</p>
</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/Eaxmple.jpg" alt></p>
<h3 id="Iteration-0-Init"><a href="#Iteration-0-Init" class="headerlink" title="Iteration 0(Init)"></a>Iteration 0(Init)</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Input</th>
<th style="text-align:center">gen</th>
<th style="text-align:center">kill</th>
<th style="text-align:center">Output</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">entry</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0000 0000</td>
</tr>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0000 0000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0000 0000</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0000 0000</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0000 0000</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0000 0000</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/Init.jpg" alt></p>
<h3 id="Iteration-1"><a href="#Iteration-1" class="headerlink" title="Iteration  1"></a>Iteration  1</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Input</th>
<th style="text-align:center">gen</th>
<th style="text-align:center">kill</th>
<th style="text-align:center">Output</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center">0000 0000</td>
<td style="text-align:center">D1 D2</td>
<td style="text-align:center">D4 D5</td>
<td style="text-align:center">1100 0000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center">0000 0000(O[B4]) U 1100 0000(O[B1])</td>
<td style="text-align:center">D3 D4</td>
<td style="text-align:center">D2</td>
<td style="text-align:center">1011 0000</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center">1011 0000</td>
<td style="text-align:center">D7</td>
<td style="text-align:center">D1 D5</td>
<td style="text-align:center">0011 0010</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center">1011 0000</td>
<td style="text-align:center">D5 D6</td>
<td style="text-align:center">D1 D8</td>
<td style="text-align:center">0011 1100</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center">0011 0010(O[B4]) U 0011 1100(O[B3])</td>
<td style="text-align:center">D8</td>
<td style="text-align:center">D6</td>
<td style="text-align:center">0011 1011</td>
</tr>
</tbody>
</table>
</div>
<p>Changes occur in OUT[] of B1,B2,B3,B4,B5</p>
<p><img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/Iteration1.jpg" alt></p>
<h3 id="Iteration-2"><a href="#Iteration-2" class="headerlink" title="Iteration 2"></a>Iteration 2</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Input</th>
<th style="text-align:center">gen</th>
<th style="text-align:center">kill</th>
<th style="text-align:center">Output</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center">0000 0000</td>
<td style="text-align:center">D1 D2</td>
<td style="text-align:center">D4 D5</td>
<td style="text-align:center">1100 0000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center">0011 1100(O[B4]) U 1100 0000(O[B1])</td>
<td style="text-align:center">D3 D4</td>
<td style="text-align:center">D2</td>
<td style="text-align:center">1011 1100</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center">1011 1100</td>
<td style="text-align:center">D7</td>
<td style="text-align:center">D1 D5</td>
<td style="text-align:center">0011 0110</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center">1011 1100</td>
<td style="text-align:center">D5 D6</td>
<td style="text-align:center">D1 D8</td>
<td style="text-align:center">0011 1100</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center">0011 1100 U 0011 0110</td>
<td style="text-align:center">D8</td>
<td style="text-align:center">D6</td>
<td style="text-align:center">0011 1011</td>
</tr>
</tbody>
</table>
</div>
<p>Changes occur in OUT[] of B2 B3</p>
<p><img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/Iteration2.jpg" alt></p>
<h3 id="Iteration-3"><a href="#Iteration-3" class="headerlink" title="Iteration 3"></a>Iteration 3</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Input</th>
<th style="text-align:center">gen</th>
<th style="text-align:center">kill</th>
<th style="text-align:center">Output</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center">0000 0000</td>
<td style="text-align:center">D1 D2</td>
<td style="text-align:center">D4 D5</td>
<td style="text-align:center">1100 0000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center">0011 1100(O[B4]) U 1100 0000(O[B1])</td>
<td style="text-align:center">D3 D4</td>
<td style="text-align:center">D2</td>
<td style="text-align:center">1011 1100</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center">1011 1100</td>
<td style="text-align:center">D7</td>
<td style="text-align:center">D1 D5</td>
<td style="text-align:center">0011 0110</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center">1011 1100</td>
<td style="text-align:center">D5 D6</td>
<td style="text-align:center">D1 D8</td>
<td style="text-align:center">0011 1100</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center">0011 1100 U 0011 0110</td>
<td style="text-align:center">D8</td>
<td style="text-align:center">D6</td>
<td style="text-align:center">0011 1011</td>
</tr>
</tbody>
</table>
</div>
<p>No changes occur in any OUT[]. We get the final analysis result.</p>
<p><img src="/2022/04/26/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B03-DataFlowAnalysis1/Iteration3.jpg" alt></p>
<h2 id="Why-this-iterative-can-finally-algorithm-stop"><a href="#Why-this-iterative-can-finally-algorithm-stop" class="headerlink" title="Why this iterative can finally algorithm stop?"></a>Why this iterative can finally algorithm stop?</h2><p>$OUT[S] = gen_S U (IN[S] - kill_S)$;</p>
<ul>
<li>$gen_S$ and $kill_S$ remain unchanged</li>
<li>When more facts flow in $IN[S]$, the “more facts” either<ul>
<li>is killed, or</li>
<li>flows to $OUT<a href="survivor_S">S</a>$</li>
</ul>
</li>
<li>When a fact is added to $OUT[S]$, through either $gen_S$, or $survivor_S$ , it stays there forever</li>
<li>Thus $OUT[S]$ never shrinks(e.g., 0 -&gt; 1, or 1 -&gt; 1)</li>
<li>As the set of facts is finite (e.g., all definitions in the program), there must exist a pass of iteration during which nothing is added to any OUT, and then the algorithm terminates</li>
</ul>
<h2 id="Safe-to-terminate-by-this-condition"><a href="#Safe-to-terminate-by-this-condition" class="headerlink" title="Safe to terminate by this condition?"></a>Safe to terminate by this condition?</h2><ul>
<li>IN’s will not change if OUT’s do not change</li>
<li>OUT’s will not change if IN’s do not change</li>
<li>Reach a fixed point. Also related with monotonicity(next lectures)</li>
</ul>
]]></content>
      <categories>
        <category>软件分析</category>
      </categories>
      <tags>
        <tag>静态分析</tag>
        <tag>Static Analysis</tag>
        <tag>Data Flow Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>南大《软件分析》04.Data Flow Analysis - Applications II</title>
    <url>/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是南京大学李樾、谭添老师的《软件分析》课程的笔记。内容来自课程ppt以及课程讲解。</p>
<blockquote>
<p>课程主页：<a href="https://tai-e.pascal-lab.net/lectures.html">Static Program Analysis | Tai-e (pascal-lab.net)</a></p>
<p>授课视频：<a href="https://www.bilibili.com/video/BV1b7411K7P4">视频南京大学《软件分析》课程01（Introduction）_哔哩哔哩_bilibili</a></p>
<p>课程实验repo：<a href="https://github.com/pascal-lab/Tai-e-assignments">pascal-lab/Tai-e-assignments: Tai-e assignments for static program analysis (github.com)</a></p>
</blockquote>
<h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><ol>
<li>Overview of Data Flow Analysis </li>
<li>Preliminaries of Data Flow Analysis </li>
<li>Reaching Definitions Analysis </li>
<li>Live Variables Analysis </li>
<li>Available Expressions Analysis</li>
</ol>
<span id="more"></span>
<h1 id="Live-Variables-Analysis"><a href="#Live-Variables-Analysis" class="headerlink" title="Live Variables Analysis"></a>Live Variables Analysis</h1><h2 id="Live-Variables-Analysis-1"><a href="#Live-Variables-Analysis-1" class="headerlink" title="Live Variables Analysis"></a>Live Variables Analysis</h2><p>Live variables analysis tells whether the value of variable v at program point p could be used along some path in CFG starting at p. If so, v is live at p; otherwise, v is dead at p.</p>
<ul>
<li>Information of live variables can be used for register allocations. e.g., at some point all registers are full and we need to use one, then we should favor using a register with a dead value.</li>
</ul>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/LiveVariablesAnalysis.jpg" alt></p>
<h2 id="Understanding-Live-Variables-Analysis"><a href="#Understanding-Live-Variables-Analysis" class="headerlink" title="Understanding Live Variables Analysis"></a>Understanding Live Variables Analysis</h2><p>Abstraction</p>
<ul>
<li><p>Data Flow Values/Facts</p>
<ul>
<li><p>All the variables in a program</p>
</li>
<li><p>Can be represented by bit vertors</p>
<p>e.g., V1, V2, V3, V4, …, V100(100 variables)</p>
<p>$\underbrace{0000…0}_{100}$</p>
<p>Bit i from the left represents variable Vi</p>
</li>
</ul>
</li>
</ul>
<p>Safe-approximation</p>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/TransferFunction.png" alt></p>
<h2 id="Algorithm-of-Live-Variables-Analysis"><a href="#Algorithm-of-Live-Variables-Analysis" class="headerlink" title="Algorithm of Live Variables Analysis"></a>Algorithm of Live Variables Analysis</h2><p>INPUT: CFG（$def_B$ and $use_B$ computed for each basic block B）</p>
<p>OUTPUT: $IN[B]$ and $OUT[B]$ for each basic block B</p>
<p>METHOD: <img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Algorithm.jpg" alt></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Example.jpg" alt></p>
<h3 id="Iteration-0-Init"><a href="#Iteration-0-Init" class="headerlink" title="Iteration 0(Init)"></a>Iteration 0(Init)</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">OUTPUT</th>
<th style="text-align:center">use</th>
<th style="text-align:center">def</th>
<th style="text-align:center">INPUT</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">exit</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Init.jpg" alt></p>
<h3 id="Iteration-1"><a href="#Iteration-1" class="headerlink" title="Iteration 1"></a>Iteration 1</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">OUTPUT</th>
<th style="text-align:center">use</th>
<th style="text-align:center">def</th>
<th style="text-align:center">INPUT</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">exit</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center">000 0000</td>
<td style="text-align:center">p</td>
<td style="text-align:center">z</td>
<td style="text-align:center">000 1000</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center">000 0000 U 000 1000</td>
<td style="text-align:center">y</td>
<td style="text-align:center">x q</td>
<td style="text-align:center">010 1000</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center">000 1000</td>
<td style="text-align:center">x</td>
<td style="text-align:center"></td>
<td style="text-align:center">100 1000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center">010 1000 U 100 1000</td>
<td style="text-align:center">k</td>
<td style="text-align:center">m y</td>
<td style="text-align:center">100 1001</td>
</tr>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center">100 1001</td>
<td style="text-align:center">p q z</td>
<td style="text-align:center">y x</td>
<td style="text-align:center">001 1101</td>
</tr>
</tbody>
</table>
</div>
<p>Changes occur in IN[] of B1, B2, B3, B4, B5</p>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Iteration1.jpg" alt></p>
<h3 id="Iteration-2"><a href="#Iteration-2" class="headerlink" title="Iteration 2"></a>Iteration 2</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">OUTPUT</th>
<th style="text-align:center">use</th>
<th style="text-align:center">def</th>
<th style="text-align:center">INPUT</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">exit</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center">000 0000</td>
<td style="text-align:center">p</td>
<td style="text-align:center">z</td>
<td style="text-align:center">000 1000</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center">100 1001 U 000 1000</td>
<td style="text-align:center">y</td>
<td style="text-align:center">x q</td>
<td style="text-align:center">010 1001</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center">000 1000</td>
<td style="text-align:center">x</td>
<td style="text-align:center"></td>
<td style="text-align:center">100 1000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center">010 1001 U 100 1000</td>
<td style="text-align:center">k</td>
<td style="text-align:center">m y</td>
<td style="text-align:center">100 1001</td>
</tr>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center">100 1001</td>
<td style="text-align:center">p q z</td>
<td style="text-align:center">y x</td>
<td style="text-align:center">001 1101</td>
</tr>
</tbody>
</table>
</div>
<p>Changes orrcur in IN[] of B4</p>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Iteration2.jpg" alt></p>
<h3 id="Iteration-3"><a href="#Iteration-3" class="headerlink" title="Iteration 3"></a>Iteration 3</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">OUTPUT</th>
<th style="text-align:center">use</th>
<th style="text-align:center">def</th>
<th style="text-align:center">INPUT</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">exit</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">000 0000</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center">000 0000</td>
<td style="text-align:center">p</td>
<td style="text-align:center">z</td>
<td style="text-align:center">000 1000</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center">100 1001 U 000 1000</td>
<td style="text-align:center">y</td>
<td style="text-align:center">x q</td>
<td style="text-align:center">010 1001</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center">000 1000</td>
<td style="text-align:center">x</td>
<td style="text-align:center"></td>
<td style="text-align:center">100 1000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center">010 1001 U 100 1000</td>
<td style="text-align:center">k</td>
<td style="text-align:center">m y</td>
<td style="text-align:center">100 1001</td>
</tr>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center">100 1001</td>
<td style="text-align:center">p q z</td>
<td style="text-align:center">y x</td>
<td style="text-align:center">001 1101</td>
</tr>
</tbody>
</table>
</div>
<p>No changes occur in any IN[]</p>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Iteration3.jpg" alt></p>
<h1 id="Avaliable-Expression-Analysis"><a href="#Avaliable-Expression-Analysis" class="headerlink" title="Avaliable Expression Analysis"></a>Avaliable Expression Analysis</h1><h2 id="Avaliable-Expression-Analysis-1"><a href="#Avaliable-Expression-Analysis-1" class="headerlink" title="Avaliable Expression Analysis"></a>Avaliable Expression Analysis</h2><p>An expression x op y is available at program point p if (1) all paths from the entry to p must pass through the evaluation of x op y, and (2) after the last evaluation of x op y, there is no redefinition of x or y</p>
<ul>
<li>This definition means at program p, we can replace expression x op y by the result of its last evaluation</li>
<li>The information of available expressions can be used for detecting global common subexpressions</li>
</ul>
<h2 id="Understanding-Avaliable-Expression-Analysis"><a href="#Understanding-Avaliable-Expression-Analysis" class="headerlink" title="Understanding Avaliable Expression Analysis"></a>Understanding Avaliable Expression Analysis</h2><p>Abstraction</p>
<ul>
<li><p>Data Flow Values/Facts </p>
<ul>
<li><p>All the expressions in a program</p>
</li>
<li><p>Can be represented by bit vectors </p>
<p>e.g., E1, E2, E3, E4, …, E100 (100 expressions)</p>
<p>$\underbrace{0000…0}_{100}$</p>
<p>Bit i from the left represents expression Ei</p>
</li>
</ul>
</li>
</ul>
<p>Safe-approximation</p>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Safe-approximation.png" alt></p>
<ul>
<li>Add to OUT the expression x op y(gen)</li>
<li>Delete from IN any expression involving variable a(kill)</li>
</ul>
<p>$OUT[B] = gen_B \cup(IN[B] - kill_B)$</p>
<p>$IN[B] = \cap_{P~a~predecessor~of~B }OUT[P]$</p>
<p>$\cap$ : All paths from entry to point p must pass through the evaluation of x op y</p>
<p>For safety of the analysis, it may report an expression as unavailable even if it is availabe(must analysis -&gt; under-approximation)</p>
<h2 id="Algorithm-of-Avaliable-Expressions-Analysis"><a href="#Algorithm-of-Avaliable-Expressions-Analysis" class="headerlink" title="Algorithm of Avaliable Expressions Analysis"></a>Algorithm of Avaliable Expressions Analysis</h2><p>INPUT: CFG($kill_B$ and $gen_B$ computed for each basic block B)</p>
<p>OUTPUT: IN[B] and OUT[B] for each basic block B</p>
<p>METHOD:<img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Algorithm2.png" alt></p>
<h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><h3 id="Iteration-0-Init-1"><a href="#Iteration-0-Init-1" class="headerlink" title="Iteration 0(Init)"></a>Iteration 0(Init)</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">INPUT</th>
<th style="text-align:center">gen</th>
<th style="text-align:center">kill</th>
<th style="text-align:center">OUTPUT</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">entry</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">00000</td>
</tr>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">11111</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">11111</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">11111</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">11111</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">11111</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Init2.jpg" alt></p>
<h3 id="Iteration-1-1"><a href="#Iteration-1-1" class="headerlink" title="Iteration 1"></a>Iteration 1</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">INPUT</th>
<th style="text-align:center">gen</th>
<th style="text-align:center">kill</th>
<th style="text-align:center">OUTPUT</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">entry</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">00000</td>
</tr>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">p-1</td>
<td style="text-align:center">y</td>
<td style="text-align:center">10000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center">11111 $\cap$ 10000</td>
<td style="text-align:center">z/5  $e^7*x$</td>
<td style="text-align:center">k,p</td>
<td style="text-align:center">01010</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center">01010</td>
<td style="text-align:center">y + 3</td>
<td style="text-align:center">z</td>
<td style="text-align:center">00011</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center">01010</td>
<td style="text-align:center">2*y $e^7*x$</td>
<td style="text-align:center">x q</td>
<td style="text-align:center">01110</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center">00011 $\cap$ 01110</td>
<td style="text-align:center">$e^7*x$ z/5</td>
<td style="text-align:center">m y</td>
<td style="text-align:center">01010</td>
</tr>
</tbody>
</table>
</div>
<p>Changes occur in OUT[] of B1 B2 B3 B4 B5</p>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Iteration1_2.jpg" alt></p>
<h3 id="Iteration-2-1"><a href="#Iteration-2-1" class="headerlink" title="Iteration 2"></a>Iteration 2</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">INPUT</th>
<th style="text-align:center">gen</th>
<th style="text-align:center">kill</th>
<th style="text-align:center">OUTPUT</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">entry</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">00000</td>
</tr>
<tr>
<td style="text-align:center">B1</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">p-1</td>
<td style="text-align:center">y</td>
<td style="text-align:center">10000</td>
</tr>
<tr>
<td style="text-align:center">B2</td>
<td style="text-align:center">01110 $\cap$ 10000</td>
<td style="text-align:center">z/5  $e^7*x$</td>
<td style="text-align:center">k,p</td>
<td style="text-align:center">01010</td>
</tr>
<tr>
<td style="text-align:center">B3</td>
<td style="text-align:center">01010</td>
<td style="text-align:center">y + 3</td>
<td style="text-align:center">z</td>
<td style="text-align:center">00011</td>
</tr>
<tr>
<td style="text-align:center">B4</td>
<td style="text-align:center">01010</td>
<td style="text-align:center">2*y $e^7*x$</td>
<td style="text-align:center">x q</td>
<td style="text-align:center">01110</td>
</tr>
<tr>
<td style="text-align:center">B5</td>
<td style="text-align:center">00011 $\cap$ 01110</td>
<td style="text-align:center">$e^7*x$ z/5</td>
<td style="text-align:center">m y</td>
<td style="text-align:center">01010</td>
</tr>
</tbody>
</table>
</div>
<p>No changes occur in any OUT[]</p>
<p><img src="/2022/04/27/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B04-DataFlowAnalysis2/Iteration2_2.jpg" alt></p>
<h1 id="Analysis-Comparison"><a href="#Analysis-Comparison" class="headerlink" title="Analysis Comparison"></a>Analysis Comparison</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Reaching Definitions</th>
<th style="text-align:center">Live Variables</th>
<th style="text-align:center">Available Expressions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Domain</td>
<td style="text-align:center">Set of definitions</td>
<td style="text-align:center">Set of variables</td>
<td style="text-align:center">Set of expressions</td>
</tr>
<tr>
<td style="text-align:center">Direction</td>
<td style="text-align:center">Forwards</td>
<td style="text-align:center">Backwards</td>
<td style="text-align:center">Forwards</td>
</tr>
<tr>
<td style="text-align:center">Mat/Must</td>
<td style="text-align:center">May</td>
<td style="text-align:center">May</td>
<td style="text-align:center">Must</td>
</tr>
<tr>
<td style="text-align:center">Boundary</td>
<td style="text-align:center">$OUT[entry]=\phi$</td>
<td style="text-align:center">$IN[exit]=\phi$</td>
<td style="text-align:center">$OUT[entry]=\phi$</td>
</tr>
<tr>
<td style="text-align:center">Initialization</td>
<td style="text-align:center">$OUT[B]=\phi$</td>
<td style="text-align:center">$IN[B]=\phi$</td>
<td style="text-align:center">$OUT[B]=\cup$</td>
</tr>
<tr>
<td style="text-align:center">Transfer function</td>
<td style="text-align:center">$OUT=gen\cup(IN-kill)$</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">Meet</td>
<td style="text-align:center">$\cup$</td>
<td style="text-align:center">$\cup$</td>
<td style="text-align:center">$\cap$</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>软件分析</category>
      </categories>
      <tags>
        <tag>静态分析</tag>
        <tag>Static Analysis</tag>
        <tag>Data Flow Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>南大《软件分析》05.Data Flow Analysis Foundation I</title>
    <url>/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是南京大学李樾、谭添老师的《软件分析》课程的笔记。内容来自课程ppt以及课程讲解。</p>
<blockquote>
<p>课程主页：<a href="https://tai-e.pascal-lab.net/lectures.html">Static Program Analysis | Tai-e (pascal-lab.net)</a></p>
<p>授课视频：<a href="https://www.bilibili.com/video/BV1b7411K7P4">视频南京大学《软件分析》课程01（Introduction）_哔哩哔哩_bilibili</a></p>
<p>课程实验repo：<a href="https://github.com/pascal-lab/Tai-e-assignments">pascal-lab/Tai-e-assignments: Tai-e assignments for static program analysis (github.com)</a></p>
</blockquote>
<h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><ol>
<li>Iterative Algorithm, Another View</li>
<li>Partial Order</li>
<li>Upper and Lower Bounds</li>
<li>Lattice, Semilattice, Complete and Product Lattice </li>
<li>Data Flow Analysis Framework via Lattice</li>
<li>Monotonicity and Fixed Point Theorem</li>
<li>Relate Iterative Algorithm to Fixed Point Theorem</li>
<li>May/Must Analysis, A Lattice View</li>
<li>MOP and Distributivity</li>
<li>Constant Propagation</li>
<li>Worklist Algorithm</li>
</ol>
<span id="more"></span>
<h1 id="Iterative-Algorithm-Anthor-View"><a href="#Iterative-Algorithm-Anthor-View" class="headerlink" title="Iterative Algorithm, Anthor View"></a>Iterative Algorithm, Anthor View</h1><ul>
<li><p>Given a CFG (program) with k nodes, the iterative algorithm updates OUT[n] for every node n in each iteration. </p>
</li>
<li><p>Assume the domain of the values in data flow analysis is V, then we can define a k-tuple</p>
<p>$(OUT[n_1], OUT[n_2], …, OUT[n_k])$</p>
<p>as an element of set $(V_1 × V_2 × … × V_3)$denoted as $V^k$ , to hold the values of the analysis after each iteration</p>
</li>
<li><p>Each iteration can be considered as taking an action to map an element of Vk to a new element of Vk , through applying the transfer functions and control-flow handing, abstracted as a function$F: V^k \rightarrow V^k$</p>
</li>
<li><p>Then the algorithm outputs a series of k-tuples iteratively until a k-tuple is the same as the last one in two consecutive iterations</p>
</li>
</ul>
<p>Given a CFG (program) with $k$ nodes, the iterative algorithm updates $OUT[n]$ for every node n in each iteration.</p>
<p>Each iteration takes an action$F: V^k \rightarrow V^k$</p>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/IterationAlgorithm.jpg" alt></p>
<ul>
<li>init → $(\bot, \bot …, \bot) = X_0$</li>
<li>iter 1 → $(v_1^1, v_2^1, …, v_k^1) = X_1 = F(X_0)$</li>
<li>iter 2 → $(v_1^2, v_2^2, …, v_k^2) = X_2 = F(X_1)$</li>
<li>…</li>
<li>iter i → $(v<em>1^i, v_2^i, …, v_k^i) = X_i = F(X</em>{i-1})\because X<em>i=X</em>{i+1}$ </li>
<li>iter i+1 → $(v<em>1^i, v_2^i, …, v_k^i) = X</em>{i+1} = F(X<em>{i})\therefore X_i=X</em>{i+1}=F(X_i)$</li>
</ul>
<p>X is a fied of function F if $X=F(X)$</p>
<p>The iterative algorithm reaches a fixed point</p>
<p>The iterative algorithm (or the IN/OUT equation system) produces a solution to a data flow analysis</p>
<ul>
<li>Is the algorithm guaranteed to terminate or reach the fixed point, or does it always have a solution?</li>
<li>If so, is there only one solution or only one fixed point? If more than one, is our solution the best one (most precise)?</li>
<li>When will the algorithm reach the fixed point, or when can we get the solution?</li>
</ul>
<h1 id="Partial-Order"><a href="#Partial-Order" class="headerlink" title="Partial Order"></a>Partial Order</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>We define poset as a pair (P, ⊑) where ⊑ is a binary relation that defines a partial ordering over P, and ⊑ has the following properties:</p>
<ol>
<li>∀x ∈ P, x ⊑ x (Reflexivity)</li>
<li>∀x, y ∈ P, x ⊑ y ∧ y ⊑ x ⟹ x = y (Antisymmetry)</li>
<li>∀x, y, z ∈ P, x ⊑ y ∧ y ⊑ z ⟹ x ⊑ z (Transitivity)</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>Is (S, ⊑) a poset where S is a set of integers and ⊑ represents ≤ (less than or equal to)?</p>
<ol>
<li>Reflexivity 1 ≤ 1， 2 ≤ 2 √</li>
<li>Antisymmetry x ≤ y ∧ y ≤ x then x = y  √</li>
<li>Transitivity 1 ≤ 2 ∧ 2 ≤ 3 then 1 ≤ 3  √</li>
</ol>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Is (S, ⊑) a poset where S is a set of integers and ⊑ represents &lt; (less than)?</p>
<p>(1) Reflexivity 1 &lt; 1, 2&lt; 2  ×</p>
<h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><p>Is (S, ⊑) a poset where S is a set of English words and ⊑ represents the substring relation, i.e., s1 ⊑ s2 means s1 is a substring of s2?</p>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/StringExample.jpg" alt></p>
<ol>
<li>Reflexivity √</li>
<li>Antisymmetry √</li>
<li>Transitivity √</li>
</ol>
<h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h3><p> Is (S, ⊑) a poset where S is the power set of set {a,b,c} and ⊑ represents ⊆ (subset)?</p>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/SubSetExample.jpg" alt></p>
<ol>
<li>Reflexivity √</li>
<li>Antisymmetry √</li>
<li>Transitivity √</li>
</ol>
<h1 id="Upper-and-Lower-Bounds"><a href="#Upper-and-Lower-Bounds" class="headerlink" title="Upper and Lower Bounds"></a>Upper and Lower Bounds</h1><p>Given a poset (P, ⊑) and its subset S that S ⊆ P, we say that u ∈ P is an upper bound of S, if ∀x ∈ S, x ⊑ u. Similarly, l ∈ P is an lower bound of S, if ∀x ∈ S, l ⊑ x.</p>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/UPandLowBound.png" alt></p>
<p>We define the least upper bound (lub or join) of S, written ⊔S, if for every upper bound of S, say u, ⊔S ⊑ u. Similarly, We define the greatest lower bound (glb, or meet) of S, written ⊓S, if for every lower bound of S, say l, l ⊑ ⊓S.</p>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/LubGlb.png" alt></p>
<p>Usually, if S contains only two elements a and b (S = {a, b}), then ⊔S can be written a ⊔ b (the join of a and b) ⊓S can be written a ⊓ b (the meet of a and b)</p>
<h2 id="Some-Properties"><a href="#Some-Properties" class="headerlink" title="Some Properties"></a>Some Properties</h2><ul>
<li><p>Not every poset has lub or glb</p>
</li>
<li><p>But if a poset has lub or glb, it will be unique</p>
<p>Proof:</p>
<p>assume g1 and g2 are both glbs of poset P </p>
<p>according to the definition of glb </p>
<p>g1 ⊑ (g2 = ⊓P) and g2 ⊑ (g1 = ⊓P) </p>
<p>by the antisymmetry of partial order ⊑ </p>
<p>g1 = g2</p>
</li>
</ul>
<h1 id="Lattice-Semilattice-Complete-and-Product-Lattice"><a href="#Lattice-Semilattice-Complete-and-Product-Lattice" class="headerlink" title="Lattice, Semilattice, Complete and Product Lattice"></a>Lattice, Semilattice, Complete and Product Lattice</h1><h2 id="Lattice"><a href="#Lattice" class="headerlink" title="Lattice"></a>Lattice</h2><p>Given a poset (P, ⊑), ∀a, b ∈ P, if a ⊔ b and a ⊓ b exist, then (P, ⊑) is called a lattice</p>
<p>A poset is a lattice if every pair of its elements has a least upper bound and a greatest lower bound</p>
<h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><h4 id="Example-1-1"><a href="#Example-1-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Is (S, ⊑) a lattice where S is a set of integers and ⊑ represents ≤ (less than or equal to)?</p>
<p>The ⊔ operator means “max” and ⊓ operator means “min” √</p>
<h4 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2"></a>Example 2</h4><p>s (S, ⊑) a lattice where S is a set of English words and ⊑ represents the substring relation, i.e., s1 ⊑ s2 means s1 is a substring of s2?</p>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/StringExample.jpg" alt></p>
<p>pin ⊔ sin = ? ×</p>
<h4 id="Example-3-1"><a href="#Example-3-1" class="headerlink" title="Example 3"></a>Example 3</h4><p> Is (S, ⊑) a lattice where S is the power set of set {a,b,c} and ⊑ represents ⊆ (subset)?</p>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/SubSetExample.jpg" alt></p>
<p>The ⊔ operator means ∪ and ⊓ operator means ∩ √</p>
<h2 id="Semilattice"><a href="#Semilattice" class="headerlink" title="Semilattice"></a>Semilattice</h2><p>Given a poset (P, ⊑), ∀a, b ∈ P, if only a ⊔ b exists, then (P, ⊑) is called a join semilattice if only a ⊓ b exists, then (P, ⊑) is called a meet semilattice</p>
<h2 id="Complete-Lattice"><a href="#Complete-Lattice" class="headerlink" title="Complete Lattice"></a>Complete Lattice</h2><p>Given a lattice (P, ⊑), for arbitrary subset S of P, if ⊔S and ⊓S exist, then (P, ⊑) is called a complete lattice</p>
<p>All subsets of a lattice have a least upper bound and a greatest lower bound</p>
<h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1-2"><a href="#Example-1-2" class="headerlink" title="Example 1"></a>Example 1</h3><p>Is (S, ⊑) a complete lattice where S is a set of integers and ⊑ represents ≤ (less than or equal to)?</p>
<p>For a subset $S^+$ including all positive integers, it has no ⊔$S^+$ (+∞)</p>
<h3 id="Example-2-2"><a href="#Example-2-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Is (S, ⊑) a complete lattice where S is the power set of set {a,b,c} and ⊑ represents ⊆ (subset)?</p>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/SubSetExample.jpg" alt></p>
<p>√</p>
<p>Note: the definition of bounds implies that the bounds are not necessarily in the subsets (but they must be in the lattice)</p>
<p>Every complete lattice (P, ⊑) has a greatest element = ⊔P called top and a least element ⊥ = ⊓P called bottom</p>
<p>Every finite lattice (P is finite) is a complete lattice</p>
<h2 id="Product-Lattice"><a href="#Product-Lattice" class="headerlink" title="Product Lattice"></a>Product Lattice</h2><p>Given lattices L1 = (P1, $⊑_1$), L2 = (P2, $⊑_2$), …, Ln = (Pn, $⊑_n$), if for all i, (Pi , $⊑_i$ ) has $⊔_i$ (least upper bound) and $⊓_i$ (greatest lower bound), then we can have a product lattice $L^n = (P, ⊑)$ that is defined by:</p>
<ul>
<li>$P = P_1 × … × P_n$</li>
<li>$(x_1,…,x_n)⊑(y_1,…,y_n)\Leftrightarrow(x_1⊑y_1)∧…∧(x_n⊑y_n)$</li>
<li>$(x_1,…,x_n)⊔(y_1,…,y_n)=(x_1⊔_1y_1,…,x_n⊔_ny_n)$</li>
<li><p>$(x_1,…,x_n)⊓(y_1,…,y_n)=(x_1⊓ _1y_1,…,x_n⊓ _ny_n)$</p>
</li>
<li><p>A product lattice is a lattice</p>
</li>
<li>If a product lattice L is a product of complete lattices, then L is also complete</li>
</ul>
<h1 id="Data-Flow-Analysis-Framework-via-Lattice"><a href="#Data-Flow-Analysis-Framework-via-Lattice" class="headerlink" title="Data Flow Analysis Framework via Lattice"></a>Data Flow Analysis Framework via Lattice</h1><p>A data flow analysis framework (D, L, F) consists of:</p>
<ul>
<li>D: a direction of data flow: forwards or backwards</li>
<li>L: a lattice including domain of the values V and a meet ⊓ or join ⊔ operator</li>
<li>F: a family of transfer functions from V to V</li>
</ul>
<p><img src="/2022/04/30/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B05-DataFlowAnalysisFoundation1/DFAviaLattice.png" alt></p>
<p>Data flow analysis can be seen as iteratively applying transfer functions and meet/join operations on the values of a lattice</p>
<h1 id="Monotonicity-and-Fixed-Point-Theorem"><a href="#Monotonicity-and-Fixed-Point-Theorem" class="headerlink" title="Monotonicity and Fixed Point Theorem"></a>Monotonicity and Fixed Point Theorem</h1><h2 id="Monotonicity"><a href="#Monotonicity" class="headerlink" title="Monotonicity"></a>Monotonicity</h2><p>A function f: L → L (L is a lattice) is monotonic if ∀x, y ∈ L, x ⊑ y ⟹ f(x) ⊑ f(y)</p>
<h2 id="Fixed-Point-Theorem"><a href="#Fixed-Point-Theorem" class="headerlink" title="Fixed-Point Theorem"></a>Fixed-Point Theorem</h2><p>Given a complete lattice (L, ⊑), if </p>
<p>(1) f: L → L is monotonic and (2) L is finite, </p>
<p>then the least fixed point of f can be found by iterating $f(⊥), f(f(⊥)), …, f^k(⊥)$ until a fixed point is reached the greatest fixed point of f can be found by iterating $f( ), f(f( )), …, f^k( )$ until a fixed point is reached</p>
<h2 id="Prove-Existence-of-fixed-point"><a href="#Prove-Existence-of-fixed-point" class="headerlink" title="Prove: Existence of fixed point"></a>Prove: Existence of fixed point</h2><p>Proof:</p>
<p>By the definition of ⊥ and f: L → L, we have $⊥ ⊑ f(⊥)$</p>
<p>As f is monotonic, we have $f(⊥) ⊑ f(f(⊥)) = f^2(⊥)$</p>
<p>By repeatedly applying f, we have an ascending chain $⊥ ⊑ f(⊥) ⊑ f^2(⊥) ⊑ … ⊑ f^i (⊥)$</p>
<p>As L is finite (its height is H), the values are bounded among $⊥ , f(⊥) , f^2(⊥) … f^H(⊥)$</p>
<p>When i &gt; H, by pigeonhole principle, there exists k and j that $f^k(⊥) = f^j (⊥) (assume k &lt; j ≤ H+1)$</p>
<p>Further as fk(⊥) ⊑ … ⊑ fj (⊥), we have $f^{Fix} = f^k(⊥) = f^{k+1}(⊥) = f^j (⊥)$</p>
<p>Thus, the fixed point exists.</p>
<h2 id="Prove-Least-Fixed-Point"><a href="#Prove-Least-Fixed-Point" class="headerlink" title="Prove: Least Fixed Point"></a>Prove: Least Fixed Point</h2><p>Proof:</p>
<p>Assume we have another fixed point x, i.e., x = f(x)</p>
<p>By the definition of ⊥, we have ⊥ ⊑ x</p>
<p>Induction begins:</p>
<p>As f is monotonic, we have f(⊥) ⊑ f(x)</p>
<p>Assume $f^i (⊥) ⊑ f^i (x)$, as f is monotonic, we have $f^{i+1}(⊥) ⊑ f{i+1}(x)$</p>
<p>Thus by induction, we have $f^i (⊥) ⊑ f^i (x)$</p>
<p>Thus  $f^i (⊥) ⊑ f^i (x) = x$, then we have $f^{Fix} = f^k(⊥) ⊑ x$ </p>
<p>Thus the fixed point is the least</p>
<p>Now what we have just seen is the property (fixed point theorem) for the function on a lattice. We cannot say our iterative algorithm also has that property unless we can relate the algorithm to the fixed point theorem, if possible</p>
]]></content>
      <categories>
        <category>软件分析</category>
      </categories>
      <tags>
        <tag>静态分析</tag>
        <tag>Static Analysis</tag>
        <tag>Data Flow Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>南大《软件分析》06.DadaFlowAnalysisFoundation II</title>
    <url>/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是南京大学李樾、谭添老师的《软件分析》课程的笔记。内容来自课程ppt以及课程讲解。</p>
<blockquote>
<p>课程主页：<a href="https://tai-e.pascal-lab.net/lectures.html">Static Program Analysis | Tai-e (pascal-lab.net)</a></p>
<p>授课视频：<a href="https://www.bilibili.com/video/BV1b7411K7P4">视频南京大学《软件分析》课程01（Introduction）_哔哩哔哩_bilibili</a></p>
<p>课程实验repo：<a href="https://github.com/pascal-lab/Tai-e-assignments">pascal-lab/Tai-e-assignments: Tai-e assignments for static program analysis (github.com)</a></p>
</blockquote>
<h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><ol>
<li>Iterative Algorithm, Another View</li>
<li>Partial Order</li>
<li>Upper and Lower Bounds</li>
<li>Lattice, Semilattice, Complete and Product Lattice </li>
<li>Data Flow Analysis Framework via Lattice</li>
<li>Monotonicity and Fixed Point Theorem</li>
<li>Relate Iterative Algorithm to Fixed Point Theorem</li>
<li>May/Must Analysis, A Lattice View</li>
<li>MOP and Distributivity</li>
<li>Constant Propagation</li>
<li>Worklist Algorithm</li>
</ol>
<span id="more"></span>
<h1 id="Review-The-Questions-We-Have-Seen-Before"><a href="#Review-The-Questions-We-Have-Seen-Before" class="headerlink" title="Review The Questions We Have Seen Before"></a>Review The Questions We Have Seen Before</h1><p>The iterative algorithm (or the IN/OUT equation system) produces a solution to a data flow analysis</p>
<ul>
<li>Is the algorithm guaranteed to terminate or reach the fixed point, or does it always have a solution?</li>
<li>If so, is there only one solution or only one fixed point? If more than one, is our solution the best one (most precise)?</li>
<li>When will the algorithm reach the fixed point, or when can we get the solution?</li>
</ul>
<p>Now what we have just seen is the property (fixed point theorem) for the function on a lattice. We cannot say our iterative algorithm also has that property unless we can relate the algorithm to the fixed point theorem, if possible</p>
<h1 id="Relate-Iterative-Algorithm-to-Fixed-Point-Theorem"><a href="#Relate-Iterative-Algorithm-to-Fixed-Point-Theorem" class="headerlink" title="Relate Iterative Algorithm to Fixed-Point Theorem"></a>Relate Iterative Algorithm to Fixed-Point Theorem</h1><ul>
<li>​         → $(\bot, \bot …, \bot)$</li>
<li>iter 1 → $(v_1^1, v_2^1, …, v_k^1)$</li>
<li>iter 2 → $(v_1^2, v_2^2, …, v_k^2)$</li>
<li>…</li>
<li>iter i → $(v_1^i, v_2^i, …, v_k^i)$ </li>
<li>iter i+1 → $(v_1^i, v_2^i, …, v_k^i)$</li>
</ul>
<p>Given a complete lattice (L, ⊑), if </p>
<p>(1) f: L → L is monotonic and (2) L is finite, </p>
<p>then the least fixed point of f can be found by iterating $f(⊥), f(f(⊥)), …, f^k(⊥)$ until a fixed point is reached the greatest fixed point of f can be found by iterating $f( ), f(f( )), …, f^k( )$ until a fixed point is reached</p>
<p>If a product lattice $L^k$ is a product of complete (and finite) lattices, i.e., (L, L, …, L), then $L^k$ is also complete (and finite)</p>
<p>In each iteration, it is equivalent to think that we apply function F which consists of (1) transfer function fi : L → L for every node (2) join/meet function ⊔/⊓: L×L → L for control-flow confluence</p>
<p>Now the remaining issue is to prove that function F is monotonic</p>
<h2 id="Prove-Function-F-is-Monotonic"><a href="#Prove-Function-F-is-Monotonic" class="headerlink" title="Prove Function F is Monotonic"></a>Prove Function F is Monotonic</h2><p>In each iteration, it is equivalent to think that we apply function F which consists of </p>
<ol>
<li><p>transfer function fi : L → L for every node</p>
<p>Gen/Kill function is monotonic</p>
</li>
<li><p>join/meet function ⊔/⊓: L×L → L for control-flow confluence</p>
<p>Actually the binary operator is a basic case of L × L ×… × L, we want show that ⊔ is monotonic</p>
</li>
</ol>
<blockquote>
<p>Proof. </p>
<p>∀x, y, z ∈ L, x ⊑ y, we want to prove x ⊔ z ⊑ y ⊔ z </p>
<p>by the definition of ⊔, y ⊑ y ⊔ z </p>
<p>by transitivity of ⊑, x ⊑ y ⊔ z </p>
<p>thus y ⊔ z is an upper bound for x, and also for z (by ⊔’s definition) as x ⊔ z is the least upper bound of x and z </p>
<p>thus x ⊔ z ⊑ y ⊔ z</p>
</blockquote>
<p>Thus the fixed point theorem applies to the iterative algorithm for data flow analysis.</p>
<h2 id="When-Will-the-Algorithm-Reach-the-Fixed-Point"><a href="#When-Will-the-Algorithm-Reach-the-Fixed-Point" class="headerlink" title="When Will the Algorithm Reach the Fixed Point?"></a>When Will the Algorithm Reach the Fixed Point?</h2><p>The height of a lattice h is the length of the longest path from Top to Bottom in the lattice.</p>
<p><img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/height.png" alt></p>
<p>The maximum iterations i needed to reach the fixed point</p>
<p>In each iteration, assume only one step in the lattice (upwards or downwards) is made in one node (e.g., one 0-&gt;1 in RD) </p>
<p>Assume the lattice height is h and the number of nodes in CFG is k </p>
<p>We need at most i = h*k iterations</p>
<h1 id="May-and-Must-Analyses-a-Lattice-View"><a href="#May-and-Must-Analyses-a-Lattice-View" class="headerlink" title="May and Must Analyses, a Lattice View"></a>May and Must Analyses, a Lattice View</h1><p><img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/MayandMust1.jpg" alt></p>
<p><img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/MayandMust2.jpg" alt></p>
<h1 id="MOP-and-Distributivity"><a href="#MOP-and-Distributivity" class="headerlink" title="MOP and Distributivity"></a>MOP and Distributivity</h1><h2 id="How-Precise-Is-Our-Solution"><a href="#How-Precise-Is-Our-Solution" class="headerlink" title="How Precise Is Our Solution?"></a>How Precise Is Our Solution?</h2><p>Meet-Over-All-Paths Solution(MOP)</p>
<p>$P = Entry \rightarrow S_1 \rightarrow S_2 \rightarrow \dots \rightarrow S_i$</p>
<p><img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/MOP.jpg" alt></p>
<p>Transfer function $F<em>P$ for a path P (from Entry to $S_i$ ) is a composition of transfer functions for all statements on that path: $f</em>{S1}$, $f<em>{S2}$, …, $f</em>{S_{i-1}}$</p>
<p>$MOP[S_i]=⊔/⊓ F_P(OUT[Entry])$</p>
<p>MOP computes the data-flow values at the end of each path and apply join / meet operator to these values to find their lub / glb</p>
<p>Some paths may be not executable -&gt; not fully precise</p>
<p>Unbounded, and not enumerable -&gt; impratical</p>
<h2 id="Ours-Iterative-Alorithm-vs-MOP"><a href="#Ours-Iterative-Alorithm-vs-MOP" class="headerlink" title="Ours(Iterative Alorithm) vs. MOP"></a>Ours(Iterative Alorithm) vs. MOP</h2><p><img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/ItervsMOP.png" alt></p>
<p>$IN[S<em>4]=f</em>{s<em>3}(f</em>{s<em>1}(OUT[Entry])⊔f</em>{s_2}(OUT[Entry]))$</p>
<p>$MOP[S<em>4]=f</em>{s<em>3}(f</em>{s<em>1}(OUT[Entry]))⊔f</em>{s<em>3}(f</em>{s_2}(OUT[Entry]))$</p>
<p>Ours = F(x⊔y),  MOP = F(x) ⊔ F(y)</p>
<blockquote>
<p>By definition of lub ⊔, we have </p>
<p>x ⊑ x ⊔ y and y ⊑ x ⊔ y </p>
<p>As transfer function F is monotonic, we have </p>
<p>F(x) ⊑ F(x ⊔ y) and F(y) ⊑ F(x ⊔ y) </p>
<p>That means F(x ⊔ y) is an upper bound of F(x) and F(y) </p>
<p>As F(x) ⊔ F(y) is the lub of F(x) and F(y), we have </p>
<p>F(x) ⊔ F(y) ⊑ F(x ⊔ y) </p>
<p>MOP ⊑ Ours </p>
<p>(Ours is less precise than MOP) </p>
</blockquote>
<p>When F is distributive, i.e., F(x ⊔ y) = F(x) ⊔ F(y), MOP=Ours(Ours is as precise as MOP)</p>
<p>Bit-vector or Gen/Kill problems (set union /intersection for join/meet) are distributive, but some analyses are not distributie.</p>
<h1 id="Constant-Propagation"><a href="#Constant-Propagation" class="headerlink" title="Constant Propagation"></a>Constant Propagation</h1><p>Given a variable x at program point p, determine whether x is guaranteed to hold a constant value at p.</p>
<p>The OUT of each node in CFG, includes a set of pairs (x, v) where x is a variable and v is the value held by x after that node</p>
<p>A  data flow analysis framework (D, L, F) consists of: </p>
<ul>
<li>D: a direction of data flow: forwards or backwards</li>
<li>L: a lattice including domain of the values V and a meet ⊓ or join ⊔ operator</li>
<li>F: a family of transfer functions from V to V</li>
</ul>
<h2 id="Lattice"><a href="#Lattice" class="headerlink" title="Lattice"></a>Lattice</h2><ul>
<li><p>Domain of the values V</p>
<p><img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/domain.jpg" alt></p>
</li>
<li><p>Meet Operator ⊓</p>
<ul>
<li>NAC ⊓ v = NAC</li>
<li>UNDEF ⊓ v = v</li>
<li>c ⊓ c = c</li>
<li>c1 ⊓ c2 = NAC</li>
</ul>
</li>
</ul>
<h2 id="Transfer-Function"><a href="#Transfer-Function" class="headerlink" title="Transfer Function"></a>Transfer Function</h2><p>Given a statement s: x = …, we define its transfer function F as</p>
<p>$F:OUT[s]=gen \cup (IN[s] - {(x,_)})$</p>
<p>(we use val(x) to denote the lattice value that variable x holds)</p>
<ul>
<li>s: x = c // c is a constant gen = {x,c}</li>
<li>s: x = y  gen = {(x, val(y))}</li>
<li>s: x = y op z gen = {(x,f(y,z))}</li>
</ul>
<p>f{y,z} = </p>
<ul>
<li>val(y) op val(z) // if val(y) and val(z) are constants</li>
<li>NAC // if val(y) or val(z) is NAC</li>
<li>UNDEF // otherwise</li>
</ul>
<p>(if s is not an assignment statement, F is the identity function)</p>
<h2 id="Nondistributivity"><a href="#Nondistributivity" class="headerlink" title="Nondistributivity"></a>Nondistributivity</h2><p><img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/Nondistributivity.jpg" alt></p>
<p>F(X ⊓ Y) = {(a,NAC), (b,NAC), (c,NAC)}</p>
<p>F(x) ⊓ F(Y) = {(a, NAC), (b, NAC), (c,10)} </p>
<p>F(X ⊓ Y) ≠ F(x) ⊓ F(Y)  and F(X ⊓ Y) ⊑ F(x) ⊓ F(Y)</p>
<h1 id="Worklist-Algorithm-an-optimization-of-Iterative-Algorithm"><a href="#Worklist-Algorithm-an-optimization-of-Iterative-Algorithm" class="headerlink" title="Worklist Algorithm, an optimization of Iterative Algorithm"></a>Worklist Algorithm, an optimization of Iterative Algorithm</h1><h2 id="Review-Iterative-Algorithm-for-May-amp-Forward-Analysis"><a href="#Review-Iterative-Algorithm-for-May-amp-Forward-Analysis" class="headerlink" title="Review Iterative Algorithm for May&amp;Forward Analysis"></a>Review Iterative Algorithm for May&amp;Forward Analysis</h2><p>INPUT: CFG($kill_B$ and $gen_B$ computed for each basic block B)</p>
<p>OUTPUT: $IN[B]$ and$OUT[B]$ for each basic block B</p>
<p>METHOD:<img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/Algorithm.jpg" alt></p>
<h2 id="WorkList-Algorithm"><a href="#WorkList-Algorithm" class="headerlink" title="WorkList Algorithm"></a>WorkList Algorithm</h2><p><img src="/2022/05/04/%E5%8D%97%E5%A4%A7%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E3%80%8B06-DadaFlowAnalysisFoundation2/WorklistAlgorithm.jpg" alt></p>
]]></content>
      <categories>
        <category>软件分析</category>
      </categories>
      <tags>
        <tag>静态分析</tag>
        <tag>Static Analysis</tag>
        <tag>Data Flow Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Rustc源码学习01-Lint与LintPass.md</title>
    <url>/2022/09/01/Rustc%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A001-Lint%E4%B8%8ELintPass/</url>
    <content><![CDATA[<h1 id="Lint-与-LintPass"><a href="#Lint-与-LintPass" class="headerlink" title="Lint 与 LintPass"></a>Lint 与 LintPass</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="Rustc"><a href="#Rustc" class="headerlink" title="Rustc"></a>Rustc</h3><p>Rustc 是 Rust Compiler 的简称，即 Rust 编程语言的编译器。Rust 的编译器是自举的，即 Rustc 由 Rust 语言编写而成，可以通过旧版本编译出新版本。因此，Rustc 可以说是用 Rust 语言编写编译器的最佳实践。</p>
<h3 id="Lint-工具"><a href="#Lint-工具" class="headerlink" title="Lint 工具"></a>Lint 工具</h3><p>Lint 是代码静态分析工具的一种，最早是来源于 C 语言。Lint 工具通常会检查代码中潜在的问题和错误，包括（但不限于）编程风格（缩进、空行、空格）、代码质量（定义未使用的变量、文档缺失）以及错误代码（除0错误、重复定义、循环引用）等问题。通常来说，Lint 工具除了标识错误外，还会带有一定的 fix/refactor suggest 和 auto-fix 的能力。在工程中引入 Lint 工具可以有效的减少错误，提高整体的工程质量。此外，对一种编程语言来说，Lint 工具通常也是其他工具研发的前置条件，例如 IDE 插件的错误提示，CI 的 Pipeline 检测等。</p>
<span id="more"></span>
<h2 id="Lint-vs-LintPass"><a href="#Lint-vs-LintPass" class="headerlink" title="Lint vs. LintPass"></a>Lint vs. LintPass</h2><h3 id="概念与关系"><a href="#概念与关系" class="headerlink" title="概念与关系"></a>概念与关系</h3><p>Rustc 中关于 Lint 最主要的结构有两个， <code>Lint</code> 和 <code>LintPass</code>。首先需要区分 Lint 和 LintPass 的概念。Rustc 的很多文档中都将它们统称为 <code>Lint</code>，这很容易造成混淆。关于这两者之间的区别，rustc-dev-guide 给出的解释是：</p>
<blockquote>
<p>Lint declarations don’t carry any “state” - they are merely global identifiers and descriptions of lints. We assert at runtime that they are not registered twice (by lint name).<br>Lint passes are the meat of any lint.</p>
</blockquote>
<p>从定义方面， <code>Lint</code> 是对所定义的 lint 检查的静态描述，例如 name, level, description, code 等属性，与检查时的状态无关，Rustc 用 <code>Lint</code> 的定义做唯一性的检查。而 <code>LintPass</code> 是 <code>Lint</code> 的具体实现，是在检查时调用的 <code>check_*</code> 方法。<br>在具体的代码实现方法， <code>Lint</code>定义为一个 Struct，所有 lint 的定义都是此类型的一个实例/对象。而 <code>LintPass</code> 则对应为一个 trait。trait 类似于 java/c++ 中的接口，每一个 lintpass 的定义都需要实现该接口中定义的方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Specification of a single lint.</span></span><br><span class="line"><span class="meta">#[derive(Copy, Clone, Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Lint</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> name: &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>,</span><br><span class="line">    <span class="comment">/// Default level for the lint.</span></span><br><span class="line">    <span class="keyword">pub</span> default_level: Level,</span><br><span class="line">    <span class="comment">/// Description of the lint or the issue it detects.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// e.g., &quot;imports that are never used&quot;</span></span><br><span class="line">    <span class="keyword">pub</span> desc: &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">LintPass</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，尽管刚刚的描述中说到<code>trait</code> 类似于接口而 <code>Lint</code> 是一个 struct，但 <code>Lint</code> 和 <code>LintPass</code> 之间并不是 OO 中一个“类”和它的“方法”的关系。而是在声明 <code>LintPass</code> 会生成一个实现了该 trait 的同名的 struct，该 struct 中的 <code>get_lints()</code> 方法会生成对应的 <code>Lint</code> 定义。</p>
<p><img src="/2022/09/01/Rustc%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A001-Lint%E4%B8%8ELintPass/lint_lintpass.jpeg" alt="lint vs. lintpass"></p>
<p>这与 rustc-dev-guide 的描述也保持了一致:</p>
<blockquote>
<p>A lint might not have any lint pass that emits it, it could have many, or just one — the compiler doesn’t track whether a pass is in any way associated with a particular lint, and frequently lints are emitted as part of other work (e.g., type checking, etc.).</p>
</blockquote>
<h3 id="Lint-与-LintPass-的宏定义"><a href="#Lint-与-LintPass-的宏定义" class="headerlink" title="Lint 与 LintPass 的宏定义"></a>Lint 与 LintPass 的宏定义</h3><p>Rustc 为 Lint 和 LintPass 都提供了用于定义其结构的宏。<br>定义 Lint 的宏<code>declare_lint</code> 比较简单，可以在<code>rustc_lint_defs::lib.rs</code>中找到。<code>declare_lint</code> 宏解析输入参数，并生成名称为 <code>$NAME</code> 的 Lint struct。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> declare_lint &#123;</span><br><span class="line">    ($(<span class="meta">#[$attr:meta]</span>)* $vis: vis $NAME: ident, $Level: ident, $desc: expr) =&gt; (</span><br><span class="line">        $crate::declare_lint!(</span><br><span class="line">            $(<span class="meta">#[$attr]</span>)* $vis $NAME, $Level, $desc,</span><br><span class="line">        );</span><br><span class="line">    );</span><br><span class="line">    ($(<span class="meta">#[$attr:meta]</span>)* $vis: vis $NAME: ident, $Level: ident, $desc: expr,</span><br><span class="line">     $(@feature_gate = $gate:expr;)?</span><br><span class="line">     $(@future_incompatible = FutureIncompatibleInfo &#123; $($field:ident : $val:expr),* $(,)*  &#125;; )?</span><br><span class="line">     $($v:ident),*) =&gt; (</span><br><span class="line">        $(<span class="meta">#[$attr]</span>)*</span><br><span class="line">        $vis <span class="keyword">static</span> $NAME: &amp;$crate::Lint = &amp;$crate::Lint &#123;</span><br><span class="line">            name: <span class="built_in">stringify!</span>($NAME),</span><br><span class="line">            default_level: $crate::$Level,</span><br><span class="line">            desc: $desc,</span><br><span class="line">            edition_lint_opts: <span class="literal">None</span>,</span><br><span class="line">            is_plugin: <span class="literal">false</span>,</span><br><span class="line">            $($v: <span class="literal">true</span>,)*</span><br><span class="line">            $(feature_gate: <span class="title function_ invoke__">Some</span>($gate),)*</span><br><span class="line">            $(future_incompatible: <span class="title function_ invoke__">Some</span>($crate::FutureIncompatibleInfo &#123;</span><br><span class="line">                $($field: $val,)*</span><br><span class="line">                ..$crate::FutureIncompatibleInfo::<span class="title function_ invoke__">default_fields_for_macro</span>()</span><br><span class="line">            &#125;),)*</span><br><span class="line">            ..$crate::Lint::<span class="title function_ invoke__">default_fields_for_macro</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">    );</span><br><span class="line">    ($(<span class="meta">#[$attr:meta]</span>)* $vis: vis $NAME: ident, $Level: ident, $desc: expr,</span><br><span class="line">     $lint_edition: expr =&gt; $edition_level: ident</span><br><span class="line">    ) =&gt; (</span><br><span class="line">        $(<span class="meta">#[$attr]</span>)*</span><br><span class="line">        $vis <span class="keyword">static</span> $NAME: &amp;$crate::Lint = &amp;$crate::Lint &#123;</span><br><span class="line">            name: <span class="built_in">stringify!</span>($NAME),</span><br><span class="line">            default_level: $crate::$Level,</span><br><span class="line">            desc: $desc,</span><br><span class="line">            edition_lint_opts: <span class="title function_ invoke__">Some</span>(($lint_edition, $crate::Level::$edition_level)),</span><br><span class="line">            report_in_external_macro: <span class="literal">false</span>,</span><br><span class="line">            is_plugin: <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LintPass 的定义涉及到两个宏：</p>
<ul>
<li>declare_lint_pass：生成一个名为<code>$name</code> 的 struct，并且调用 <code>impl_lint_pass</code> 宏。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> declare_lint_pass &#123;</span><br><span class="line">    ($(<span class="meta">#[$m:meta]</span>)* $name:ident =&gt; [$($lint:expr),* $(,)?]) =&gt; &#123;</span><br><span class="line">        $(<span class="meta">#[$m]</span>)* <span class="meta">#[derive(Copy, Clone)]</span> <span class="keyword">pub</span> <span class="keyword">struct</span> $name;</span><br><span class="line">        $crate::impl_lint_pass!($name =&gt; [$($lint),*]);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>impl_lint_pass：为生成的 <code>LintPass</code> 结构实现<code>fn name()</code>和 <code>fn get_lints()</code> 方法。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> impl_lint_pass &#123;</span><br><span class="line">    ($ty:ty =&gt; [$($lint:expr),* $(,)?]) =&gt; &#123;</span><br><span class="line">        <span class="keyword">impl</span> $crate::LintPass <span class="keyword">for</span> $ty &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span> &#123; <span class="built_in">stringify!</span>($ty) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">impl</span> $ty &#123;</span><br><span class="line">            <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get_lints</span>() <span class="punctuation">-&gt;</span> $crate::LintArray &#123; $crate::lint_array!($($lint),*) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EarlyLintPass-与-LateLintPass"><a href="#EarlyLintPass-与-LateLintPass" class="headerlink" title="EarlyLintPass 与 LateLintPass"></a>EarlyLintPass 与 LateLintPass</h3><p>前面关于 <code>LintPass</code> 的宏之中，只定义了<code>fn name()</code>和 <code>fn get_lints()</code> 方法，但并没有定义用于检查的 <code>check_*</code> 函数。这是因为 Rustc 中将 <code>LintPass</code> 分为了更为具体的两类：<code>EarlyLintPass</code>和<code>LateLintPass</code>。其主要区别在于检查的元素是否带有类型信息，即在类型检查之前还是之后执行。例如， <code>WhileTrue</code> 检查代码中的 <code>while true&#123;...&#125;</code> 并提示用户使用 <code>loop&#123;...&#125;</code> 去代替。这项检查不需要任何的类型信息，因此被定义为一个  <code>EarlyLint</code>(代码中 <code>impl EarlyLintPass for WhileTrue</code>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">declare_lint! &#123;</span><br><span class="line">    WHILE_TRUE,</span><br><span class="line">    Warn,</span><br><span class="line">    <span class="string">&quot;suggest using `loop &#123; &#125;` instead of `while true &#123; &#125;`&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare_lint_pass!(WhileTrue =&gt; [WHILE_TRUE]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">EarlyLintPass</span> <span class="keyword">for</span> <span class="title class_">WhileTrue</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">check_expr</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, cx: &amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, e: &amp;ast::Expr) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rustc 中用了3个宏去定义 <code>EarlyLintPass</code>：</p>
<ul>
<li>early<em>lint_methods：early_lint_methods 中定义了 <code>EarlyLintPass</code> 中需要实现的 `check</em>*<code>函数，并且将这些函数以及接收的参数</code>$args`传递给下一个宏。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> early_lint_methods &#123;</span><br><span class="line">    ($<span class="keyword">macro</span>:path, $args:tt) =&gt; (</span><br><span class="line">        $macro!($args, [</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">check_param</span>(a: &amp;ast::Param);</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">check_ident</span>(a: &amp;ast::Ident);</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">check_crate</span>(a: &amp;ast::Crate);</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">check_crate_post</span>(a: &amp;ast::Crate);</span><br><span class="line">            ...</span><br><span class="line">        ]);</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>declare_early_lint_pass：生成trait <code>EarlyLintPass</code> 并调用宏 <code>expand_early_lint_pass_methods</code>。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> declare_early_lint_pass &#123;</span><br><span class="line">    ([], [$($methods:tt)*]) =&gt; (</span><br><span class="line">        <span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">EarlyLintPass</span>: LintPass &#123;</span><br><span class="line">            expand_early_lint_pass_methods!(&amp;EarlyContext&lt;<span class="symbol">&#x27;_</span>&gt;, [$($methods)*]);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>expand<em>early_lint_pass_methods：为`check</em>*`方法提供默认实现，即空检查。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> expand_early_lint_pass_methods &#123;</span><br><span class="line">    ($context:ty, [$($(<span class="meta">#[$attr:meta]</span>)* <span class="keyword">fn</span> $name:<span class="title function_ invoke__">ident</span>($($param:ident: $arg:ty),*);)*]) =&gt; (</span><br><span class="line">        $(<span class="meta">#[inline(always)]</span> <span class="keyword">fn</span> $<span class="title function_ invoke__">name</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, _: $context, $(_: $arg),*) &#123;&#125;)*</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的设计好处有以下几点：</p>
<ol>
<li>因为 LintPass 是一个 trait，每一个 LintPass 的定义都需要实现其内部定义的所有方法。但 early lint 和 late lint 发生在编译的不同阶段，函数入参也不一致（AST 和 HIR）。因此，LintPass 的定义只包含了 <code>fn name()</code> 和 <code>fn get_lints()</code> 这两个通用的方法。而执行检查函数则定义在了更为具体的 <code>EarlyLintPass</code> 和 <code>LateLintPass</code> 中。</li>
<li>同样的，对于 <code>EarlyLintPass</code>， 每一个 lintpass 的定义都必须实现其中的所有方法。但并非每一个 lintpass 都需要检查 AST 的所有节点。 <code>expand_early_lint_pass_methods</code> 为其内部方法提供了默认实现。这样在定义具体的 lintpass 时，只需要关注和实现其相关的检查函数即可。例如，对于 <code>WhileTrue</code> 的定义，因为 <code>while true &#123; &#125;</code>这样的写法只会出现在 <code>ast::Expr</code> 节点中，因此只需要实现 <code>check_expr</code> 函数即可。在其他任何节点调用 <code>WhileTrue</code> 的检查函数，如在检查 AST 上的标识符节点时，调用 <code>WhileTrue.check_ident()</code>，则根据宏 <code>expand_early_lint_pass_methods</code> 中的定义执行一个空函数。</li>
</ol>
<h3 id="pass-的含义"><a href="#pass-的含义" class="headerlink" title="pass 的含义"></a>pass 的含义</h3><p>在 Rustc 中，除了 <code>Lint</code> 和 <code>LintPass</code> 外，还有一些 <code>*Pass</code> 的命名，如 <code>Mir</code> 和 <code>MirPass</code>、<code>rustc_passes</code> 包等。编译原理龙书中对Pass有对应的解释：</p>
<blockquote>
<p>1.2.8 将多个步骤组合成趟<br>前面关于步骤的讨论讲的是一个编译器的逻辑组织方式。在一个特定的实现中，多个步骤的活动可以被组合成一趟（pass）。每趟读入一个输入文件并产生一个输出文件。</p>
</blockquote>
<p>在声明 <code>LintPass</code> 的宏 <code>declare_lint_pass</code> 中，其第二个参数为一个列表，表示一个 lintpass 可以生成多个 lint。Rustc 中还有一些 CombinedLintPass 中也是将所有 builtin 的 lint 汇总到一个 lintpass 中。这与龙书中“趟”的定义基本一致:<code>LintPass</code> 可以组合多个 <code>Lint</code> 的检查，每个 LintPass 读取一个 AST 并产生对应的结果。</p>
<h2 id="Lint-的简单实现"><a href="#Lint-的简单实现" class="headerlink" title="Lint 的简单实现"></a>Lint 的简单实现</h2><p>在 LintPass 的定义中，给每一个 lintpass 的所有 <code>check_*</code> 方法都提供了一个默认实现。到这里为止，基本上已经可以实现 Lint 检查的功能。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Linter</span> &#123; &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">ast_visit</span>::Visitor <span class="keyword">for</span> <span class="title class_">Linter</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">visit_crate</span>(a: ast:<span class="keyword">crate</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">lintpass</span> <span class="keyword">in</span> lintpasses&#123;</span><br><span class="line">            lintpass.<span class="title function_ invoke__">check_crate</span>(a)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">walk_crate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">visit_stmt</span>(a: ast:stmt)&#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">lintpass</span> <span class="keyword">in</span> lintpasses&#123;</span><br><span class="line">            lintpass.<span class="title function_ invoke__">check_stmt</span>(a)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">walk_stmt</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">linter</span> = Linter::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> crates&#123;</span><br><span class="line">    linter.<span class="title function_ invoke__">visit_crate</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Visitor</code> 是遍历 AST 的工具，在这里为 Linter 实现其中的 <code>visit_*</code> 方法，在遍历时调用所有 lintpass 的 <code>check_*</code> 函数。<code>walk_*</code> 会继续调用其他的 <code>visit_*</code> 函数，遍历其中的子节点。因此，对于每一个 crate， 只需要调用 <code>visit_crate()</code> 函数就可以遍历 AST 并完成检查。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了 Rustc 源码中关于 Lint 的几个重要结构。并以 <code>WhileTrue</code> 为例说明了 Rustc 如何中定义和实现一个 <code>Lint</code>，最后基于这些结构，提供了一个简易的 Lint 检查的实现方式。希望能够对理解 Rustc 及 Lint 有所帮助，如有错误，欢迎指正。KCL 的 Lint 工具也参考了其中部分设计， 由文末简易的 Linter 结构改进而成。篇幅限制，将后续的文章将继续介绍 Rustc 中 Lint 在编译过程中的注册和执行过程，如何继续优化上述 <code>Linter</code> 的实现，以及 KCL Lint 的设计和实践，期待继续关注。</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li>KusionStack: <a href="https://github.com/KusionStack">https://github.com/KusionStack</a></li>
<li>Rustc: <a href="https://github.com/rust-lang/rust">https://github.com/rust-lang/rust</a></li>
<li>rustc-dev-guide: <a href="https://rustc-dev-guide.rust-lang.org/">https://rustc-dev-guide.rust-lang.org/</a></li>
<li>Rust Visitor: <a href="https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/index.html">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/index.html</a></li>
<li>Rust Clippy: <a href="https://github.com/rust-lang/rust-clippy">https://github.com/rust-lang/rust-clippy</a></li>
</ul>
]]></content>
      <categories>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>Rust</tag>
        <tag>Rust源码学习</tag>
      </tags>
  </entry>
  <entry>
    <title>人月神话</title>
    <url>/2022/12/09/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/zhengda/The-Mythical-Man-Month-zh">https://github.com/zhengda/The-Mythical-Man-Month-zh</a></p>
</blockquote>
<p>目录<br>第1章 焦油坑</p>
<ul>
<li><p>1.1 编程系统产品（Programming Systems Product）开发的工作量是供个人使用的、独立开发的构件程序的九倍。我估计软件构件产品化引起了3倍工作量，将软件构件整合成完整系统所需要的设计、集成和测试又强加了3倍的工作量，这些高成本的构件在根本上是相互独立的。</p>
</li>
<li><p>1.2 编程行业”满足我们内心深处的创造渴望和愉悦所有人的共有情感”，提供了五种乐趣：</p>
<ul>
<li>创建事物的快乐</li>
<li>开发对其他人有用的东西的乐趣</li>
<li>将可以活动、相互啮合的零部件组装成类似迷宫的东西，这个过程所体现出令人神魂颠倒的魅力</li>
<li>面对不重复的任务，不间断学习的乐趣</li>
<li>工作在如此易于驾驭的介质上的乐趣—纯粹的思维活动，其存在、移动和运转方式完全不同于实际物体</li>
</ul>
</li>
<li><p>1.3 同样，这个行业具有一些内在固有的苦恼：</p>
<ul>
<li>将做事方式调整到追求完美，是学习编程的最困难部分</li>
<li>由其他人来设定目标，并且必须依靠自己无法控制的事物（特别是程序）；权威不等同于责任</li>
<li>实际情况看起来要比这一点好一些：真正的权威来自于每次任务的完成</li>
<li>任何创造性活动都伴随着枯燥艰苦的劳动，编程也不例外</li>
<li>人们通常期望项目在接近结束时，（bug、工作时间）能收敛得快一些，然而软件项目的情况却是越接近完成，收敛得越慢</li>
<li>产品在即将完成时总面临着陈旧过时的威胁</li>
</ul>
</li>
</ul>
<span id="more"></span>
<p>第2章 人月神话</p>
<ul>
<li>2.1 缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素加起来影响还大。</li>
<li>2.2 良好的烹饪需要时间，某些任务无法在不损害结果的情况下加快速度。</li>
<li>2.3 所有的编程人员都是乐观主义者：”一切都将运作良好”。</li>
<li>2.4 由于编程人员通过纯粹的思维活动来开发，所以我们期待在实现过程中不会碰到困难。</li>
<li>2.5 但是，我们的构思是有缺陷的，因此总会有bug。</li>
<li>2.6 我们围绕成本核算的估计技术，混淆了工作量和项目进展。人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的。</li>
<li>2.7 在若干人员中分解任务会引发额外的沟通工作量—培训和相互沟通。</li>
<li>2.8 关于进度安排，我的经验是为1/3计划、1/6编码、1/4构件测试以及1/4系统测试。</li>
<li>2.9 作为一个学科，我们缺乏数据估计。</li>
<li>2.10 因为我们对自己的估计技术不确定，所以在管理和客户的压力下，我们常常缺乏坚持的勇气。</li>
<li>2.11 Brook法则：向进度落后的项目中增加人手，只会使进度更加落后。</li>
<li>2.12 向软件项目中增派人手从三个方面增加了项目必要的总体工作量：任务重新分配本身和所造成的工作中断；培训新人员；额外的相互沟通。</li>
</ul>
<p>第3章 外科手术队伍</p>
<ul>
<li>3.1 同样有两年经验而且在受到同样的培训的情况下，优秀的专业程序员的工作效率是较差程序员的十倍。（Sackman、Erikson和Grand）</li>
<li>3.2 Sackman、Erikson和Grand的数据显示经验和实际表现之间没有相互联系。我怀疑这种现象是否普遍成立。</li>
<li>3.3 小型、精干队伍是最好的—尽可能的少。</li>
<li>3.4 两个人的团队，其中一个项目经理，常常是最佳的人员使用方法。[留意一下上帝对婚姻的设计。]</li>
<li>3.5 对于真正意义上的大型系统，小型精干的队伍太慢了。</li>
<li>3.6 实际上，绝大多数大型编程系统的经验显示出，一拥而上的开发方法是高成本、速度缓慢、不充分的，开发出的产品无法进行概念上的集成。</li>
<li>3.7 一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法—既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。</li>
</ul>
<p>第4章 贵族专制、民主政治和系统设计</p>
<ul>
<li>4.1 “概念完整性是系统设计中最重要的考虑因素”。</li>
<li>4.2 “功能与理解上的复杂程度的比值才是系统设计的最终测试标准”，而不仅仅是丰富的功能。[该比值是对易用性的一种测量，由简单和复杂应用共同验证。]</li>
<li>4.3 为了获得概念完整性，设计必须由一个人或者具有共识的小型团队来完成。</li>
<li>4.4 “对于非常大型的项目，将设计方法、体系结构方面的工作与具体实现相分离是获得概念完整性的强有力方法。”[同样适用于小型项目。]</li>
<li>4.5 “如果要得到系统概念上的完整性，那么必须控制这些概念。这实际上是一种无需任何歉意的贵族专制统治。”</li>
<li>4.6 纪律、规则对行业是有益的。外部的体系结构规定实际上是增强，而不是限制实现小组的创造性。</li>
<li>4.7 概念上统一的系统能更快地开发和测试。</li>
<li>4.8 体系结构（architecture）、设计实现（implementation）、物理实现（realization）的许多工作可以并发进行。[软件和硬件设计同样可以并行。]</li>
</ul>
<p>第5章 画蛇添足</p>
<ul>
<li>5.1 尽早交流和持续沟通能使结构师有较好的成本意识，以及使开发人员获得对设计的信心，并且不会混淆各自的责任分工。</li>
<li>5.2 结构师如何成功地影响实现：<ul>
<li>牢记是开发人员承担创造性的实现责任；结构师只能提出建议。</li>
<li>时刻准备着为所指定的说明建议一种实现的方法，准备接受任何其他可行的方法。</li>
<li>对上述的建议保持低调和平静。</li>
<li>准备对所建议的改进放弃坚持。</li>
<li>听取开发人员在体系结构上改进的建议。</li>
</ul>
</li>
<li>5.3 第二个系统是人们所设计的最危险的系统，通常的倾向是过分地进行设计。</li>
<li>5.4 OS/360是典型的画蛇添足（second-system effect）的例子。[Windows NT似乎是90年代的例子。]</li>
<li>5.5 为功能分配一个字节和微秒的优先权值是一个很有价值的规范化方法。</li>
</ul>
<p>第6章 贯彻执行</p>
<ul>
<li>6.1 即使是大型的设计团队，设计结果也必须由一个或两个人来完成，以确保这些决定是一致的。</li>
<li>6.2 必须明确定义体系结构中与先前定义不同的地方，重新定义的详细程度应该与原先的说明一致。</li>
<li>6.3 出于精确性的考虑，我们需要形式化的设计定义，同样，我们需要记叙性定义来加深理解。</li>
<li>6.4 必须采用形式化定义和记叙性定义中的一种作为标准，另一种作为辅助措施；它们都可以作为表达的标准。</li>
<li>6.5 设计实现，包括模拟仿真，可以充当一种形式化定义的方法；这种方法有一些严重的缺点。</li>
<li>6.6 直接整合是一种强制推行软件的结构性标准的方法。[硬件上也是如此—考虑内建在ROM中的Mac WIMP接口。]</li>
<li>6.7 “如果起初至少有两种以上的实现，那么（体系结构）定义会更加整洁，会更加规范。”</li>
<li>6.8 允许体系结构师对实现人员的询问做出电话应答解释是非常重要的，并且必须进行日志记录和整理发布。[电子邮件是一种可选的介质。]</li>
<li>6.9 “项目经理最好的朋友就是他每天要面对的敌人—独立的产品测试机构/小组。”</li>
</ul>
<p>第7章 为什么巴比伦塔会失败？</p>
<ul>
<li>7.1 巴比伦塔项目的失败是因为缺乏交流，以及交流的结果—组织。 交流</li>
<li>7.2 “因为左手不知道右手在做什么，从而进度灾难、功能的不合理和系统缺陷纷纷出现。”由于对其他人的各种假设，团队成员之间的理解开始出现偏差。</li>
<li>7.3 团队应该以尽可能多的方式进行相互之间的交流：非正式、常规项目会议，会上进行简要的技术陈述、共享的正式项目工作手册。[以及电子邮件。]</li>
<li>7.4 项目工作手册”不是独立的一篇文档，它是对项目必须产生的一系列文档进行组织的一种结构。”</li>
<li>7.5 “项目所有的文档都必须是该（工作手册）结构的一部分。”</li>
<li>7.6 需要尽早和仔细地设计工作手册结构。</li>
<li>7.7 事先制订了良好结构的工作手册”可以将后来书写的文字放置在合适的章节中”，并且可以提高产品手册的质量。</li>
<li>7.8 “每一个团队成员应该了解所有的材料（工作手册）。”[我想说的是，每个团队成员应该能够看到所有材料，网页即可满足要求。]</li>
<li>7.9 实时更新是至关重要的。</li>
<li>7.10 工作手册的使用者应该将注意力集中在上次阅读后的变更，以及关于这些变更重要性的评述。</li>
<li>7.11 OS/360项目工作手册开始采用的是纸介质，后来换成了微缩胶片。</li>
<li>7.12 今天[即使在1975年]，共享的电子手册是能更好达到所有这些目标、更加低廉、更加简单的机制。</li>
<li>7.13 仍然需要用变更条和修订日期[或具备同等功能的方法]来标记文字；仍然需要后进先出（LIFO）的电子化变更小结。</li>
<li>7.14 Parnas强烈地认为使每个人看到每件事的目标是完全错误的；各个部分应该被封装，从而没有人需要或者允许看到其他部分的内部结构，只需要了解接口。</li>
<li>7.15 Parnas的建议的确是灾难的处方。</li>
<li>7.16 团队组织的目标是为了减少必要的交流和协作量。</li>
<li>7.17 为了减少交流，组织结构包括了人力划分（division of labor）和限定职责范围（specialization of function）。</li>
<li>7.18 传统的树状组织结构反映了权力的结构原理—不允许双重领导。</li>
<li>7.19 组织中的交流是网状，而不是树状结构，因而所有的特殊组织机制（往往体现成组织结构图中的虚线部分）都是为了进行调整，以克服树状组织结构中交流缺乏的困难。</li>
<li>7.20 每个子项目具有两个领导角色—产品负责人、技术主管或结构师。这两个角色的职能有着很大的区别，需要不同的技能。</li>
<li>7.21 两种角色中的任意组合可以是非常有效的：<ul>
<li>产品负责人和技术主管是同一个人。</li>
<li>产品负责人作为总指挥，技术主管充当其左右手。</li>
<li>技术主管作为总指挥，产品负责人充当其左右手。</li>
</ul>
</li>
</ul>
<p>第8章 胸有成竹</p>
<ul>
<li>8.1 仅仅通过对编码部分的估计，然后乘以任务其他部分的相对系数，是无法得出对整项工作的精确估计的。</li>
<li>8.2 构建独立小型程序的数据不适用于编程系统项目。</li>
<li>8.3 程序开发呈程序规模的指数增长。</li>
<li>8.4 一些发表的研究报告显示指数约为1.5。[Boehm的数据并不完全一致，在1.05和1.2之间变化。1]</li>
<li>8.5 Portman的ICL数据显示相对于其他活动开销，全职程序员仅将50％的时间用于编程和调试。</li>
<li>8.6 IBM的Aron数据显示，生产率是系统各个部分交互的函数，在1.5K千代码行/人年至10K千代码行/人年的范围内变化。</li>
<li>8.7 Harr的Bell实验室数据显示对于已完成的产品，操作系统类的生产率大约是0.6KLOC/人年，编译类工作的生产率大约为2.2KLOC/人年。</li>
<li>8.8 Brooks的OS/360S数据与Harr的数据一致：操作系统0.6～0.8KLOC/人年，编译器2～3 KLOC/人年。</li>
<li>8.9 Corbato的MIT项目MULTICS数据显示，在操作系统和编译器混合类型上的生产率是1.2KLOC/人年，但这些是PL/I的代码行，而其他所有的数据是汇编代码行。</li>
<li>8.10 在基本语句级别，生产率看上去是个常数。</li>
<li>8.11 当使用适当的高级语言时，程序编制的生产率可以提高5倍。</li>
</ul>
<p>第9章 削足适履</p>
<ul>
<li>9.1 除了运行时间以外，所占据的内存空间也是主要开销。特别是对于操作系统，它的很多程序是永久驻留在内存中。</li>
<li>9.2 即便如此，花费在驻留程序所占据内存上的金钱仍是物有所值的，比其他任何在配置上投资的效果要好。规模本身不是坏事，但不必要的规模是不可取的。</li>
<li>9.3 软件开发人员必须设立规模目标，控制规模，发明一些减少规模的方法—就如同硬件开发人员为减少元器件所做的一样。</li>
<li>9.4 规模预算不仅仅在占据内存方面是明确的，同时还应该指明程序对磁盘的访问次数。</li>
<li>9.5 规模预算必须与分配的功能相关联；在指明模块大小的同时，确切定义模块的功能。</li>
<li>9.6 在大型的团队中，各个小组倾向于不断地局部优化，以满足自己的目标，而较少考虑队用户的整体影响。这种方向性的问题是大型项目的主要危险。</li>
<li>9.7 在整个实现的过程期间，系统结构师必须保持持续的警觉，确保连贯的系统完整性。</li>
<li>9.8 培养开发人员从系统整体出发、面向用户的态度是软件编程管理人员最重要的职能。</li>
<li>9.9 在早期应该制订策略，以决定用户可选项目的粗细程度，因为将它们作为整体大包能够节省内存空间。[常常还可以节约市场成本。]</li>
<li>9.10 临时空间的尺寸，以及每次磁盘访问的程序数量是很关键的决策，因为性能是规模的非线性函数。[这个整体决策已显得过时—起初是由于虚拟内存，后来则是成本低廉的内存。现在的用户通常会购买能容纳主要应用程序所有代码的内存。]</li>
<li>9.11 为了取得良好的空间－时间折衷，开发队伍需要得到特定与某种语言或者机型的编程技能培训，特别是在使用新语言或者新机器时。</li>
<li>9.12 编程需要技术积累，每个项目需要自己的标准组件库</li>
<li>9.13 库中的每个组件需要有两个版本，运行速度较快和短小精炼的。[现在看来有些过时。]</li>
<li>9.14 精炼、充分和快速的程序。往往是战略性突破的结果，而不仅仅技巧上的提高。</li>
<li>9.15 这种突破常常是一种新型算法。</li>
<li>9.16 更普遍的是，战略上突破常来自于数据或表的重新表达。数据的表现形式是编程的根本。</li>
</ul>
<p>第10章 提纲挈领</p>
<ul>
<li>10.1 “前提：在一片文件的汪洋中，少数文档形成了关键的枢纽，每个项目管理的工作都围绕着它们运转。它们是经理们的主要个人工具。”</li>
<li>10.2 对于计算机硬件开发项目，关键文档是目标、手册、进度、预算、组织机构图、空间分配、以及机器本身的报价、预测和价格。</li>
<li>10.3 对于大学科系，关键文档类似：目标、课程描述、学位要求、研究报告、课程表和课程的安排、预算、教室分配、教师和研究生助手的分配。</li>
<li>10.4 对于软件项目，要求是相同的：目标、用户手册、内部文档、进度、预算、组织机构图和工作空间分配。</li>
<li>10.5 因此，即使是小型项目，项目经理也应该在项目早期规范化上述的一系列文档。</li>
<li>10.6 以上集合中每一个文档的准备工作都将注意力集中在对讨论的思索和提炼，而书写这项活动需要上百次的细小决定，正是由于它们的存在，人们才能从令人迷惑的现象中得到清晰、确定的策略。</li>
<li>10.7 对每个关键文档的维护提供了状态监督和预警机制。</li>
<li>10.8 每个文档本身就可以作为检查列表或者数据库。</li>
<li>10.9 项目经理的基本职责是使每个人都向着相同的方向前进。</li>
<li>10.10 项目经理的主要日常工作是沟通，而不是做出决定；文档使各项计划和决策在整个团队范围内得到交流。</li>
<li>10.11 只有一小部分管理人员的时间—可能只有20%—用来从自己头脑外部获取信息。</li>
<li>10.12 出于这个原因，广受吹捧的市场概念—支持管理人员的”完备信息管理系统”并不基于反映管理人员行为的有效模型。</li>
</ul>
<p>第11章 未雨绸缪</p>
<ul>
<li>11.1 化学工程师已经认识到无法一步将实验室工作台上的反应过程移到工厂中，需要一个实验性工厂（pilot planet）来为提高产量和在缺乏保护的环境下运作提供宝贵经验。</li>
<li>11.2 对于编程产品而言，这样的中间步骤是同样必要的，但是软件工程师在着手发布产品之前，却并不会常规地进行试验性系统的现场测试。[现在，这已经成为了一项普遍的实践，beta版本。它不同于有限功能的原型，alpha版本，后者同样是我所倡导的实践。]</li>
<li>11.3 对于大多数项目，第一个开发的系统并不合用。它可能太慢、太大，而且难以使用，或者三者兼而有之。</li>
<li>11.4 系统的丢弃和重新设计可以一步完成，也可以一块块地实现。这是个必须完成的步骤。</li>
<li>11.5 将开发的第一个系统—丢弃原型—发布给用户，可以获得时间，但是它的代价高昂—对于用户，使用极度痛苦；对于重新开发的人员，分散了精力；对于产品，影响了声誉，即使最好的再设计也难以挽回名声。</li>
<li>11.6 因此，为舍弃而计划，无论如何，你一定要这样做。</li>
<li>11.7 “开发人员交付的是用户满意程度，而不仅仅是实际的产品。”（Cosgrove）</li>
<li>11.8 用户的实际需要和用户感觉会随着程序的构建、测试和使用而变化。</li>
<li>11.9 软件产品易于掌握的特性和不可见性，导致了它的构建人员（特别容易）面临着永恒的需求变更。</li>
<li>11.10 目标上（和开发策略上）的一些正常变化无可避免，事先为它们做准备总比假设它们不会出现要好得多。</li>
<li>11.11 为变更计划软件产品的技术，特别是细致的模块接口文档—非常地广为人知，但并没有相同规模的实践。尽可能地使用表驱动技术同样是有所帮助的。[现在内存的成本和规模使这项技术越来越出众。]</li>
<li>11.12 高级语言的使用、编译时操作、通过引用的声明整合和自文档技术能减少变更引起的错误。</li>
<li>11.13 采用定义良好的数字化版本将变更量子（阶段）化。[当今的标准实践。]</li>
<li>11.14 程序员不愿意为设计书写文档的原因，不仅仅是由于惰性。更多的是源于设计人员的踌躇—要为自己尝试性的设计决策进行辩解。（Cosgrove）</li>
<li>11.15 为变更组建团队比为变更进行设计更加困难。</li>
<li>11.16 只要管理人员和技术人才的天赋允许，老板必须对他们的能力培养给予极大的关注，使管理人员和技术人才具有互换性；特别是希望能在技术和管理角色之间自由地分配人手的时候。</li>
<li>11.17 具有两条晋升线的高效组织机构，存在着一些社会性的障碍，人们必须警惕和积极地同它做持续的斗争。</li>
<li>11.18 很容易为不同的晋升线建立相互一致的薪水级别，但要同等威信的建立需要一些强烈的心理措施：相同的办公室、一样的支持和技术调动的优先补偿。</li>
<li>11.19 组建外科手术队伍式的软件开发团队是对上述问题所有方面的彻底冲击。对于灵活组织架构问题，这的确是一个长期行之有效的解决方案。</li>
<li>11.20 程序维护基本上不同于硬件的维护；它主要由各种变更组成，如修复设计缺陷、新增功能、或者是使用环境或者配置变换引起的调整。</li>
<li>11.21 对于一个广泛使用的程序，其维护总成本通常是开发成本的40％或更多。</li>
<li>11.22 维护成本受用户数目的严重影响。用户越多，所发现的错误也越多。</li>
<li>11.23 Campbell指出了一个显示产品生命期中每月bug数的有趣曲线，它先是下降，然后攀升。</li>
<li>11.24 缺陷修复总会以（20－50）%的机率引入新的bug</li>
<li>11.25 在每次修复之后，必须重新运行先前所有的测试用例，从而确保系统不会以更隐蔽的方式被破坏。</li>
<li>11.26 能消除、至少是能指明副作用的程序设计方法，对维护成本有很大的影响。</li>
<li>11.27 同样，设计实现的人员越少、接口越少，产生的错误也就越少。</li>
<li>11.28 Lehman和Belady发现模块数量随大型操作系统（OS/360）版本号的增加呈线性增长，但是受到影响的模块以版本号指数的级别增长。</li>
<li>11.29 所有修改都倾向于破坏系统的架构，增加了系统的混乱程度。即使是最熟练的软件维护工作，也只是放缓了系统退化到不可修复混乱的进程，从中必须要重新进行设计。</li>
</ul>
<p>[许多程序升级的真正需要，如性能等，尤其会冲击它的内部结构边界。原有边界引发的不足常常在日后才会出现。]</p>
<p>第12章 干将莫邪</p>
<ul>
<li>12.1 项目经理应该制订一套策略，以及为通用工具的开发分配资源，与此同时，他还必须意识到专业工具的需求。</li>
<li>12.2 开发操作系统的队伍需要自己的目标机器，进行调试开发工作。相对于最快的速度而言，它更需要最大限度的内存，还需要安排一名系统程序员，以保证机器上的标准软件是即时更新和实时可用的。</li>
<li>12.3 同时还需要配备调试机器或者软件，以便在调试过程中，所有类型的程序参数可以被自动计数和测量。</li>
<li>12.4 目标机器的使用需求量是一种特殊曲线：刚开始使用率非常低，突然出现爆发性的增长，接着趋于平缓。</li>
<li>12.5 同天文工作者一样，系统调试总是大部分在夜间完成。</li>
<li>12.6 抛开理论不谈，一次分配给某个小组连续的目标时间块被证明是最好的安排方法，比不同小组的穿插使用更为有效。</li>
<li>12.7 尽管技术不断变化，这种采用时间块来安排匮乏计算机资源的方式仍得以延续20年[在1975年]，是因为它的生产率最高。[在1995年依然如此]</li>
<li>12.8 如果目标机器是新产品，则需要一个目标机器的逻辑仿真装置。这样，可以更快地得到辅助调试平台。即使在真正机器出现之后，仿真装置仍可提供可靠的调试平台。</li>
<li>12.9 主程序库应该被划分成（1）一系列独立的私有开发库；（2）正处在系统测试下的系统集成子库；（3）发布版本。正式的分离和进度提供了控制。</li>
<li>12.10 在编制程序的项目中，节省最大工作量的工具可能是文本编辑系统。</li>
<li>12.11 系统文档中的巨大容量带来了新的不理解问题[例如，看看Unix]，但是它比大多数未能详细描述编程系统特性的短小文章更加可取。</li>
<li>12.12 自顶向下、彻底地开发一个性能仿真装置。尽可能早地开始这项工作，仔细地听取 “它们表达的意见”。</li>
<li>12.13 只有懒散和惰性会妨碍高级语言和交互式编程的广泛应用。[如今它们已经在全世界使用。]</li>
<li>12.14 高级语言不仅仅提升了生产率，而且还改进了调试：bug更少，以及更容易寻找。</li>
<li>12.15 传统的反对意见—功能、目标代码的尺寸、目标代码的速度，随着语言和编译器技术的进步已不再成为问题。</li>
<li>12.16 现在可供合理选择的语言是PL/I。[不再正确。]</li>
<li>12.17 某些应用上，批处理系统决不会被交互式系统所替代。[依然成立。]</li>
<li>12.18 调试是系统编程中很慢和较困难的部分，而漫长的调试周转时间是调试的祸根。</li>
<li>12.19 有限的数据表明了系统软件开发中，交互式编程的生产率至少是原来的两倍。</li>
</ul>
<p>第13章 整体部分</p>
<ul>
<li>13.1 第4、5、6章所意味的煞费苦心、详尽体系结构工作不但使产品更加易于使用，而且使开发更容易进行以及bug更不容易产生。</li>
<li>13.2 V.A.Vyssotsky提出，”许许多多的失败完全源于那些产品未精确定义的地方。”</li>
<li>13.3 在编写任何代码之前，规格说明必须提交给测试小组，以详细地检查说明的完整性和明确性。开发人员自己不会完成这项工作。（Vyssotsky）</li>
<li>13.4 “十年内[1965～1975]，Wirth的自顶向下进行设计[逐步细化]将会是最重要的新型形式化软件开发方法。”</li>
<li>13.5 Wirth主张在每个步骤中，尽可能使用级别较高的表达方法。</li>
<li>13.6 好的自顶向下设计从四个方面避免了bug。</li>
<li>13.7 有时必须回退，推翻顶层设计，重新开始。</li>
<li>13.8 结构化编程中，程序的控制结构仅由支配代码块（相对于任意的跳转）的给定集合所组成。这种方法出色地避免了bug，是一种正确的思考方式。</li>
<li>13.9 Gold结果显示了，在交互式调试过程中，第一次交互取得的工作进展是后续交互的三倍。这实际上获益于在调试开始之前仔细地调试计划。[我认为在1995年依然如此。]</li>
<li>13.10 我发现对良好终端系统的正确使用，往往要求每两小时的终端会话对应于两小时的桌面工作：1小时会话后的清理和文档工作；1小时为下一次计划变更和测试。</li>
<li>13.11 系统调试（相对于单元测试）花费的时间会比预料的更长。</li>
<li>13.12 系统调试的困难程度证明了需要一种完备系统化和可计划的方法。</li>
<li>13.13 系统调试仅仅应该在所有部件能够运作之后开始。（这既不同于为了查出接口bug所采取 “合在一起尝试” 的方法；也不同于在所有构件单元的bug已知，但未修复的情况下，即开始系统调试的做法。）[对于多个团队尤其如此。]</li>
<li>13.14 开发大量的辅助调试平台（scaffolding 脚手架）和测试代码是很值得的，代码量甚至可能会有测试对象的一半。</li>
<li>13.15 必须有人对变更进行控制和文档化，团队成员应使用开发库的各种受控拷贝来工作。</li>
<li>13.16 系统测试期间，一次只添加一个构件。</li>
<li>13.17 Lehman和Belady出示了证据，变更的阶段（量子）要么很大，间隔很宽；要么小和频繁。后者很容易变得不稳定。[Microsoft的一个团队使用了非常小的阶段（量子）。结果是每天晚上需要重新编译生成增长中的系统。]</li>
</ul>
<p>第14章 祸起萧墙</p>
<ul>
<li>14.1 “项目是怎样延迟了整整一年的时间？.一次一天。”</li>
<li>14.2 一天一天的进度落后比起重大灾难，更难以识别、更不容易防范和更加难以弥补。</li>
<li>14.3 根据一个严格的进度表来控制项目的第一个步骤是制订进度表，进度表由里程碑和日期组成。</li>
<li>14.4 里程碑必须是具体的、特定的、可度量的事件，能进行清晰能定义。</li>
<li>14.5 如果里程碑定义得非常明确，以致于无法自欺欺人时，程序员很少会就里程碑的进展弄虚作假。</li>
<li>14.6 对于大型开发项目中的估计行为，政府的承包商所做的研究显示：每两周进行仔细修订的活动时间估计，随着开始时间的临近不会有太大的变化；期间内对时间长短的过高估计，会随着活动的进行持续下降；过低估计直到计划的结束日期之前大约三周左右，才有所变化。</li>
<li>14.7 慢性进度偏离是士气杀手。[Microsoft的Jim McCarthy说：”如果你错过了一个最终期限（deadline），确保制订下一条deadline”</li>
<li>14.8 进取对于杰出的软件开发团队，同优秀的棒球队伍一样，是不可缺少的必要品德。</li>
<li>14.9 不存在关键路径进度的替代品，使人们能够辨别计划偏移的情况。</li>
<li>14.10 PERT的准备工作是PERT图使用中最有价值的部分。它包括了整个网状结构的展开、任务之间依赖关系的识别、各个任务链的估计。这些都要求在项目早期进行非常专业的计划。</li>
<li>14.11 第一份PERT图总是很恐怖的，不过人们总是不断进行努力，运用才智制订下一份PERT图。</li>
<li>14.12 PERT图为前面那个泄气的借口，”其他的部分反正会落后”，提供了答案。</li>
<li>14.13 每个老板同时需要采取行动的异常信息以及用来进行分析和早期预警的状态数据。</li>
<li>14.14 状态的获取是困难的，因为下属经理有充分的理由不提供信息共享。</li>
<li>14.15 老板的不良反应肯定会对信息的完全公开造成压制；相反，仔细区分状态报告、毫无惊慌地接收报告、决不越俎代庖，将能鼓励诚实的汇报。</li>
<li>14.16 必须有评审的机制，从而所有成员可以通过它了解真正的状态。出于这个目的，里程碑的计划和完成文档是关键。</li>
<li>14.17 Vyssotsky：我发现在里程碑报告中很容易记录”计划（老板的日期）”和”估计（最基层经理的日期）”的日期。项目经理必须停止对这些日期的怀疑。”</li>
<li>14.18 对于大型项目，一个对里程碑报告进行维护的计划和控制（Plan and Control）小组是非常可贵的。</li>
</ul>
<p>第15章 另外一面</p>
<ul>
<li>15.1 对于软件编程产品来说，程序向用户所呈现的面貌与提供给机器识别的内容同样重要。</li>
<li>15.2 即使对于完全开发给自己使用的程序，描述性文字也是必须的，因为它们会被用户－作者所遗忘。</li>
<li>15.3 培训和管理人员基本上没有能向编程人员成功地灌输对待文档的积极态度—文档能在整个生命周期对克服懒惰和进度的压力起促进激励作用。</li>
<li>15.4 这样的失败并不都是因为缺乏热情或者说服力，而是没能正确地展示如何有效和经济地编制文档。</li>
<li>15.5 大多数文档只提供了很少的总结性内容。必须放慢脚步，稳妥地进行。</li>
<li>15.6 由于关键的用户文档包含了跟软件相关的基本决策，所以它的绝大部分需要在程序编制之前书写，它包括了9项内容（参见相应章节）。</li>
<li>15.7 每一份发布的程序拷贝应该包括一些测试用例，其中一部分用于校验输入数据，一部分用于边界输入数据，另一部分用于无效的输入数据。</li>
<li>15.8 对于必须修改程序的人而言，他们所需要程序内部结构文档，同样要求一份清晰明了的概述，它包括了5项内容（参见相应章节）。</li>
<li>15.9 流程图是被吹捧得最过分的一种程序文档。详细逐一记录的流程图是一件令人生厌的事情，而且高级语言的出现使它显得陈旧过时。（流程图是图形化的高级语言。）</li>
<li>15.10 如果这样，很少有程序需要一页纸以上的流程图。[在这一点上，MILSPEC军用标准实在错得很厉害。]</li>
<li>15.11 即使的确需要一张程序结构图，也并不需要遵照ANSI的流程图标准。</li>
<li>15.12 为了使文档易于维护，将它们合并至源程序是至关重要的，而不是作为独立文档进行保存。</li>
<li>15.13 最小化文档负担的3个关键思路：<ul>
<li>借助那些必须存在的语句，如名称和声明等，来附加尽可能多的”文档”信息。</li>
<li>使用空格和格式来表现从属和嵌套关系，提高程序的可读性。</li>
<li>以段落注释，特别是模块标题的形式，向程序中插入必要的记叙性文字。</li>
</ul>
</li>
<li>15.14 程序修改人员所使用的文档中，除了描述事情如何以外，还应阐述它为什么那样。对于加深理解，目的是非常关键的，但即使是高级语言的语法，也不能表达目的。</li>
<li>15.15 在线系统的高级语言（应该使用的工具）中，自文档化技术发现了它的绝佳应用和强大功能。</li>
</ul>
<p>第16章 没有银弹</p>
<ul>
<li>E.1 软件系统可能是人类创造中最错综复杂的事物（从不同类型组成部分数量的角度出发）。</li>
<li>E.2 软件工程的焦油坑在将来很长一段时间内会继续地使人们举步维艰，无法自拔。</li>
</ul>
<hr>
<h2 id="职业的乐趣"><a href="#职业的乐趣" class="headerlink" title="职业的乐趣"></a>职业的乐趣</h2><p>编程为什么有趣？作为回报，它的从业者期望得到什么样的快乐？</p>
<p>首先是一种创建事物的纯粹快乐。如同小孩在玩泥巴时感到愉快一样，成年人喜欢创建事物，特别是自己进行设计。我想这种快乐是上帝创造世界的折射，一种呈现在每片独特、崭新的树叶和雪花上的喜悦。</p>
<p>其次，快乐来自于开发对其他人有用的东西。内心深处，我们期望其他人使用我们的劳动成果，并能对他们有所帮助。从这个方面，这同小孩用粘土为”爸爸办公室”捏制铅笔盒没有本质的区别。</p>
<p>第三是整个过程体现出魔术般的力量——将相互啮合的零部件组装在一起，看到它们精妙地运行，得到预先所希望的结果。比起弹珠游戏或点唱机所具有的迷人魅力，程序化的计算机毫不逊色。</p>
<p>第四是学习的乐趣，来自于这项工作的非重复特性。人们所面临的问题，在某个或其它方面总有些不同。因而解决问题的人可以从中学习新的事物：有时是实践上的，有时是理论上的，或者兼而有之。</p>
<p>最后，乐趣还来自于工作在如此易于驾驭的介质上。程序员，就像诗人一样，几乎仅仅工作在单纯的思考中。程序员凭空地运用自己的想象，来建造自己的”城堡”。很少有这样的介质——创造的方式如此得灵活，如此得易于精炼和重建，如此得容易实现概念上的设想。（不过我们将会看到，容易驾驭的特性也有它自己的问题）然而程序毕竟同诗歌不同，它是实实在在的东西；可以移动和运行，能独立产生可见的输出；能打印结果，绘制图形，发出声音，移动支架。神话和传说中的魔术在我们的时代已变成了现实。在键盘上键入正确的咒语，屏幕会活动、变幻，显示出前所未有的或是已经存在的事物。</p>
<p>编程非常有趣，在于它不仅满足了我们内心深处进行创造的渴望，而且还愉悦了每个人内在的情感。</p>
<hr>
<h2 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h2><p>在时间进度中，顺序限制所造成的影响，没有哪个部分比单元调试和系统测试所受到的牵涉更彻底。而且，要求的时间依赖于所遇到的错误、缺陷数量以及捕捉它们的程度。理论上，缺陷的数量应该为零。但是，由于我们的乐观主义，通常实际出现的缺陷数量比预料的要多得多。因此，系统测试进度的安排常常是编程中最不合理的部分。</p>
<p>对于软件任务的进度安排，以下是我使用了很多年的经验法则：</p>
<ul>
<li>1/3 计划</li>
<li>1/6 编码</li>
<li>1/4 构件测试和早期系统测试</li>
<li>1/4 系统测试，所有的构件已完成</li>
</ul>
<p>在许多重要的方面，它与传统的进度安排方法不同：</p>
<ol>
<li>分配给计划的时间比寻常的多。即便如此，仍不足以产生详细和稳定的计划规格说明，也不足以容纳对全新技术的研究和摸索。</li>
<li>对所完成代码的调试和测试，投入近一半的时间，比平常的安排多很多。</li>
<li>容易估计的部分，即编码，仅仅分配了六分之一的时间。</li>
</ol>
<p>通过对传统项目进度安排的研究，我发现很少项目允许为测试分配一半的时间，但大多数项目的测试实际上是花费了进度中一半的时间。它们中的许多项目，在系统测试之前还能保持进度。或者说，除了系统测试，进度基本能保证。</p>
<p>特别需要指出的是，不为系统测试安排足够的时间简直就是一场灾难。因为延迟发生在项目快完成的时候。直到项目的发布日期，才有人发现进度上的问题。因此，坏消息没有任何预兆，很晚才出现在客户和项目经理面前。</p>
<p>另外，此时此刻的延迟具有不寻常的、严重的财务和心理上的反应。在此之前，项目已经配置了充足的人员，每天的人力成本也已经达到了最大的限度。更重要的是，当软件用来支持其他的商业活动（计算机硬件到货，新设备、服务上线等等）时，这些活动延误出现即将发布前，那么将付出相当高的商业代价。</p>
<p>实际上，上述的二次成本远远高于其他开销。因此，在早期进度策划时，允许充分的系统测试时间是非常重要的。</p>
<hr>
<h1 id="第-11-章-未雨绸缪（Plan-to-Throw-One-Away）"><a href="#第-11-章-未雨绸缪（Plan-to-Throw-One-Away）" class="headerlink" title="第 11 章 未雨绸缪（Plan to Throw One Away）"></a>第 11 章 未雨绸缪（Plan to Throw One Away）</h1><p>不变只是愿望，变化才是永恒。</p>
<p>——SWIFT</p>
<p>普遍的做法是，选择一种方法，试试看；如果失败了，没关系，再试试别的。不管怎么样，重要的是先去尝试。</p>
<p>——富兰克林 D. 罗斯福</p>
<p>There is nothing in this world constant but inconstancy.</p>
<p>——SWIFT</p>
<p>It is common sense to take a method and try it. If it fails, admit it frankly and try another. But above all, try something.</p>
<p>——FRANKLIN D. ROOSEVELT</p>
<h2 id="试验性工厂和增大规模"><a href="#试验性工厂和增大规模" class="headerlink" title="试验性工厂和增大规模"></a>试验性工厂和增大规模</h2><p>化学工程师很早就认识到，在实验室可以进行的反应过程，并不能在工厂中一步实现。一个被称为”实验性工厂（pilot planet）”的中间步骤是非常必要的，它会为提高产量和在缺乏保护的环境下运作提供宝贵经验。例如，海水淡化的实验室过程会先在产量为 10,000 加仑/每天的试验场所测试，然后再用于 2,000,000 加仑/每天的净化系统。</p>
<p>软件系统的构建人员也面临类似的问题，但似乎并没有吸取教训。一个接一个的软件项目都是一开始设计算法，然后将算法应用到待发布的软件中，接着根据时间进度把第一次开发的产品发布给顾客。</p>
<p>对于大多数项目，第一个开发的系统并不合用。它可能太慢、太大，而且难以使用，或者三者兼而有之。要解决所有的问题，除了重新开始以外，没有其他的办法——即开发一个更灵巧或者更好的系统。系统的丢弃和重新设计可以一步完成，也可以一块块地实现。所有大型系统的经验都显示，这是必须完成的步骤。而且，新的系统概念或新技术会不断出现，所以开发的系统必须被抛弃，但即使是最优秀的项目经理，也不能无所不知地在最开始解决这些问题。</p>
<p>因此，管理上的问题不再是”是否构建一个试验性的系统，然后抛弃它？”你必须这样做。现在的问题是”是否预先计划抛弃原型的开发，或者是否将该原型发布给用户？”从这个角度看待问题，答案更加清晰。将原型发布给用户，可以获得时间，但是它的代价高昂——对于用户，使用极度痛苦；对于重新开发的人员，分散了精力；对于产品，影响了声誉，即使最好的再设计也难以挽回名声。</p>
<p>因此，为舍弃而计划，无论如何，你一定要这样做。</p>
<h2 id="唯一不变的就是变化本身"><a href="#唯一不变的就是变化本身" class="headerlink" title="唯一不变的就是变化本身"></a>唯一不变的就是变化本身</h2><p>一旦认识到试验性的系统必须被构建和丢弃，具有变更思想的重新设计不可避免，从而直面整个变化现象是非常有用的。第一步是接受这样的事实：变化是与生俱来的，不是不合时宜和令人生厌的异常情况。Cosgrove 很有洞察力地指出，开发人员交付的是用户满意程度，而不仅仅是实际的产品。用户的实际需要和用户感觉会随着程序的构建、测试和使用而变化。</p>
<p>当然对于硬件产品而言，同样需要满足要求，例如新型汽车或者计算机。但物体的客观存在容纳和阶段化（量子化）了用户对变更的要求。软件产品易于掌握的特性和不可见性，导致它的构建人员面临永恒的需求变更。</p>
<p>我从不建议顾客目标和需求的所有变更必须、能够、或者应该整合到设计中。项目开始时建立的基准，肯定会随着开发的进行越来越高，甚至开发不出任何产品。</p>
<p>然而，目标上的一些变化无可避免，事先为它们做准备总比假设它们不会出现要好得多。不但目标上的变化不可避免，而且设计策略和技术上的变化也不可避免。抛弃原型概念本身就是对事实的接受——随着学习的过程更改设计。</p>
<hr>
<h2 id="需要什么样的文档"><a href="#需要什么样的文档" class="headerlink" title="需要什么样的文档"></a>需要什么样的文档</h2><p>不同用户需要不同级别的文档。某些用户仅仅偶尔使用程序，有些用户必须依赖程序，还有一些用户必须根据环境和目的的变动对程序进行修改。</p>
<p>使用程序。每个用户都需要一段对程序进行描述的文字。可是大多数文档只提供了很少的总结性内容，无法达到用户要求，就像是描绘了树木，形容了树叶，但却没有一副森林的图案。为了得到一份有用的文字描述，就必须放慢脚步，稳妥地进行。</p>
<ol>
<li>目的。主要的功能是什么？开发程序的原因是什么？</li>
<li>环境。程序运行在什么样的机器、硬件配置和操作系统上？</li>
<li>范围。输入的有效范围是什么？允许显示的合法范围是什么？</li>
<li>实现功能和使用的算法。精确地阐述它做了什么。</li>
<li>输入－输出格式。必须是确切和完整的。</li>
<li>操作指令。包括控制台及输出内容中正常和异常结束的行为。</li>
<li>选项。用户的功能选项有哪些？如何在选项之间进行挑选？</li>
<li>运行时间。在指定的配置下，解决特定规模问题所需要的时间？</li>
<li>精度和校验。期望结果的精确程度？如何进行精度的检测？</li>
</ol>
<p>一般来说，三、四页纸常常就可以容纳以上所有的信息。不过往往需要特别注意的是表达的简洁和精确。由于它包含了和软件相关的基本决策，所以这份文档的绝大部分需要在程序编制之前书写。</p>
<p>验证程序。除了程序的使用方法，还必须附带一些程序正确运行的证明，即测试用例。</p>
<p>每一份发布的程序拷贝应该包括一些可以例行运行的小测试用例，为用户提供信心——他拥有了一份可信赖的拷贝，并且正确地安装到了机器上。</p>
<p>然后，需要得到更加全面的测试用例，在程序修改之后，进行常规运行。这些用例可以根据输入数据的范围划分成三个部分。</p>
<ol>
<li>针对遇到的大多数常规数据和程序主要功能进行测试的用例。它们是测试用例的主要组成部分。</li>
<li>数量相对较少的合法数据测试用例，对输入数据范围边界进行检查，确保最大可能值、最小可能值和其他有效特殊数据可以正常工作。</li>
<li>数量相对较少的非法数据测试用例，在边界外检查数据范围边界，确保无效的输入能有正确的数据诊断提示。</li>
</ol>
<p>修改程序。调整程序或者修复程序需要更多的信息。显然，这要求了解全部的细节，并且这些细节已经记录在注释良好的列表中。和一般用户一样，修改者迫切需要一份清晰明了的概述，不过这一次是关于系统的内部结构。那么这份概述的组成部分是什么呢？</p>
<ol>
<li>流程图或子系统的结构图，对此以下有更详细的论述。</li>
<li>对所用算法的完整描述，或者是对文档中类似描述的引用。</li>
<li>对所有文件规划的解释。</li>
<li>数据流的概要描述——从磁盘或者磁带中，获取数据或程序处理的序列——以及在每个处理过程完成的操作。</li>
<li>初始设计中，对已预见修改的讨论；特性、功能回调的位置以及出口；原作者对可能会扩充的地方以及可能处理方案的一些意见。另外，对隐藏缺陷的观察也同样很有价值。</li>
</ol>
]]></content>
      <categories>
        <category>多读书多看报</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>软件设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记</title>
    <url>/2022/04/15/Spring/</url>
    <content><![CDATA[<h1 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1 Spring"></a>1 Spring</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><ul>
<li>春天 —&gt;给软件行业带来了春天</li>
<li>2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。</li>
<li>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</li>
<li>Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</li>
<li>Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术</li>
</ul>
<p>官方下载地址 ： <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h2><ul>
<li>Spring是一个开源免费的框架 (容器)！</li>
<li>Spring是一个轻量级的框架 , 非侵入式的</li>
<li><strong>控制反转 IoC  , 面向切面 Aop</strong></li>
<li>对事务的支持 , 对框架整合的支持</li>
</ul>
<p><strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）</strong></p>
<h2 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h2><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 .</p>
<p><img src="/2022/04/15/Spring/untitled.png" alt="untitled"></p>
<p><img src="/2022/04/15/Spring/untitled-1597811081095.png" alt="untitled"></p>
<ul>
<li><strong>核心容器</strong>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用<em>控制反转</em>（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>
<li><strong>Spring 上下文</strong>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li>
<li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</li>
<li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>
<li><strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li>
<li><strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li>
<li><strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li>
</ul>
<h2 id="1-4-拓展"><a href="#1-4-拓展" class="headerlink" title="1.4 拓展"></a>1.4 拓展</h2><p>现代化的Java开发，其实就是基于Spring的开发</p>
<p><img src="/2022/04/15/Spring/untitled-1597811106113.png" alt="untitled"></p>
<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>Spring Cloud是基于SpringBoot实现的</li>
</ul>
</li>
</ul>
<p>现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提需要完全掌握Spring及SpringMVC</p>
<p>弊端：发展太久了之后，违背了原来的理念，配置十分繁琐</p>
<h1 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2 IOC理论推导"></a>2 IOC理论推导</h1><ol>
<li><p>UserDao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>UserDaoImpl 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;获取用户数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>UserService 业务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>UserServiceImpl 业务实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">       userDao.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">   service.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>把Userdao的实现类增加一个 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoMySqlImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;MySql获取用户数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>紧接着我们要去使用MySql的话 , 我们就需要去service实现类里面修改对应的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoMySqlImpl</span>();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">       userDao.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>代码量十分大，修改一次的成本十分昂贵！</strong></p>
<p>我们使用一个Set接口实现，已经发生了革命性的变化！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	<span class="comment">// 利用set实现</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">       userDao.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>之前，程序是主动创建对象，控制权在程序员手上！</li>
<li>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象！</li>
</ul>
<p>这种思想，从本质上解决了问题，我们程序员不用再去管对象的创建了。系统的耦合性大大降低，可以专注在业务的实现上！这是IOC的原型！</p>
<h2 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h2><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p>
<p><img src="https://img-blog.csdnimg.cn/20200628180055895.png#pic_center" alt="在这里插入图片描述"></p>
<p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p>
<p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p>
<h1 id="3-HelloSpring"><a href="#3-HelloSpring" class="headerlink" title="3 HelloSpring"></a>3 HelloSpring</h1><p>xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用Spring来创建对象，在Spring这些都称为Bean</span></span><br><span class="line"><span class="comment">    bean = 对象  new Hello（）;</span></span><br><span class="line"><span class="comment">    类型 变量名 = new 类型（）；</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment">    id= 变量名</span></span><br><span class="line"><span class="comment">    class = new的对象</span></span><br><span class="line"><span class="comment">    property 相当于给对象中的属性设置值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取Spring的上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//对象现在都在spring中管理了，要使用直接取就可以了</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello)context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4 IOC创建对象的方式"></a>4 IOC创建对象的方式</h1><ol>
<li><p>使用无参构造创建对象，默认</p>
</li>
<li><p>假设我们要使用有参构造创建对象</p>
<ol>
<li>下标赋值</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.User&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zzz&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>构造参数类型</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zzz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>构造参数名</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了</p>
<h1 id="5-Spring配置"><a href="#5-Spring配置" class="headerlink" title="5 Spring配置"></a>5 Spring配置</h1><h2 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置别名：在获取Bean的时候可以使用别名获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;zzzzzzz&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean就是java对象,由Spring创建和管理--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   id : bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span></span><br><span class="line"><span class="comment">   如果配置id,又配置了name,那么name是别名</span></span><br><span class="line"><span class="comment">   name可以设置多个别名,可以用逗号,分号,空格隔开</span></span><br><span class="line"><span class="comment">   如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   class : bean的全限定名=包名+类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello2 h2,h3;h4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2-import"><a href="#5-2-import" class="headerlink" title="5.2 import"></a>5.2 import</h2><p>这个import,一般用于团队开发使用，他可以将多个配置文件，导入合并为一个；</p>
<p>假设，现在项目中有多个人开发，这三个人复制不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;&#123;path&#125;/beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="6依赖注入"><a href="#6依赖注入" class="headerlink" title="6依赖注入"></a>6依赖注入</h1><h2 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h2><h2 id="6-2-Set方式注入-【重点】"><a href="#6-2-Set方式注入-【重点】" class="headerlink" title="6.2 Set方式注入 【重点】"></a>6.2 Set方式注入 【重点】</h2><ul>
<li>依赖注入：Set注入<ul>
<li>依赖：bean对象的创建依赖于容器</li>
<li>注入：bean对象中的所有属性，由容器来注入</li>
</ul>
</li>
</ul>
<ol>
<li>模拟环境搭建</li>
<li>两个实体类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBooks</span><span class="params">(String[] books)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getHobbies</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getCard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getGames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGames</span><span class="params">(Set&lt;String&gt; games)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(Properties info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWife</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWife</span><span class="params">(String wife)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address.toString() +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, ganmes=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>address</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用Spring来创建对象，在Spring这些都称为Bean</span></span><br><span class="line"><span class="comment">    bean = 对象  new Hello（）;</span></span><br><span class="line"><span class="comment">    类型 变量名 = new 类型（）；</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment">    id= 变量名</span></span><br><span class="line"><span class="comment">    class = new的对象</span></span><br><span class="line"><span class="comment">    property 相当于给对象中的属性设置值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        第一种 普通值注入，直接用value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;z中z&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        第二种，beann注入  ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        第三种，数组注入  ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        List--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1231231&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>zz<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="6-3-扩展方式注入"><a href="#6-3-扩展方式注入" class="headerlink" title="6.3 扩展方式注入"></a>6.3 扩展方式注入</h2><p>可以使用p命名空间或c命名空间进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--        p命名空间注入可以直接注入属性值 property--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;zz&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        c命名空间注入 通过构造器注入  construct-args --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;zz&quot;</span>/&gt;</span>   </span><br></pre></td></tr></table></figure>
<p>注意，p命名和c命名不能直接使用，需要导入约束XML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>
<p>6.4 Bean的作用域</p>
<p><img src="/2022/04/15/Spring/image-20200819184044908.png" alt="image-20200819184044908"></p>
<ol>
<li><p>代理模式（Spring默认）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;zz&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原型模型：每次从容器中get的时候都会产生一个新对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;user2&quot; class=&quot;com.zz.pojo.User&quot; c:age=&quot;18&quot; c:name=&quot;zz&quot; scope=&quot;prototype&quot;/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其余的 request session application只能在web开发中使用</p>
</li>
</ol>
<h1 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7 Bean的自动装配"></a>7 Bean的自动装配</h1><ul>
<li>自动装配是Spring满足bean依赖的一种方式</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>
</ul>
<p>在Spring中有三种装配方式</p>
<ol>
<li>在xml中显示的配置</li>
<li>在java中显示的配置</li>
<li>隐式的自动装配的bean 【重要】</li>
</ol>
<h2 id="7-1-测试"><a href="#7-1-测试" class="headerlink" title="7.1 测试"></a>7.1 测试</h2><p>环境搭建：一个人有两个宠物</p>
<h2 id="7-2-byName自动装配"><a href="#7-2-byName自动装配" class="headerlink" title="7.2 byName自动装配"></a>7.2 byName自动装配</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byName 会自动在容器上下文中查找和自己对象set方法后面的值对应的beanid</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zz&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="7-3-byType自动装配"><a href="#7-3-byType自动装配" class="headerlink" title="7.3 byType自动装配"></a>7.3 byType自动装配</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;--</span><br><span class="line">byType 会自动在容器上下文中查找和自己对象类型对应的bean</span><br><span class="line">--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zz&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>小结</p>
<ul>
<li>byName的需要需要保证bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</li>
<li>byType的时候，需要保证所有的bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li>
</ul>
<h2 id="7-4-使用注解自动装配"><a href="#7-4-使用注解自动装配" class="headerlink" title="7.4 使用注解自动装配"></a>7.4 使用注解自动装配</h2><p>jdk1.5支持注解，Spring从2.5开始支持注解</p>
<blockquote>
<p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML.</p>
</blockquote>
<p>要使用注解须知：</p>
<ol>
<li><p>导入约束 context约束</p>
</li>
<li><p>配置注解的支持     <context:annotation-config></context:annotation-config></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>@Autowired<br>直接在属性上使用即可，也可以在set方法上使用</p>
<p>使用Autowired我们可以不用编写set方法了，前提是你这个自动装配的属性在 IOC（Spring）容器中存在，且符合名字byName</p>
</li>
</ol>
<p>@Nullable</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Nullable	字段标记了这个注解，说明这个字段可以为null;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="comment">//如果显示定义了Autowired的required属性为false，说明这个对象可以为Null,否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【<strong>@Autowired</strong>】完成的时候，我们可以使用==<strong>@Qualifier(value = “xxx”)</strong>==去配合@Autowire的使用，指定一个唯一的bean对象注入！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource( name = &quot;cat3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>小结：</strong></p>
<p>@Resource和@Autowired的区别：</p>
<ul>
<li>都是用来自动转配的，都可以放在属性字段上</li>
<li>@Autowired 是通过byType的方式实现，而且必须要求这个对象存在！【常用】</li>
<li>@Resource 默认通过byName的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】</li>
<li>执行顺序不同: @Autowired 通过byType的方式实现。@Resource默认通过byName的方式实现。</li>
</ul>
</blockquote>
<h1 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8 使用注解开发"></a>8 使用注解开发</h1><p>在spring4之后，使用注解开发，必须要保证aop包的导入</p>
<p><img src="/2022/04/15/Spring/image-20200819194212218.png" alt="image-20200819194212218"></p>
<p>使用注解需要导入contex的约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zz.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-1-bean"><a href="#8-1-bean" class="headerlink" title="8.1 bean"></a>8.1 bean</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id = &quot;user&quot; class= &quot;com.zz.pojo.User&quot;&gt;</span></span><br><span class="line"><span class="comment">//组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zz&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="8-2-属性注入"><a href="#8-2-属性注入" class="headerlink" title="8.2 属性注入"></a>8.2 属性注入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name ;</span><br><span class="line">    <span class="meta">@Value(&quot;zz&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-3、衍生的注解"><a href="#8-3、衍生的注解" class="headerlink" title="8.3、衍生的注解"></a>8.3、衍生的注解</h2><p>@Component有几个衍生注解，会按照web开发中，mvc架构中分层。</p>
<ul>
<li>dao （@Repository）</li>
<li>service（@Service）</li>
<li>controller（@Controller）</li>
</ul>
<p><strong>这四个注解的功能是一样的，都是代表将某个类注册到容器中</strong></p>
<h2 id="8-4、自动装配置"><a href="#8-4、自动装配置" class="headerlink" title="8.4、自动装配置"></a>8.4、自动装配置</h2><p>@Autowired：默认是byType方式，如果匹配不上，就会byName</p>
<p>@Nullable：字段标记了这个注解，说明该字段可以为空</p>
<p>@Resource：默认是byName方式，如果匹配不上，就会byType</p>
<h2 id="8-5、作用域-scope"><a href="#8-5、作用域-scope" class="headerlink" title="8.5、作用域@scope"></a>8.5、作用域@scope</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型模式prototype，单例模式singleton</span></span><br><span class="line"><span class="comment">//scope(&quot;prototype&quot;)相当于&lt;bean scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;kuangshen&quot;/&gt; </span></span><br><span class="line">    <span class="meta">@value(&quot;kuangshen&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> String name; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//也可以放在set方法上面</span></span><br><span class="line">    <span class="meta">@value(&quot;kuangshen&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-6-小结"><a href="#8-6-小结" class="headerlink" title="8.6 小结"></a>8.6 小结</h2><p><strong>xml与注解：</strong></p>
<ul>
<li>xml更加万能，维护简单，适用于任何场合</li>
<li>注解，不是自己的类使用不了，维护复杂</li>
</ul>
<p><strong>最佳实践：</strong></p>
<ul>
<li>xml用来管理bean</li>
<li>注解只用来完成属性的注入</li>
<li>要开启注解支持</li>
</ul>
<h1 id="9-使用Java的方式配置Spring"><a href="#9-使用Java的方式配置Spring" class="headerlink" title="9 使用Java的方式配置Spring"></a>9 使用Java的方式配置Spring</h1><p>完全不适用Spring的xml配置了，全权交给Java来做</p>
<p>JavaConfig是Spring的一个子项目，在Spring4之后，它成为了核心功能</p>
<p><img src="/2022/04/15/Spring/image-20200819200857438.png" alt="image-20200819200857438"></p>
<p>User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Value(&quot;zz&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个也会被Spring容器托管，注册到容器中，因为他本就是就是一个Component</span></span><br><span class="line"><span class="comment">//Configuration 代表这事一个配置类，就等同于beans.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zz.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个bean 就相当于之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">//这个方法的名字相当于 id</span></span><br><span class="line">    <span class="comment">// 返回值 相当于class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//如果完全使用配置类方法去做，就只能通过AnnotationConfig上下文来获取容器，通过配置类的class对象加载</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)context.getBean(<span class="string">&quot;getUser&quot;</span>);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="10-代理模式"><a href="#10-代理模式" class="headerlink" title="10 代理模式"></a>10 代理模式</h1><p>为什么要学习代理模式？</p>
<p>因为这就是SpringAOP的底层【SpringAOP和SpringMVC】</p>
<ul>
<li>动态代理</li>
<li>静态代理</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDE0Mjc4NDYucG5n?x-oss-process=image/format,png" alt="image-20200803101427846"></p>
<h2 id="10-1-静态代理"><a href="#10-1-静态代理" class="headerlink" title="10.1 静态代理"></a>10.1 静态代理</h2><p>角色分析</p>
<ul>
<li>抽象角色：一般使用接口或抽象类解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作</li>
<li>客户：访问代理对象的人</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>真实角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>代理角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        host.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中介费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//签合同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hetong</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>客户端访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//房东要租房子</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">//代理，中介帮房东组房子，代理一般会有一些附属操作</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line">        <span class="comment">//不用面对房东，直接找中介租房</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共业务</li>
<li>公共交给代理角色，实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色会产生一个代理角色，代码量翻倍，开发效率低</li>
</ul>
<h2 id="10-2-加深理解"><a href="#10-2-加深理解" class="headerlink" title="10.2 加深理解"></a>10.2 加深理解</h2><p><img src="/2022/04/15/Spring/image-20200820133318038.png" alt="image-20200820133318038"></p>
<p>UserServive</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Proxy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserServiceImpl userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Client</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="type">UserServiceProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>();</span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="10-3-动态代理"><a href="#10-3-动态代理" class="headerlink" title="10.3 动态代理"></a>10.3 动态代理</h2><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类是动态生成的，不是直接写好的</li>
<li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul>
<li>基于接口—JDK动态代理</li>
<li>基于类：cglib</li>
<li>java字节码实现 javassist</li>
</ul>
</li>
</ul>
<p>需要了解两个类：Proxy代理 InvocationHandler调用处理程序</p>
<p>动态代理的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共业务</li>
<li>公共交给代理角色，实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理</li>
<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li>
<li>一个动态代理类可以实现多个类，只要是实现了同一个接口即可</li>
</ul>
<h1 id="11-AOP"><a href="#11-AOP" class="headerlink" title="11 AOP"></a>11 AOP</h1><h2 id="11-1-什么是AOP"><a href="#11-1-什么是AOP" class="headerlink" title="11.1 什么是AOP"></a>11.1 什么是AOP</h2><p>AOP（Aspect Oriented Programming）意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中一个重要内容，是函数式编程的一种衍生泛型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发效率</p>
<p><img src="/2022/04/15/Spring/image-20200820141732996.png" alt="image-20200820141732996"></p>
<h2 id="11-2-AOP在Spring中的作用"><a href="#11-2-AOP在Spring中的作用" class="headerlink" title="11.2 AOP在Spring中的作用"></a>11.2 AOP在Spring中的作用</h2><p>==提供声明式事务，允许用户自定义切面==</p>
<ul>
<li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是需要关注的部分，就是横切关注点，如日志，安全，缓存，事务等</li>
<li>切面（Aspect）:横切关注点 被模块化的特殊对象。即，它是一个类</li>
<li>通知（Advice）:切面必须要完成的工作，即，它是类中的一个方法</li>
<li>目标（Target）：被通知对象</li>
<li>代理（Proxy）：向目标对象应用通知之后创建的对象</li>
<li>切入点（PointCut）:切面通知执行的“地点”的定义</li>
<li>连接点（JointPoint）：与切入点匹配的执行点</li>
</ul>
<p><img src="/2022/04/15/Spring/image-20200820142829203.png" alt="image-20200820142829203"></p>
<p>在SpringAOP中，通过Advice定义横切逻辑，Spring支持5中类型的Advice</p>
<p><img src="/2022/04/15/Spring/image-20200820143011444.png" alt="image-20200820143011444"></p>
<p>即AOP在不改变原有代码的情况下，取增加新的功能</p>
<h2 id="11-3-使用Spring实现AOP"><a href="#11-3-使用Spring实现AOP" class="headerlink" title="11.3 使用Spring实现AOP"></a>11.3 使用Spring实现AOP</h2><p>【重点】使用AOP织入，需要导入一个jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方式一：使用Spring的API接口"><a href="#方式一：使用Spring的API接口" class="headerlink" title="方式一：使用Spring的API接口"></a>方式一：使用Spring的API接口</h3><p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">		https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">		https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    方式一，使用原生的Spring API接口--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置aop 需要导入aop的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        切入点 expression表达式  execution(要执行的位置 * * * * *) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zz.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--执行环绕添加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态代理代理的是接口，不是实现类</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.select();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方式二：自定义类实现AOP"><a href="#方式二：自定义类实现AOP" class="headerlink" title="方式二：自定义类实现AOP"></a>方式二：自定义类实现AOP</h3><p>diy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====before=========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====after=========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    方式二 自定义类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.div.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        自定义切面，ref 要引入的类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zz.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方式三：使用注解实现"><a href="#方式三：使用注解实现" class="headerlink" title="方式三：使用注解实现"></a>方式三：使用注解实现</h3><p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    方式三--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.div.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    开启注解支持  JDK（默认）proxy-target-class=&quot;false&quot;   cglib  proxy-target-class=&quot;true&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>Annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.zz.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======before======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.zz.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======after======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在环绕增强中，我们可以给定一个参数，代表要获取处理切入的点</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.zz.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(signature);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="12-整合MyBatis"><a href="#12-整合MyBatis" class="headerlink" title="12 整合MyBatis"></a>12 整合MyBatis</h1><p>步骤：</p>
<ol>
<li>导入相关jar包<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql</li>
<li>spring</li>
<li>aop</li>
<li>mybatis-spring</li>
</ul>
</li>
<li>编写配置文件</li>
<li>测试</li>
</ol>
<h2 id="12-1-回忆MyBatis"><a href="#12-1-回忆MyBatis" class="headerlink" title="12.1 回忆MyBatis"></a>12.1 回忆MyBatis</h2><ol>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>编写核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zz.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>编写Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zz.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="12-2-MyBatis-Spring"><a href="#12-2-MyBatis-Spring" class="headerlink" title="12.2 MyBatis-Spring"></a>12.2 MyBatis-Spring</h2><ol>
<li>编写数据源配置</li>
<li>sqlSessionFactory</li>
<li>sqlSessionTemplate</li>
<li>给接口加实现类</li>
<li>将实现类注入到Spring</li>
</ol>
<p>先导入jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>编写顺序：</strong><br><strong>User -&gt; UserMapper -&gt; UserMapper.xml -&gt; spring-dao.xml -&gt; UserServiceImpl -&gt; applicationContext.xml -&gt; MyTest</strong></p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>实体类User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zz.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring-dao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">		https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">		https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    DataSource:使用Spring的数据源替换Mybatis的配置 c3p0 dbcp druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定 mybatis 配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/zz/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sqlSessionTemplate 就是之前使用的：sqlsession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 只能使用构造器注入sqlSessionFactory 原因：它没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>UserServiceImpl </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line">    <span class="comment">//原来所有的操作都使用sqlSession执行，现在都使用SqlSessionTemplate；</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>applicationContext.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">		https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">		https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入spring-dao.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">        <span class="keyword">for</span> (User user : userMapper.selectUser()) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二-SqlSessionDaoSupport"><a href="#方法二-SqlSessionDaoSupport" class="headerlink" title="方法二  SqlSessionDaoSupport"></a>方法二  SqlSessionDaoSupport</h3><p>UserMapperImpl2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(UserMapper.class).selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spring-dao</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zz.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="13-声明式事务"><a href="#13-声明式事务" class="headerlink" title="13 声明式事务"></a>13 声明式事务</h1><h2 id="13-1-回顾事务"><a href="#13-1-回顾事务" class="headerlink" title="13.1 回顾事务"></a>13.1 回顾事务</h2><ul>
<li>把一组业务当成一个业务来做，要么都成功，要么都失败</li>
<li>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎</li>
<li>确保完整性和一致性</li>
</ul>
<p>事务的ACID原则：</p>
<ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性<ul>
<li>多个业务可能操作同一个资源，防止数据损坏</li>
</ul>
</li>
<li>持久性<ul>
<li>事务一旦提交，无论系统发生什么问题，结果都不会被影响，被持久化的写到存储器中</li>
</ul>
</li>
</ul>
<p>ACID参考文章：<a href="https://www.cnblogs.com/malaikuangren/archive/2012/04/06/2434760.html">https://www.cnblogs.com/malaikuangren/archive/2012/04/06/2434760.html</a></p>
<p>13.2 Spring中的事务管理</p>
<ul>
<li>声明式事务：AOP</li>
<li>编程式事务：需要再代码中，进行事务管理</li>
</ul>
<p><strong>声明式事务</strong></p>
<p>spring-dao</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    DataSource:使用Spring的数据源替换Mybatis的配置 c3p0 dbcp druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定 mybatis 配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/zz/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sqlSessionTemplate 就是之前使用的：sqlsession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 只能使用构造器注入sqlSessionFactory 原因：它没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合aop实现事务织入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的通知类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给哪些方法配置事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新东西：配置事务的传播特性 propagation--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            给哪些方法配置事务   --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- *号包含上面4个方法：</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zz.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>UserMapperImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zz.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zz.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;zzzzz&quot;</span>, <span class="string">&quot;1231241&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        addUser(user);</span><br><span class="line">        deleteUser(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>思考：</strong><br>为什么需要事务？</p>
<ul>
<li>如果不配置事务，可能存在数据提交不一致的情况下；</li>
<li>如果不在spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li>
<li>事务在项目的开发中非常重要，涉及到数据的一致性和完整性问题！</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>B站: 狂神说Java  <a href="https://space.bilibili.com/95256449/">https://space.bilibili.com/95256449/</a></p>
<p>代码: <a href="https://github.com/nuaazz/Java">[nuaazz/Java: Java学习笔记 (github.com)]</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
